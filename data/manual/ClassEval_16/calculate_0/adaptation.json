[
    {
        "action": "INS",
        "label": "param",
        "inserted": "self,",
        "deleted": "",
        "type": "Method_Signature"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "operand_stack = []\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "operator_stack = []\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "funcdef",
        "inserted": "def precedence(operator):\n            if operator == '^':\n                return 3\n            elif operator in ['*', '/']:\n                return 2\n            elif operator in ['+', '-']:\n                return 1\n            else:\n                return 0\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "while_stmt",
        "inserted": "while len(operator_stack) > 0:\n            apply_operator(operand_stack, operator_stack)\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "return_stmt",
        "inserted": "return operand_stack[-1] if len(operand_stack) > 0 else None",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "apply_operator",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "parameters",
        "inserted": "(operand_stack, operator_stack)",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "char",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "operator = operator_stack.pop()\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "operand2 = operand_stack.pop()\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "operand1 = operand_stack.pop()\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "atom_expr",
        "inserted": "char.isdigit()",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "comparison",
        "inserted": "char in self.operators.keys()",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "comparison",
        "inserted": "char == '('",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "comparison",
        "inserted": "char == ')'",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "operand_stack",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": ".append",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "(result)",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "operator_stack.append(char)\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "[operator]",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "(operand1, operand2)",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "atom_expr",
        "inserted": "operator_stack[-1]",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "operator",
        "inserted": "!=",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "()",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "comparison",
        "inserted": "len(operator_stack) > 0",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "operator",
        "inserted": "<=",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "atom_expr",
        "inserted": "precedence(operator_stack[-1])",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "apply_operator",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "(char)",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "operand_stack",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "operator_stack",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "return_stmt",
        "inserted": "",
        "deleted": "return result",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "arith_expr",
        "inserted": "",
        "deleted": "\"Error: \" + str(e)",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "except_clause",
        "inserted": "",
        "deleted": "except Exception as e",
        "type": "Logic"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "Exception",
        "deleted": "Exception",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "result",
        "deleted": "result",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "atom_expr",
        "inserted": "str(e)",
        "deleted": "str(e)",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "string:",
        "inserted": "\"Error: \"",
        "deleted": "\"Error: \"",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "e",
        "deleted": "e",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "operator",
        "inserted": "+",
        "deleted": "+",
        "type": "Move"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "expression",
        "deleted": "Exception",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "self",
        "deleted": "eval",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "operators",
        "deleted": "expression",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "string",
        "inserted": "'('",
        "deleted": "\"Error: \"",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "operator_stack",
        "deleted": "str",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "pop",
        "deleted": "e",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "precedence",
        "deleted": "e",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "operator",
        "inserted": ",",
        "deleted": "+",
        "type": "Logic"
    }
]