[
    {
        "action": "INS",
        "label": "param",
        "inserted": "self,",
        "deleted": "",
        "type": "Method_Signature"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "\"\"\"\n        Use the operator at the top of the operator stack to perform the operation on the two numbers at the top of the operand stack, and store the result at the top of the operand stack\n        :param operand_stack: list\n        :param operator_stack: list\n        :return: the updated operand_stack and operator_stack\n        \"\"\"\n",
        "deleted": "",
        "type": "Documentation"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "operand_stack.append(result)\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "return_stmt",
        "inserted": "return operand_stack, operator_stack",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": ".operators",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "[operator]",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "arglist",
        "inserted": "num1, num2",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "comparison",
        "inserted": "",
        "deleted": "operator == '+'",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "operator",
        "inserted": "",
        "deleted": "+",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "name",
        "inserted": "",
        "deleted": "num2",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "operator",
        "inserted": "",
        "deleted": "==",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "string",
        "inserted": "",
        "deleted": "'-'",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "operator",
        "inserted": "",
        "deleted": "==",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "string",
        "inserted": "",
        "deleted": "'*'",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "name",
        "inserted": "",
        "deleted": "result",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "operator",
        "inserted": "",
        "deleted": "=",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "term",
        "inserted": "",
        "deleted": "num1 * num2",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "comparison",
        "inserted": "",
        "deleted": "operator == '/'",
        "type": "Logic"
    },
    {
        "action": "MOV",
        "label": "simple_stmt",
        "inserted": "num2 = number_stack.pop()\n",
        "deleted": "num2 = number_stack.pop()\n",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "atom_expr",
        "inserted": "number_stack.append(result)",
        "deleted": "number_stack.append(result)",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "result",
        "deleted": "result",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "operator",
        "inserted": "=",
        "deleted": "=",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "num1",
        "deleted": "num1",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "operator",
        "deleted": "operator",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "operator",
        "deleted": "operator",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "num1",
        "deleted": "num1",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "operator",
        "inserted": "*",
        "deleted": "*",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "num2",
        "deleted": "num2",
        "type": "Move"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "operand_stack",
        "deleted": "operator_stack",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "operator_stack",
        "deleted": "number_stack",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "num2",
        "deleted": "num1",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "num1",
        "deleted": "num2",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "operand_stack",
        "deleted": "number_stack",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "operand_stack",
        "deleted": "number_stack",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "operand_stack",
        "deleted": "number_stack",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "self",
        "deleted": "num1",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "operators",
        "deleted": "operator",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "operator",
        "inserted": ",",
        "deleted": "*",
        "type": "Logic"
    }
]