[
    {
        "action": "INS",
        "label": "param",
        "inserted": "self,",
        "deleted": "",
        "type": "Method_Signature"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "\"\"\"\n        check if there is a path between two icons\n        :param pos1: position tuple(x, y) of the first icon\n        :param pos2: position tuple(x, y) of the second icon\n        :return: True or False ,representing whether there is a path between two icons\n        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        >>> mc.is_valid_move((0, 0), (1, 0))\n        True\n        \"\"\"\n",
        "deleted": "",
        "type": "Documentation"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "visited = set()\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "return_stmt",
        "inserted": "return dfs(pos1[0], pos1[1], visited)",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "dfs",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "parameters",
        "inserted": "(row, col, visited)",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "visited.add((row, col))\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "for_stmt",
        "inserted": "for dr, dc in directions:\n                new_row, new_col = row + dr, col + dc\n                if new_row >= 0 and new_row < self.BOARD_SIZE[0] and new_col >= 0 and new_col < self.BOARD_SIZE[1] and self.board[new_row][new_col] != ' ' and (new_row, new_col) not in visited:\n                    if dfs(new_row, new_col, visited):\n                        return True\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "return False\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "comparison",
        "inserted": "(row, col) == pos2",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "return True\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "MOV",
        "label": "return_stmt",
        "inserted": "return False",
        "deleted": "return False",
        "type": "Move"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "pos1",
        "deleted": "icon1",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "pos2",
        "deleted": "icon2",
        "type": "Refactoring"
    }
]