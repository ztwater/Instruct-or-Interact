[
    {
        "action": "INS",
        "label": "param",
        "inserted": "self,",
        "deleted": "",
        "type": "Method_Signature"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "\"\"\"\n        check if there is a path between two icons\n        :param pos1: position tuple(x, y) of the first icon\n        :param pos2: position tuple(x, y) of the second icon\n        :return: True or False ,representing whether there is a path between two icons\n        >>> mc = MahjongConnect([4, 4], ['a', 'b', 'c'])\n        mc.board = [['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a'],\n                    ['a', 'b', 'c', 'a']]\n        >>> mc.is_valid_move((0, 0), (1, 0))\n        True\n        \"\"\"\n",
        "deleted": "",
        "type": "Documentation"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "icon1 = self.board[pos1[0]][pos1[1]]\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "icon2 = self.board[pos2[0]][pos2[1]]\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "funcdef",
        "inserted": "def dfs(x, y, visited):\n            # Check if the position is out of bounds or already visited\n            if x < 0 or x >= self.BOARD_SIZE[0] or y < 0 or y >= self.BOARD_SIZE[1] or visited[x][y]:\n                return False\n            \n            # Mark the position as visited\n            visited[x][y] = True\n            \n            # Check if the current icon is equal to icon2\n            if self.board[x][y] == icon2:\n                return True\n            \n            # Check if there is a path from the current position to icon2\n            if (self.board[x][y] == icon1) and (dfs(x+1, y, visited) or dfs(x-1, y, visited) or dfs(x, y+1, visited) or dfs(x, y-1, visited)):\n                return True\n            \n            return False\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "visited = [[False] * self.BOARD_SIZE[1] for _ in range(self.BOARD_SIZE[0])]\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "return_stmt",
        "inserted": "return dfs(pos1[0], pos1[1], visited)",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "comparison",
        "inserted": "icon1 == icon2",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "return True\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "MOV",
        "label": "return_stmt",
        "inserted": "return False",
        "deleted": "return False",
        "type": "Move"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "pos1",
        "deleted": "icon1",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "pos2",
        "deleted": "icon2",
        "type": "Refactoring"
    }
]