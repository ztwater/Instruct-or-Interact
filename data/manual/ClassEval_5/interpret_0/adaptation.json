[
    {
        "action": "INS",
        "label": "param",
        "inserted": "display=False",
        "deleted": "",
        "type": "Method_Signature"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "\"\"\"\n        Interpret the music score to be played\n        :param display:Bool, representing whether to print the interpreted score\n        :return:list of dict, The dict includes two fields, Chore and Tune, which are letters and numbers, respectively\n        >>> context = AutomaticGuitarSimulator(\"C53231323 Em43231323 F43231323 G63231323\")\n        >>> play_list = context.interpret(display = False)\n        [{'Chord': 'C', 'Tune': '53231323'}, {'Chord': 'Em', 'Tune': '43231323'}, {'Chord': 'F', 'Tune': '43231323'}, {'Chord': 'G', 'Tune': '63231323'}]\n\n        \"\"\"\n",
        "deleted": "",
        "type": "Documentation"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "interpretation = []\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "music_scores = self.play_text.split()\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "for_stmt",
        "inserted": "for music_score in music_scores:\n            chord = music_score[:2]\n            tune = music_score[2:]\n            interpretation.append({'Chord': chord, 'Tune': tune})\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "if_stmt",
        "inserted": "if display:\n            for data in interpretation:\n                self.display(data['Chord'], data['Tune'])\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "operator",
        "inserted": ",",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "self",
        "deleted": "music_score",
        "type": "Refactoring"
    }
]