[
    {
        "action": "INS",
        "label": "param",
        "inserted": "peek",
        "deleted": "",
        "type": "Method_Signature"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "\"\"\"\n        Compare the precedence of two operators\n        :param cur: string, the current operator\n        :param peek: string, the operator at the top of the operator stack\n        :return: bool, True if the current operator has higher or equal precedence, False otherwise\n        >>> expression_calculator = ExpressionCalculator()\n        >>> expression_calculator.compare(\"+\", \"-\")\n        True\n\n        \"\"\"\n",
        "deleted": "",
        "type": "Documentation"
    },
    {
        "action": "INS",
        "label": "operator",
        "inserted": ",",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "[precedence.get(cur, 0)]",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "[precedence.get(peek, 0)]",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "operator",
        "inserted": "",
        "deleted": ",",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "number",
        "inserted": "",
        "deleted": "0",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "trailer",
        "inserted": "",
        "deleted": ".get",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "operator",
        "inserted": "",
        "deleted": ",",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "number",
        "inserted": "",
        "deleted": "0",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "trailer",
        "inserted": "",
        "deleted": ".get",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "operator",
        "inserted": "",
        "deleted": ">",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "fstring_start",
        "inserted": "",
        "deleted": "f\"",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "operator",
        "inserted": "",
        "deleted": "}",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "fstring_string:",
        "inserted": "",
        "deleted": " has higher precedence than ",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "fstring_expr",
        "inserted": "",
        "deleted": "{operator2}",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "fstring_end",
        "inserted": "",
        "deleted": "\"",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "name",
        "inserted": "",
        "deleted": "precedence",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "operator",
        "inserted": "",
        "deleted": "<",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "fstring",
        "inserted": "",
        "deleted": "f\"{operator1} has lower precedence than {operator2}\"",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "fstring",
        "inserted": "",
        "deleted": "f\"{operator1} and {operator2} have the same precedence\"",
        "type": "Logic"
    },
    {
        "action": "MOV",
        "label": "operator",
        "inserted": "{",
        "deleted": "{",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "precedence",
        "deleted": "precedence",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "operator1",
        "deleted": "operator1",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "operator1",
        "deleted": "operator1",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "atom_expr",
        "inserted": "precedence.get(operator2, 0)",
        "deleted": "precedence.get(operator2, 0)",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "operator1",
        "deleted": "operator1",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "atom_expr",
        "inserted": "precedence.get(operator2, 0)",
        "deleted": "precedence.get(operator2, 0)",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "trailer",
        "inserted": ".get",
        "deleted": ".get",
        "type": "Move"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "self",
        "deleted": "operator1",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "cur",
        "deleted": "operator2",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "operator",
        "inserted": ">=",
        "deleted": "{",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "self",
        "deleted": "precedence",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "self",
        "deleted": "operator1",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "operat_priority",
        "deleted": "operator1",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "operat_priority",
        "deleted": "operator1",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "cur",
        "deleted": "operator2",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "peek",
        "deleted": "operator2",
        "type": "Refactoring"
    }
]