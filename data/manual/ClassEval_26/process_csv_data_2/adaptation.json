[
    {
        "action": "INS",
        "label": "param",
        "inserted": "N,",
        "deleted": "",
        "type": "Method_Signature"
    },
    {
        "action": "INS",
        "label": "param",
        "inserted": "save_file_name",
        "deleted": "",
        "type": "Method_Signature"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "\"\"\"\n        Read a csv file into variable title and data.\n        Only remain the N th (from 0) column data and Capitalize them, store the title and new data into a new csv file.\n        Add '_process' suffix after old file name, as a new file name.\n        :param N: int, the N th column(from 0)\n        :param save_file_name, the name of file that needs to be processed.\n        :return:int, if success return 1, or 0 otherwise\n        >>> csvProcessor = CSVProcessor()\n        >>> csvProcessor.read_csv('read_test.csv')\n        (['a', 'b', 'c', 'd'], [['hElLo', 'YoU', 'ME', 'LoW']])\n        >>> csvProcessor.process_csv_data(0, 'read_test.csv')\n        1\n        >>> csvProcessor.read_csv('read_test_process.csv')\n        (['a', 'b', 'c', 'd'], [['HELLO']])\n        \"\"\"\n",
        "deleted": "",
        "type": "Documentation"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "self.write_csv([title, processed_data], processed_file_name)\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "return_stmt",
        "inserted": "return 1",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "operator",
        "inserted": ",",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "operator",
        "inserted": "+",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "string",
        "inserted": "'_process.csv'",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "sync_comp_for",
        "inserted": "for row in data",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "('.')",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "[0]",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "[N]",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "()",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "name",
        "inserted": "",
        "deleted": "reader",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "parameters",
        "inserted": "",
        "deleted": "(file_path)",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "name",
        "inserted": "",
        "deleted": "file_path",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "string",
        "inserted": "",
        "deleted": "'r'",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "return_stmt",
        "inserted": "",
        "deleted": "return title, data",
        "type": "Logic"
    },
    {
        "action": "MOV",
        "label": "param",
        "inserted": "file_path",
        "deleted": "file_path",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "simple_stmt",
        "inserted": "reader = csv.reader(file)\n",
        "deleted": "reader = csv.reader(file)\n",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "open",
        "deleted": "open",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "operator",
        "inserted": ",",
        "deleted": ",",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "file",
        "deleted": "file",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "testlist_star_expr",
        "inserted": "title, data",
        "deleted": "title, data",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "atom_expr",
        "inserted": "list(reader)",
        "deleted": "list(reader)",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "atom_expr",
        "inserted": "next(reader)",
        "deleted": "next(reader)",
        "type": "Move"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "self",
        "deleted": "file_path",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "N",
        "deleted": "open",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "save_file_name",
        "deleted": "file",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "processed_data",
        "deleted": "title",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "processed_file_name",
        "deleted": "data",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "self",
        "deleted": "csv",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "read_csv",
        "deleted": "reader",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "save_file_name",
        "deleted": "file",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "save_file_name",
        "deleted": "list",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "split",
        "deleted": "reader",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "row",
        "deleted": "next",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "upper",
        "deleted": "reader",
        "type": "Refactoring"
    }
]