[
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "\"\"\"\n        Generate the INSERT SQL statement from the given parameters.\n        :param table: str, the table to be inserted in database.\n        :param data: dict, the key and value in SQL insert statement\n        :return query: str, the SQL insert statement.\n        >>> SQLQueryBuilder.insert('table1', {'name': 'Test', 'age': 14})\n        \"INSERT INTO table1 (name, age) VALUES ('Test', '14')\"\n        \"\"\"\n",
        "deleted": "",
        "type": "Documentation"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "column_names = list(data.keys())\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "values",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "operator",
        "inserted": "=",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "len",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "list",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "data",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "()",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "()",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "data",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "()",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "([str(value) for value in values])",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "operator",
        "inserted": "",
        "deleted": ",",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "param",
        "inserted": "",
        "deleted": "values",
        "type": "Method_Signature"
    },
    {
        "action": "MOV",
        "label": "atom_expr",
        "inserted": "len(values)",
        "deleted": "len(values)",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "trailer",
        "inserted": "(column_names)",
        "deleted": "(column_names)",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "trailer",
        "inserted": "(values)",
        "deleted": "(values)",
        "type": "Move"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "table",
        "deleted": "table_name",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "data",
        "deleted": "column_names",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "table",
        "deleted": "table_name",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "data",
        "deleted": "len",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "keys",
        "deleted": "column_names",
        "type": "Refactoring"
    }
]