[
    {
        "action": "INS",
        "label": "param",
        "inserted": "x",
        "deleted": "",
        "type": "Method_Signature"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "\"\"\"\n        Converts a string representation of a number into words format\n        :param x: str, the string representation of a number\n        :return: str, the number in words format\n        >>> formatter = NumberWordFormatter()\n        >>> formatter.format_string(\"123456\")\n        \"ONE HUNDRED AND TWENTY THREE THOUSAND FOUR HUNDRED AND FIFTY SIX ONLY\"\n        \"\"\"\n",
        "deleted": "",
        "type": "Documentation"
    },
    {
        "action": "INS",
        "label": "funcdef",
        "inserted": "def trans_two(s):\n            if s[0] == '0':\n                return self.NUMBER[int(s[1])]\n            elif s[0] == '1':\n                return self.NUMBER_TEEN[int(s[1])]\n            else:\n                return self.NUMBER_TEN[int(s[0])] + \" \" + self.NUMBER[int(s[1])]\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "funcdef",
        "inserted": "def trans_three(s):\n            if s[0] == '0':\n                return trans_two(s[1:])\n            else:\n                return self.NUMBER[int(s[0])] + \" HUNDRED \" + trans_two(s[1:])\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "funcdef",
        "inserted": "def parse_more(i):\n            if i == 0:\n                return \"\"\n            elif i == 1:\n                return \"THOUSAND\"\n            else:\n                return self.NUMBER[i] + \" \" + self.NUMBER_MORE[i]\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "length = len(x)\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "x = x[::-1]\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "operator",
        "inserted": ",",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "(length // 3 + 1)",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "if_stmt",
        "inserted": "if i == length // 3 and length % 3 != 0:\n                s = x[i * 3: length]\n            else:\n                s = x[i * 3: i * 3 + 3]\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "if_stmt",
        "inserted": "if int(s) == 0:\n                continue\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "result.append(parse_more(i))\n",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "operator",
        "inserted": "+",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "string:",
        "inserted": "\" ONLY\"",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "operator",
        "inserted": "==",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "number",
        "inserted": "3",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": "(s)",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "number",
        "deleted": "number",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "atom_expr",
        "inserted": "' '.join(result)",
        "deleted": "' '.join(result)",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "digit",
        "deleted": "digit",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "words",
        "deleted": "words",
        "type": "Move"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "self",
        "deleted": "number",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "i",
        "deleted": "digit",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "range",
        "deleted": "number",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "string",
        "inserted": "'ZERO'",
        "deleted": "'zero'",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "string",
        "inserted": "'ONE'",
        "deleted": "'one'",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "string",
        "inserted": "'TWO'",
        "deleted": "'two'",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "string",
        "inserted": "'THREE'",
        "deleted": "'three'",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "string",
        "inserted": "'FOUR'",
        "deleted": "'four'",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "string",
        "inserted": "'FIVE'",
        "deleted": "'five'",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "string",
        "inserted": "'SIX'",
        "deleted": "'six'",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "string",
        "inserted": "'SEVEN'",
        "deleted": "'seven'",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "string",
        "inserted": "'EIGHT'",
        "deleted": "'eight'",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "string",
        "inserted": "'NINE'",
        "deleted": "'nine'",
        "type": "Logic"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "len",
        "deleted": "digit",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "s",
        "deleted": "words",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "trans_three",
        "deleted": "words",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "s",
        "deleted": "digit",
        "type": "Refactoring"
    }
]