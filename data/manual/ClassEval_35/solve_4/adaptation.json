[
    {
        "action": "INS",
        "label": "simple_stmt",
        "inserted": "\"\"\"\n        Use BFS algorithm to find the path solution which makes the initial state to the goal method.\n        Maintain a list as a queue, named as open_list, append the initial state.\n        Always visit and pop the 0 index element, invoke get_possible_moves method find all the possible directions.\n        Traversal the possible_moves list and invoke move method to get several new states.Then append them.\n        redo the above steps until the open_list is empty or the state has changed to the goal state.\n        :return path: list of str, the solution to the goal state.\n        \"\"\"\n",
        "deleted": "",
        "type": "Documentation"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "self",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": ".goal_state",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "self",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": ".get_possible_moves",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "name",
        "inserted": "self",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "INS",
        "label": "trailer",
        "inserted": ".initial_state",
        "deleted": "",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "operator",
        "inserted": "",
        "deleted": ",",
        "type": "Logic"
    },
    {
        "action": "DEL",
        "label": "param",
        "inserted": "",
        "deleted": "goal_state",
        "type": "Method_Signature"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "goal_state",
        "deleted": "goal_state",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "generate_next_states",
        "deleted": "generate_next_states",
        "type": "Move"
    },
    {
        "action": "MOV",
        "label": "name",
        "inserted": "initial_state",
        "deleted": "initial_state",
        "type": "Move"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "self",
        "deleted": "initial_state",
        "type": "Refactoring"
    },
    {
        "action": "UPD",
        "label": "name",
        "inserted": "get_possible_moves",
        "deleted": "generate_next_states",
        "type": "Refactoring"
    }
]