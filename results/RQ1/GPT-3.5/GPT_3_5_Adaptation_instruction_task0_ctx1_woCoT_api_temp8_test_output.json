{
    "ClassEval_0": {
        "filter": {
            "filter_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_filter_6": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 3, 'address': 'address1'}, 'jwt': 'user12022-11-29'}}} is not false",
                        "test_filter_7": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 1, 'address': 'address1'}, 'jwt': 'user12023-11-29'}}} is not None"
                    }
                },
                "total_run": 8
            },
            "filter_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_filter_6": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 3, 'address': 'address1'}, 'jwt': 'user12022-11-29'}}} is not false",
                        "test_filter_7": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 1, 'address': 'address1'}, 'jwt': 'user12023-11-29'}}} is not None"
                    }
                },
                "total_run": 8
            },
            "filter_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_filter_6": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 3, 'address': 'address1'}, 'jwt': 'user12022-11-29'}}} is not false",
                        "test_filter_7": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 1, 'address': 'address1'}, 'jwt': 'user12023-11-29'}}} is not None"
                    }
                },
                "total_run": 8
            },
            "filter_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_filter_6": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 3, 'address': 'address1'}, 'jwt': 'user12022-11-29'}}} is not false",
                        "test_filter_7": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 1, 'address': 'address1'}, 'jwt': 'user12023-11-29'}}} is not None"
                    }
                },
                "total_run": 8
            },
            "filter_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_filter_6": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 3, 'address': 'address1'}, 'jwt': 'user12022-11-29'}}} is not false",
                        "test_filter_7": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 1, 'address': 'address1'}, 'jwt': 'user12023-11-29'}}} is not None"
                    }
                },
                "total_run": 8
            }
        },
        "get_jwt_user": {
            "get_jwt_user_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_jwt_user_1": "name 'jwt' is not defined",
                        "test_get_jwt_user_2": "name 'jwt' is not defined",
                        "test_get_jwt_user_3": "name 'jwt' is not defined",
                        "test_get_jwt_user_4": "name 'jwt' is not defined",
                        "test_get_jwt_user_5": "name 'jwt' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_jwt_user_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_jwt_user_1": "name 'jwt' is not defined",
                        "test_get_jwt_user_2": "name 'jwt' is not defined",
                        "test_get_jwt_user_3": "name 'jwt' is not defined",
                        "test_get_jwt_user_4": "name 'jwt' is not defined",
                        "test_get_jwt_user_5": "name 'jwt' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_jwt_user_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_jwt_user_1": "name 'jwt' is not defined",
                        "test_get_jwt_user_2": "name 'jwt' is not defined",
                        "test_get_jwt_user_3": "name 'jwt' is not defined",
                        "test_get_jwt_user_4": "name 'jwt' is not defined",
                        "test_get_jwt_user_5": "name 'jwt' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_jwt_user_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_jwt_user_1": "name 'jwt' is not defined",
                        "test_get_jwt_user_2": "name 'jwt' is not defined",
                        "test_get_jwt_user_3": "name 'jwt' is not defined",
                        "test_get_jwt_user_4": "name 'jwt' is not defined",
                        "test_get_jwt_user_5": "name 'jwt' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_jwt_user_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_jwt_user_1": "name 'jwt' is not defined",
                        "test_get_jwt_user_2": "name 'jwt' is not defined",
                        "test_get_jwt_user_3": "name 'jwt' is not defined",
                        "test_get_jwt_user_4": "name 'jwt' is not defined",
                        "test_get_jwt_user_5": "name 'jwt' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "is_start_with": {
            "is_start_with_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_start_with_3": "False is not true"
                    }
                },
                "total_run": 5
            },
            "is_start_with_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_start_with_3": "False is not true"
                    }
                },
                "total_run": 5
            },
            "is_start_with_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_start_with_3": "False is not true"
                    }
                },
                "total_run": 5
            },
            "is_start_with_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_start_with_3": "False is not true"
                    }
                },
                "total_run": 5
            },
            "is_start_with_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_start_with_3": "False is not true"
                    }
                },
                "total_run": 5
            }
        },
        "set_current_user_info_and_log": {
            "set_current_user_info_and_log_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "set_current_user_info_and_log_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "set_current_user_info_and_log_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "set_current_user_info_and_log_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "set_current_user_info_and_log_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            }
        }
    },
    "ClassEval_1": {
        "calculate_annulus_area": {
            "calculate_annulus_area_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_annulus_area_2": "unsupported operand type(s) for -: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_annulus_area_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_annulus_area_2": "unsupported operand type(s) for -: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_annulus_area_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_annulus_area_2": "unsupported operand type(s) for -: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_annulus_area_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_annulus_area_2": "unsupported operand type(s) for -: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_annulus_area_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_annulus_area_2": "unsupported operand type(s) for -: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "calculate_circle_area": {
            "calculate_circle_area_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_circle_area_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_circle_area_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_circle_area_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_circle_area_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "calculate_cylinder_area": {
            "calculate_cylinder_area_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_cylinder_area_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_cylinder_area_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_cylinder_area_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_cylinder_area_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "calculate_sector_area": {
            "calculate_sector_area_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_sector_area": "3.53 != 0.061685027506808494 within 0.01 delta (3.468314972493191 difference)",
                        "test_calculate_sector_area_2": "3.14 != 0.05483113556160755 within 0.01 delta (3.0851688644383928 difference)",
                        "test_calculate_sector_area_4": "12.56 != 0.2193245422464302 within 0.01 delta (12.340675457753571 difference)"
                    }
                },
                "total_run": 5
            },
            "calculate_sector_area_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_sector_area": "3.53 != 0.061685027506808494 within 0.01 delta (3.468314972493191 difference)",
                        "test_calculate_sector_area_2": "3.14 != 0.05483113556160755 within 0.01 delta (3.0851688644383928 difference)",
                        "test_calculate_sector_area_4": "12.56 != 0.2193245422464302 within 0.01 delta (12.340675457753571 difference)"
                    }
                },
                "total_run": 5
            },
            "calculate_sector_area_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_sector_area": "3.53 != 0.061685027506808494 within 0.01 delta (3.468314972493191 difference)",
                        "test_calculate_sector_area_2": "3.14 != 0.05483113556160755 within 0.01 delta (3.0851688644383928 difference)",
                        "test_calculate_sector_area_4": "12.56 != 0.2193245422464302 within 0.01 delta (12.340675457753571 difference)"
                    }
                },
                "total_run": 5
            },
            "calculate_sector_area_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_sector_area": "3.53 != 0.061685027506808494 within 0.01 delta (3.468314972493191 difference)",
                        "test_calculate_sector_area_2": "3.14 != 0.05483113556160755 within 0.01 delta (3.0851688644383928 difference)",
                        "test_calculate_sector_area_4": "12.56 != 0.2193245422464302 within 0.01 delta (12.340675457753571 difference)"
                    }
                },
                "total_run": 5
            },
            "calculate_sector_area_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_sector_area": "3.53 != 0.061685027506808494 within 0.01 delta (3.468314972493191 difference)",
                        "test_calculate_sector_area_2": "3.14 != 0.05483113556160755 within 0.01 delta (3.0851688644383928 difference)",
                        "test_calculate_sector_area_4": "12.56 != 0.2193245422464302 within 0.01 delta (12.340675457753571 difference)"
                    }
                },
                "total_run": 5
            }
        },
        "calculate_sphere_area": {
            "calculate_sphere_area_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_sphere_area_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_sphere_area_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_sphere_area_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_sphere_area_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_10": {
        "calculate_binary_info": {
            "calculate_binary_info_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_binary_info": "{'Zeroes': 47.5, 'Ones': 52.5, 'Bit length': 40} != {'Zeroes': 0.475, 'Ones': 0.525, 'Bit length': 40}",
                        "test_calculate_binary_info_2": "{'Zeroes': 46.42857142857143, 'Ones': 53.57142857142857, 'Bit length': 28} != {'Bit length': 28, 'Ones': 0.5357142857142857, 'Zeroes': 0.4642857142857143}",
                        "test_calculate_binary_info_3": "{'Zeroes': 37.93103448275862, 'Ones': 62.06896551724138, 'Bit length': 29} != {'Bit length': 29, 'Ones': 0.6206896551724138, 'Zeroes': 0.3793103448275862}",
                        "test_calculate_binary_info_4": "{'Zeroes': 40.0, 'Ones': 60.0, 'Bit length': 15} != {'Bit length': 15, 'Ones': 0.6, 'Zeroes': 0.4}",
                        "test_calculate_binary_info_5": "{'Zeroes': 43.75, 'Ones': 56.25, 'Bit length': 16} != {'Bit length': 16, 'Ones': 0.5625, 'Zeroes': 0.4375}"
                    }
                },
                "total_run": 5
            },
            "calculate_binary_info_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_binary_info": "{'Zeroes': 47.5, 'Ones': 52.5, 'Bit length': 40} != {'Zeroes': 0.475, 'Ones': 0.525, 'Bit length': 40}",
                        "test_calculate_binary_info_2": "{'Zeroes': 46.429, 'Ones': 53.571, 'Bit length': 28} != {'Bit length': 28, 'Ones': 0.5357142857142857, 'Zeroes': 0.4642857142857143}",
                        "test_calculate_binary_info_3": "{'Zeroes': 37.931, 'Ones': 62.069, 'Bit length': 29} != {'Bit length': 29, 'Ones': 0.6206896551724138, 'Zeroes': 0.3793103448275862}",
                        "test_calculate_binary_info_4": "{'Zeroes': 40.0, 'Ones': 60.0, 'Bit length': 15} != {'Bit length': 15, 'Ones': 0.6, 'Zeroes': 0.4}",
                        "test_calculate_binary_info_5": "{'Zeroes': 43.75, 'Ones': 56.25, 'Bit length': 16} != {'Bit length': 16, 'Ones': 0.5625, 'Zeroes': 0.4375}"
                    }
                },
                "total_run": 5
            },
            "calculate_binary_info_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_binary_info": "{'Zeroes': 47.5, 'Ones': 52.5, 'Bit length': 40} != {'Zeroes': 0.475, 'Ones': 0.525, 'Bit length': 40}",
                        "test_calculate_binary_info_2": "{'Zeroes': 46.429, 'Ones': 53.571, 'Bit length': 28} != {'Bit length': 28, 'Ones': 0.5357142857142857, 'Zeroes': 0.4642857142857143}",
                        "test_calculate_binary_info_3": "{'Zeroes': 37.931, 'Ones': 62.069, 'Bit length': 29} != {'Bit length': 29, 'Ones': 0.6206896551724138, 'Zeroes': 0.3793103448275862}",
                        "test_calculate_binary_info_4": "{'Zeroes': 40.0, 'Ones': 60.0, 'Bit length': 15} != {'Bit length': 15, 'Ones': 0.6, 'Zeroes': 0.4}",
                        "test_calculate_binary_info_5": "{'Zeroes': 43.75, 'Ones': 56.25, 'Bit length': 16} != {'Bit length': 16, 'Ones': 0.5625, 'Zeroes': 0.4375}"
                    }
                },
                "total_run": 5
            },
            "calculate_binary_info_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_binary_info": "{'Zeroes': 47.5, 'Ones': 52.5, 'Bit length': 40} != {'Zeroes': 0.475, 'Ones': 0.525, 'Bit length': 40}",
                        "test_calculate_binary_info_2": "{'Zeroes': 46.42857142857143, 'Ones': 53.57142857142857, 'Bit length': 28} != {'Bit length': 28, 'Ones': 0.5357142857142857, 'Zeroes': 0.4642857142857143}",
                        "test_calculate_binary_info_3": "{'Zeroes': 37.93103448275862, 'Ones': 62.06896551724138, 'Bit length': 29} != {'Bit length': 29, 'Ones': 0.6206896551724138, 'Zeroes': 0.3793103448275862}",
                        "test_calculate_binary_info_4": "{'Zeroes': 40.0, 'Ones': 60.0, 'Bit length': 15} != {'Bit length': 15, 'Ones': 0.6, 'Zeroes': 0.4}",
                        "test_calculate_binary_info_5": "{'Zeroes': 43.75, 'Ones': 56.25, 'Bit length': 16} != {'Bit length': 16, 'Ones': 0.5625, 'Zeroes': 0.4375}"
                    }
                },
                "total_run": 5
            },
            "calculate_binary_info_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_binary_info": "{'Zeroes': 47.5, 'Ones': 52.5, 'Bit length': 40} != {'Zeroes': 0.475, 'Ones': 0.525, 'Bit length': 40}",
                        "test_calculate_binary_info_2": "{'Zeroes': 46.42857142857143, 'Ones': 53.57142857142857, 'Bit length': 28} != {'Bit length': 28, 'Ones': 0.5357142857142857, 'Zeroes': 0.4642857142857143}",
                        "test_calculate_binary_info_3": "{'Zeroes': 37.93103448275862, 'Ones': 62.06896551724138, 'Bit length': 29} != {'Bit length': 29, 'Ones': 0.6206896551724138, 'Zeroes': 0.3793103448275862}",
                        "test_calculate_binary_info_4": "{'Zeroes': 40.0, 'Ones': 60.0, 'Bit length': 15} != {'Bit length': 15, 'Ones': 0.6, 'Zeroes': 0.4}",
                        "test_calculate_binary_info_5": "{'Zeroes': 43.75, 'Ones': 56.25, 'Bit length': 16} != {'Bit length': 16, 'Ones': 0.5625, 'Zeroes': 0.4375}"
                    }
                },
                "total_run": 5
            }
        },
        "clean_non_binary_chars": {
            "clean_non_binary_chars_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "clean_non_binary_chars_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "clean_non_binary_chars_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "clean_non_binary_chars_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_clean_non_binary_chars": "clean_non_binary_chars() missing 1 required positional argument: 'binary_string'",
                        "test_clean_non_binary_chars_2": "clean_non_binary_chars() missing 1 required positional argument: 'binary_string'",
                        "test_clean_non_binary_chars_3": "clean_non_binary_chars() missing 1 required positional argument: 'binary_string'",
                        "test_clean_non_binary_chars_4": "clean_non_binary_chars() missing 1 required positional argument: 'binary_string'",
                        "test_clean_non_binary_chars_5": "clean_non_binary_chars() missing 1 required positional argument: 'binary_string'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "clean_non_binary_chars_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "convert_to_ascii": {
            "convert_to_ascii_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "convert_to_ascii_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "convert_to_ascii_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "convert_to_ascii_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "convert_to_ascii_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "convert_to_utf8": {
            "convert_to_utf8_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_to_utf8": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_2": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_3": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_4": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_5": "'str' object has no attribute 'decode'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "convert_to_utf8_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_to_utf8": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_2": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_3": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_4": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_5": "'str' object has no attribute 'decode'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "convert_to_utf8_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_to_utf8": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_2": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_3": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_4": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_5": "'str' object has no attribute 'decode'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "convert_to_utf8_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_to_utf8": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_2": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_3": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_4": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_5": "'str' object has no attribute 'decode'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "convert_to_utf8_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_to_utf8": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_2": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_3": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_4": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_5": "'str' object has no attribute 'decode'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_11": {
        "add": {
            "add_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'stat'",
                        "test_add_2": "add() missing 1 required positional argument: 'stat'",
                        "test_add_3": "add() missing 1 required positional argument: 'stat'",
                        "test_add_4": "add() missing 1 required positional argument: 'stat'",
                        "test_add_5": "add() missing 1 required positional argument: 'stat'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_5": "4 != 2"
                    }
                },
                "total_run": 5
            },
            "add_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'stat'",
                        "test_add_2": "add() missing 1 required positional argument: 'stat'",
                        "test_add_3": "add() missing 1 required positional argument: 'stat'",
                        "test_add_4": "add() missing 1 required positional argument: 'stat'",
                        "test_add_5": "add() missing 1 required positional argument: 'stat'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_5": "4 != 2"
                    }
                },
                "total_run": 5
            },
            "add_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_5": "4 != 2"
                    }
                },
                "total_run": 5
            }
        },
        "check": {
            "check_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_check": "check() missing 1 required positional argument: 'args'",
                        "test_check_2": "check() missing 1 required positional argument: 'args'",
                        "test_check_3": "check() missing 1 required positional argument: 'args'",
                        "test_check_4": "check() missing 1 required positional argument: 'args'",
                        "test_check_5": "check() missing 1 required positional argument: 'args'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "has": {
            "has_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "has_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "has_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "has_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "has_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "remove": {
            "remove_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_4": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_remove_5": "invalid literal for int() with base 2: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_remove": "1 != 4",
                        "test_remove_2": "0 != 8",
                        "test_remove_3": "None != 2",
                        "test_remove_4": "None != 8"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_12": {
        "calculate_hand_value": {
            "calculate_hand_value_0": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_calculate_hand_value_1": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_2": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_3": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_4": "invalid literal for int() with base 10: 'JS'",
                        "test_calculate_hand_value_5": "invalid literal for int() with base 10: 'JS'",
                        "test_calculate_hand_value_6": "invalid literal for int() with base 10: 'JS'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "calculate_hand_value_1": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_calculate_hand_value_6": "invalid literal for int() with base 10: 'B'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "calculate_hand_value_2": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_calculate_hand_value_1": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_2": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_3": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_4": "invalid literal for int() with base 10: 'JS'",
                        "test_calculate_hand_value_5": "invalid literal for int() with base 10: 'JS'",
                        "test_calculate_hand_value_6": "invalid literal for int() with base 10: 'JS'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "calculate_hand_value_3": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_calculate_hand_value_1": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_2": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_3": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_4": "invalid literal for int() with base 10: 'JS'",
                        "test_calculate_hand_value_5": "invalid literal for int() with base 10: 'JS'",
                        "test_calculate_hand_value_6": "invalid literal for int() with base 10: 'JS'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "calculate_hand_value_4": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_calculate_hand_value_6": "invalid literal for int() with base 10: 'B'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "check_winner": {
            "check_winner_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "'Dealer wins!' != 'Dealer wins'",
                        "test_check_winner_2": "'Player wins!' != 'Player wins'",
                        "test_check_winner_3": "\"It's a tie!\" != 'Dealer wins'",
                        "test_check_winner_4": "\"It's a tie!\" != 'Player wins'",
                        "test_check_winner_5": "'Dealer wins!' != 'Dealer wins'",
                        "test_check_winner_6": "'Player wins!' != 'Player wins'"
                    }
                },
                "total_run": 6
            },
            "check_winner_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "'Player wins!' != 'Dealer wins'",
                        "test_check_winner_2": "'Dealer wins!' != 'Player wins'",
                        "test_check_winner_3": "'Player wins!' != 'Dealer wins'",
                        "test_check_winner_4": "'Dealer wins!' != 'Player wins'",
                        "test_check_winner_5": "'Dealer wins!' != 'Dealer wins'",
                        "test_check_winner_6": "'Player wins!' != 'Player wins'"
                    }
                },
                "total_run": 6
            },
            "check_winner_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "check_winner_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "'Player wins!' != 'Dealer wins'",
                        "test_check_winner_2": "'Dealer wins!' != 'Player wins'",
                        "test_check_winner_3": "'Player wins!' != 'Dealer wins'",
                        "test_check_winner_4": "'Dealer wins!' != 'Player wins'",
                        "test_check_winner_5": "'Dealer wins!' != 'Dealer wins'",
                        "test_check_winner_6": "'Player wins!' != 'Player wins'"
                    }
                },
                "total_run": 6
            },
            "check_winner_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "'Player wins' != 'Dealer wins'",
                        "test_check_winner_2": "'Dealer wins' != 'Player wins'",
                        "test_check_winner_3": "'Player wins' != 'Dealer wins'",
                        "test_check_winner_4": "'Dealer wins' != 'Player wins'"
                    }
                },
                "total_run": 6
            }
        },
        "create_deck": {
            "create_deck_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_deck_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_deck_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_deck_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_deck_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_13": {
        "add_book": {
            "add_book_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_book_1": "'dict' object has no attribute 'append'",
                        "test_add_book_3": "'dict' object has no attribute 'append'",
                        "test_add_book_4": "'dict' object has no attribute 'append'",
                        "test_add_book_5": "'dict' object has no attribute 'append'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_book_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_book_1": "'dict' object has no attribute 'append'",
                        "test_add_book_3": "'dict' object has no attribute 'append'",
                        "test_add_book_4": "'dict' object has no attribute 'append'",
                        "test_add_book_5": "'dict' object has no attribute 'append'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_book_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_book_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_book_1": "'dict' object has no attribute 'append'",
                        "test_add_book_3": "'dict' object has no attribute 'append'",
                        "test_add_book_4": "'dict' object has no attribute 'append'",
                        "test_add_book_5": "'dict' object has no attribute 'append'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_book_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_book_1": "'dict' object has no attribute 'append'",
                        "test_add_book_3": "'dict' object has no attribute 'append'",
                        "test_add_book_4": "'dict' object has no attribute 'append'",
                        "test_add_book_5": "'dict' object has no attribute 'append'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "remove_book": {
            "remove_book_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_book_2": "{'book2': 1} != {'book1': 1, 'book2': 1}",
                        "test_remove_book_3": "Exception not raised",
                        "test_remove_book_4": "Exception not raised",
                        "test_remove_book_5": "Exception not raised"
                    }
                },
                "total_run": 5
            },
            "remove_book_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_book_3": "Exception not raised",
                        "test_remove_book_4": "Exception not raised",
                        "test_remove_book_5": "Exception not raised"
                    }
                },
                "total_run": 5
            },
            "remove_book_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_book_1": "{'book1': 0, 'book2': 1} != {'book2': 1}",
                        "test_remove_book_3": "Exception not raised",
                        "test_remove_book_4": "Exception not raised",
                        "test_remove_book_5": "Exception not raised"
                    }
                },
                "total_run": 5
            },
            "remove_book_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_remove_book_1": "string indices must be integers",
                        "test_remove_book_2": "string indices must be integers"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "remove_book_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_book_3": "Exception not raised",
                        "test_remove_book_4": "Exception not raised",
                        "test_remove_book_5": "Exception not raised"
                    }
                },
                "total_run": 5
            }
        },
        "view_book_quantity": {
            "view_book_quantity_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_book_quantity_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_book_quantity_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_book_quantity_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_book_quantity_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "view_inventory": {
            "view_inventory_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_inventory_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_inventory_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_inventory_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_inventory_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_14": {
        "add_book": {
            "add_book_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_add_book": "table books has no column named availability"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "add_book_1": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_add_book": "table books has no column named availability"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "add_book_2": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_add_book": "table books has no column named availability"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "add_book_3": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_add_book": "table books has no column named availability"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "add_book_4": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_add_book": "table books has no column named availability"
                    }
                },
                "failures": {},
                "total_run": 1
            }
        },
        "borrow_book": {
            "borrow_book_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_borrow_book": "no such column: status"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "borrow_book_1": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_borrow_book": "no such column: status"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "borrow_book_2": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_borrow_book": "no such column: status"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "borrow_book_3": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_borrow_book": "no such column: status"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "borrow_book_4": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_borrow_book": "no such column: status"
                    }
                },
                "failures": {},
                "total_run": 1
            }
        },
        "create_table": {
            "create_table_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_table_1": "unexpectedly None",
                        "test_create_table_2": "Lists differ: [] != ['id', 'title', 'author', 'available']"
                    }
                },
                "total_run": 2
            },
            "create_table_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_table_1": "unexpectedly None",
                        "test_create_table_2": "Lists differ: [] != ['id', 'title', 'author', 'available']"
                    }
                },
                "total_run": 2
            },
            "create_table_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_table_1": "unexpectedly None",
                        "test_create_table_2": "Lists differ: [] != ['id', 'title', 'author', 'available']"
                    }
                },
                "total_run": 2
            },
            "create_table_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_table_1": "unexpectedly None",
                        "test_create_table_2": "Lists differ: [] != ['id', 'title', 'author', 'available']"
                    }
                },
                "total_run": 2
            },
            "create_table_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_table_1": "unexpectedly None",
                        "test_create_table_2": "Lists differ: [] != ['id', 'title', 'author', 'available']"
                    }
                },
                "total_run": 2
            }
        },
        "remove_book": {
            "remove_book_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_remove_book": "no such table: book"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "remove_book_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_book": "(1, 'Book to Remove', 'John Doe', 1) is not None"
                    }
                },
                "total_run": 1
            },
            "remove_book_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "remove_book_3": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_remove_book": "no such column: book_id"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "remove_book_4": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_remove_book": "no such table: book_table"
                    }
                },
                "failures": {},
                "total_run": 1
            }
        },
        "return_book": {
            "return_book_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_return_book": "no such column: borrowed"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "return_book_1": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_return_book": "no such column: borrowed"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "return_book_2": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_return_book": "no such column: is_returned"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "return_book_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_return_book": "0 != 1"
                    }
                },
                "total_run": 1
            },
            "return_book_4": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_return_book": "no such table: book"
                    }
                },
                "failures": {},
                "total_run": 1
            }
        },
        "search_books": {
            "search_books_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_search_books": "no such table: book"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "search_books_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_search_books": "name 'book_information' is not defined"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "search_books_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "search_books_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "search_books_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            }
        }
    },
    "ClassEval_15": {
        "bad_character_heuristic": {
            "bad_character_heuristic_0": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "bad_character_heuristic_1": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "bad_character_heuristic_2": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "bad_character_heuristic_3": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "bad_character_heuristic_4": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            }
        },
        "match_in_pattern": {
            "match_in_pattern_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "match_in_pattern_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "match_in_pattern_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "match_in_pattern_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "match_in_pattern_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "mismatch_in_text": {
            "mismatch_in_text_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_mismatch_in_text": "0 != -1",
                        "test_mismatch_in_text_2": "-1 != 2",
                        "test_mismatch_in_text_3": "-1 != 2",
                        "test_mismatch_in_text_4": "0 != -1",
                        "test_mismatch_in_text_5": "-1 != 5"
                    }
                },
                "total_run": 5
            },
            "mismatch_in_text_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_mismatch_in_text_3": "1 != 2"
                    }
                },
                "total_run": 5
            },
            "mismatch_in_text_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_mismatch_in_text": "0 != -1",
                        "test_mismatch_in_text_2": "-1 != 2",
                        "test_mismatch_in_text_3": "-1 != 2",
                        "test_mismatch_in_text_4": "0 != -1",
                        "test_mismatch_in_text_5": "-1 != 5"
                    }
                },
                "total_run": 5
            },
            "mismatch_in_text_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_mismatch_in_text": "0 != -1",
                        "test_mismatch_in_text_2": "-1 != 2",
                        "test_mismatch_in_text_3": "-1 != 2",
                        "test_mismatch_in_text_4": "0 != -1",
                        "test_mismatch_in_text_5": "-1 != 5"
                    }
                },
                "total_run": 5
            },
            "mismatch_in_text_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_mismatch_in_text": "0 != -1",
                        "test_mismatch_in_text_2": "-1 != 2",
                        "test_mismatch_in_text_3": "-1 != 2",
                        "test_mismatch_in_text_4": "0 != -1",
                        "test_mismatch_in_text_5": "-1 != 5"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_16": {
        "apply_operator": {
            "apply_operator_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "apply_operator_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "apply_operator_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "apply_operator_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "apply_operator_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "calculate": {
            "calculate_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 8
            },
            "calculate_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 8
            },
            "calculate_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 8
            },
            "calculate_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 8
            },
            "calculate_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_calculate_7": "list index out of range"
                    },
                    "TypeError": {
                        "test_calculate_2": "can't multiply sequence by non-int of type 'str'",
                        "test_calculate_3": "can't multiply sequence by non-int of type 'str'",
                        "test_calculate_4": "unsupported operand type(s) for ** or pow(): 'str' and 'str'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_calculate_1": "'12' != 3",
                        "test_calculate_5": "'123' != 6",
                        "test_calculate_6": "'123' != 6",
                        "test_calculate_8": "'12' != 3"
                    }
                },
                "total_run": 8
            }
        },
        "precedence": {
            "precedence_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "precedence_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "precedence_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "precedence_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "precedence_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_17": {
        "add_event": {
            "add_event_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_event_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_event_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_event_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_event_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_available_slots": {
            "get_available_slots_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_available_slots_2": "1 != 23",
                        "test_get_available_slots_3": "1 != 24",
                        "test_get_available_slots_4": "1 != 24",
                        "test_get_available_slots_5": "1 != 24"
                    }
                },
                "total_run": 5
            },
            "get_available_slots_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_available_slots": "Lists differ: ['9:00 AM', '10:00 AM', '11:00 AM', '2:00 PM', '3:00 PM'] != [(datetime.datetime(2023, 1, 1, 23, 0), datetime.datetime(2023, 1, 2, 0, 0))]",
                        "test_get_available_slots_2": "5 != 23",
                        "test_get_available_slots_3": "5 != 24",
                        "test_get_available_slots_4": "5 != 24",
                        "test_get_available_slots_5": "5 != 24"
                    }
                },
                "total_run": 5
            },
            "get_available_slots_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_available_slots": "Lists differ: [(datetime.datetime(2023, 1, 1, 23, 0), datetime.datetime(2023, 1, 1, 23, 59))] != [(datetime.datetime(2023, 1, 1, 23, 0), datetime.datetime(2023, 1, 2, 0, 0))]",
                        "test_get_available_slots_2": "2 != 23",
                        "test_get_available_slots_3": "1 != 24",
                        "test_get_available_slots_4": "1 != 24",
                        "test_get_available_slots_5": "1 != 24"
                    }
                },
                "total_run": 5
            },
            "get_available_slots_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_available_slots_2": "1 != 23",
                        "test_get_available_slots_3": "1 != 24",
                        "test_get_available_slots_4": "1 != 24",
                        "test_get_available_slots_5": "1 != 24"
                    }
                },
                "total_run": 5
            },
            "get_available_slots_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_available_slots_2": "1 != 23",
                        "test_get_available_slots_3": "1 != 24",
                        "test_get_available_slots_4": "1 != 24",
                        "test_get_available_slots_5": "1 != 24"
                    }
                },
                "total_run": 5
            }
        },
        "get_events": {
            "get_events_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 2
            },
            "get_events_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 2
            },
            "get_events_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 2
            },
            "get_events_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 2
            },
            "get_events_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 2
            }
        },
        "get_upcoming_events": {
            "get_upcoming_events_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_upcoming_events": "'CalendarUtil' object has no attribute 'date'",
                        "test_get_upcoming_events_2": "'CalendarUtil' object has no attribute 'date'",
                        "test_get_upcoming_events_3": "'CalendarUtil' object has no attribute 'date'",
                        "test_get_upcoming_events_4": "'CalendarUtil' object has no attribute 'date'",
                        "test_get_upcoming_events_5": "'CalendarUtil' object has no attribute 'date'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_upcoming_events_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_upcoming_events_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_upcoming_events": "'CalendarUtil' object has no attribute 'date'",
                        "test_get_upcoming_events_2": "'CalendarUtil' object has no attribute 'date'",
                        "test_get_upcoming_events_3": "'CalendarUtil' object has no attribute 'date'",
                        "test_get_upcoming_events_4": "'CalendarUtil' object has no attribute 'date'",
                        "test_get_upcoming_events_5": "'CalendarUtil' object has no attribute 'date'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_upcoming_events_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_upcoming_events": "'CalendarUtil' object has no attribute 'date'",
                        "test_get_upcoming_events_2": "'CalendarUtil' object has no attribute 'date'",
                        "test_get_upcoming_events_3": "'CalendarUtil' object has no attribute 'date'",
                        "test_get_upcoming_events_4": "'CalendarUtil' object has no attribute 'date'",
                        "test_get_upcoming_events_5": "'CalendarUtil' object has no attribute 'date'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_upcoming_events_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "is_available": {
            "is_available_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_available_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_available_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_available_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_available_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "remove_event": {
            "remove_event_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_event_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_event_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_event_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_event_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_18": {
        "__delitem__": {
            "__delitem___0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__delitem___1": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_delitem_1": "\"Key 'first_name' does not exist in the dictionary.\"",
                        "test_delitem_2": "\"Key 'first_name' does not exist in the dictionary.\"",
                        "test_delitem_3": "\"Key 'first_Name' does not exist in the dictionary.\"",
                        "test_delitem_5": "\"Key 'first_name' does not exist in the dictionary.\""
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "__delitem___2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__delitem___3": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_delitem_1": "\"Key 'first_name' does not exist in the dictionary.\"",
                        "test_delitem_2": "\"Key 'first_name' does not exist in the dictionary.\"",
                        "test_delitem_3": "\"Key 'first_Name' does not exist in the dictionary.\"",
                        "test_delitem_5": "\"Key 'first_name' does not exist in the dictionary.\""
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "__delitem___4": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_delitem_1": "\"Key 'first_name' does not exist in the dictionary.\"",
                        "test_delitem_2": "\"Key 'first_name' does not exist in the dictionary.\"",
                        "test_delitem_3": "\"Key 'first_Name' does not exist in the dictionary.\"",
                        "test_delitem_5": "\"Key 'first_name' does not exist in the dictionary.\""
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "__getitem__": {
            "__getitem___0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__getitem___1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__getitem___2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__getitem___3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__getitem___4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "__iter__": {
            "__iter___0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__iter___1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__iter___2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__iter___3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__iter___4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "__len__": {
            "__len___0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__len___1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__len___2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__len___3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__len___4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "__setitem__": {
            "__setitem___0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__setitem___1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__setitem___2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__setitem___3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__setitem___4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "_convert_key": {
            "_convert_key_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_key_6": "'int' object has no attribute 'split'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "_convert_key_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_key_6": "'int' object has no attribute 'split'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "_convert_key_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_key_6": "'int' object has no attribute 'split'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "_convert_key_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_key_1": "'CamelCaseMap' object has no attribute '_convert_key'",
                        "test_convert_key_2": "'CamelCaseMap' object has no attribute '_convert_key'",
                        "test_convert_key_3": "'CamelCaseMap' object has no attribute '_convert_key'",
                        "test_convert_key_4": "'CamelCaseMap' object has no attribute '_convert_key'",
                        "test_convert_key_5": "'CamelCaseMap' object has no attribute '_convert_key'",
                        "test_convert_key_6": "'CamelCaseMap' object has no attribute '_convert_key'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "_convert_key_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_key_6": "'int' object has no attribute 'split'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "_to_camel_case": {
            "_to_camel_case_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_to_camel_case_1": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_2": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_3": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_4": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_5": "_to_camel_case() missing 1 required positional argument: 'key'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "_to_camel_case_1": {
                "compilation": "unexpected unindent (ClassEval_18__to_camel_case_1.py, line 28)",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "_to_camel_case_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_to_camel_case_1": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_2": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_3": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_4": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_5": "_to_camel_case() missing 1 required positional argument: 'key'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "_to_camel_case_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_to_camel_case_1": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_2": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_3": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_4": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_5": "_to_camel_case() missing 1 required positional argument: 'key'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "_to_camel_case_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_19": {
        "generate_primes": {
            "generate_primes_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_primes_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_primes_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_primes_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_primes_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_primes": {
            "get_primes_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_primes_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_primes_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_primes_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_primes_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_2": {
        "_convert_type": {
            "_convert_type_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_convert_type_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_convert_type_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_convert_type_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_convert_type_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "add_argument": {
            "add_argument_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_argument_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_argument_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_argument_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_argument": "Items in the first set but not the second:",
                        "test_add_argument_2": "Items in the first set but not the second:",
                        "test_add_argument_3": "Items in the first set but not the second:",
                        "test_add_argument_4": "Items in the first set but not the second:",
                        "test_add_argument_5": "Items in the first set but not the second:"
                    }
                },
                "total_run": 5
            },
            "add_argument_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_argument": "Items in the first set but not the second:",
                        "test_add_argument_2": "Items in the first set but not the second:",
                        "test_add_argument_3": "Items in the first set but not the second:",
                        "test_add_argument_4": "Items in the first set but not the second:",
                        "test_add_argument_5": "Items in the first set but not the second:"
                    }
                },
                "total_run": 5
            }
        },
        "get_argument": {
            "get_argument_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_argument_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_argument_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_argument_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_argument_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "parse_arguments": {
            "parse_arguments_0": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_parse_arguments_1": "list index out of range",
                        "test_parse_arguments_2": "list index out of range",
                        "test_parse_arguments_3": "list index out of range",
                        "test_parse_arguments_4": "list index out of range",
                        "test_parse_arguments_5": "list index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "parse_arguments_1": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_parse_arguments_2": "list index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "parse_arguments_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_arguments_1": "None != 'John'",
                        "test_parse_arguments_2": "None != True"
                    }
                },
                "total_run": 5
            },
            "parse_arguments_3": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_parse_arguments_2": "not enough values to unpack (expected 2, got 1)"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_parse_arguments_1": "False is not true",
                        "test_parse_arguments_3": "Items in the first set but not the second:",
                        "test_parse_arguments_4": "False is not true",
                        "test_parse_arguments_5": "False is not true"
                    }
                },
                "total_run": 5
            },
            "parse_arguments_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_parse_arguments_2": "list index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_20": {
        "add_user": {
            "add_user_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_user_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_user_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_user_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_user_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_messages": {
            "get_messages_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_messages_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_messages_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_messages_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_messages_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "remove_user": {
            "remove_user_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_user_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_user_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_user_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_user_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "send_message": {
            "send_message_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_send_message": "{'John': [], 'Mary': []} != {'John': [{'sender': 'John', 'receiver': 'Mary', 'm[156 chars]7'}]}"
                    }
                },
                "total_run": 5
            },
            "send_message_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_send_message": "{'John': [], 'Mary': []} != {'John': [{'sender': 'John', 'receiver': 'Mary', 'm[156 chars]7'}]}"
                    }
                },
                "total_run": 5
            },
            "send_message_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_send_message": "{'John': [], 'Mary': []} != {'John': [{'sender': 'John', 'receiver': 'Mary', 'm[156 chars]7'}]}"
                    }
                },
                "total_run": 5
            },
            "send_message_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_send_message": "{'John': [], 'Mary': []} != {'John': [{'sender': 'John', 'receiver': 'Mary', 'm[156 chars]7'}]}"
                    }
                },
                "total_run": 5
            },
            "send_message_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_send_message": "{'John': [], 'Mary': []} != {'John': [{'sender': 'John', 'receiver': 'Mary', 'm[156 chars]7'}]}"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_21": {
        "add_course": {
            "add_course_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_course_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_course_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_course_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_course_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "check_course_conflict": {
            "check_course_conflict_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "check_course_conflict_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_course_conflict_3": "True is not false"
                    }
                },
                "total_run": 6
            },
            "check_course_conflict_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_course_conflict_3": "True is not false"
                    }
                },
                "total_run": 6
            },
            "check_course_conflict_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_course_conflict_3": "True is not false",
                        "test_check_course_conflict_6": "True is not false"
                    }
                },
                "total_run": 6
            },
            "check_course_conflict_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_course_conflict_6": "True is not false"
                    }
                },
                "total_run": 6
            }
        },
        "is_free_at": {
            "is_free_at_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_free_at_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_free_at_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_free_at_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_free_at_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "remove_course": {
            "remove_course_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_course_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_course_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_course_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_course_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_22": {
        "get_all_major": {
            "get_all_major_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "get_all_major_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_all_major": "Lists differ: ['Computer Science', 'Mathematics', 'Biology', 'Psychology'] != ['Computer Science']",
                        "test_get_all_major2": "Lists differ: ['Computer Science', 'Mathematics', 'Biology', 'Psychology'] != ['Computer Science', 'Mathematics']",
                        "test_get_all_major3": "Lists differ: ['Computer Science', 'Mathematics', 'Biology', 'Psychology'] != ['Computer Science', 'Mathematics', 'Physics']"
                    }
                },
                "total_run": 3
            },
            "get_all_major_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "get_all_major_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "get_all_major_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            }
        },
        "get_most_popular_class_in_major": {
            "get_most_popular_class_in_major_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_most_popular_class_in_major": "'CS301' != 'Data Structures'",
                        "test_get_most_popular_class_in_major2": "'CS301' != 'Data Structures'"
                    }
                },
                "total_run": 2
            },
            "get_most_popular_class_in_major_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_most_popular_class_in_major": "'No students registered for this major' != 'Data Structures'",
                        "test_get_most_popular_class_in_major2": "'No students registered for this major' != 'Data Structures'"
                    }
                },
                "total_run": 2
            },
            "get_most_popular_class_in_major_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_most_popular_class_in_major": "'CS301' != 'Data Structures'",
                        "test_get_most_popular_class_in_major2": "'CS301' != 'Data Structures'"
                    }
                },
                "total_run": 2
            },
            "get_most_popular_class_in_major_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_most_popular_class_in_major": "'CS301' != 'Data Structures'",
                        "test_get_most_popular_class_in_major2": "'CS301' != 'Data Structures'"
                    }
                },
                "total_run": 2
            },
            "get_most_popular_class_in_major_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_most_popular_class_in_major": "'CS301' != 'Data Structures'",
                        "test_get_most_popular_class_in_major2": "'CS301' != 'Data Structures'"
                    }
                },
                "total_run": 2
            }
        },
        "get_students_by_major": {
            "get_students_by_major_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 4
            },
            "get_students_by_major_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 4
            },
            "get_students_by_major_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 4
            },
            "get_students_by_major_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 4
            },
            "get_students_by_major_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 4
            }
        },
        "register_class": {
            "register_class_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "register_class_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "register_class_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "register_class_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "register_class_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            }
        },
        "register_student": {
            "register_student_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "register_student_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "register_student_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "register_student_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "register_student_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            }
        }
    },
    "ClassEval_23": {
        "_select": {
            "_select_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_select_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_select_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_select_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_select_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "count": {
            "count_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "count_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "count_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "count_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "count_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "count_all": {
            "count_all_0": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "count_all_1": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "count_all_2": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "count_all_3": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "count_all_4": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            }
        },
        "select": {
            "select_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "select_all": {
            "select_all_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_all_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_all_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_all_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_select_all": "Lists differ: [[], ['A']] != [['A']]",
                        "test_select_all_2": "Lists differ: [[], ['B'], ['A'], ['A', 'B']] != [['A'], ['B'], ['A', 'B']]",
                        "test_select_all_3": "Lists differ: [[], ['C'], ['B'], ['B', 'C'], ['A'], ['A', 'C'], ['A', 'B'], ['A', 'B', 'C']] != [['A'], ['B'], ['C'], ['A', 'B'], ['A', 'C'], ['B', 'C'], ['A', 'B', 'C']]",
                        "test_select_all_4": "Lists differ: [[]] != []",
                        "test_select_all_5": "Lists differ: [[], ['B']] != [['B']]"
                    }
                },
                "total_run": 5
            },
            "select_all_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_select_all": "Lists differ: [[]] != [['A']]",
                        "test_select_all_2": "Lists differ: [[]] != [['A'], ['B'], ['A', 'B']]",
                        "test_select_all_3": "Lists differ: [[]] != [['A'], ['B'], ['C'], ['A', 'B'], ['A', 'C'], ['B', 'C'], ['A', 'B', 'C']]",
                        "test_select_all_4": "Lists differ: [[]] != []",
                        "test_select_all_5": "Lists differ: [[]] != [['B']]"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_24": {
        "add": {
            "add_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'c2'",
                        "test_add_2": "add() missing 1 required positional argument: 'c2'",
                        "test_add_3": "add() missing 1 required positional argument: 'c2'",
                        "test_add_4": "add() missing 1 required positional argument: 'c2'",
                        "test_add_5": "add() missing 1 required positional argument: 'c2'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'c2'",
                        "test_add_2": "add() missing 1 required positional argument: 'c2'",
                        "test_add_3": "add() missing 1 required positional argument: 'c2'",
                        "test_add_4": "add() missing 1 required positional argument: 'c2'",
                        "test_add_5": "add() missing 1 required positional argument: 'c2'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'c2'",
                        "test_add_2": "add() missing 1 required positional argument: 'c2'",
                        "test_add_3": "add() missing 1 required positional argument: 'c2'",
                        "test_add_4": "add() missing 1 required positional argument: 'c2'",
                        "test_add_5": "add() missing 1 required positional argument: 'c2'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "divide": {
            "divide_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "divide_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "divide_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "divide_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "divide_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "multiply": {
            "multiply_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "multiply_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "multiply_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "multiply_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "multiply_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "subtract": {
            "subtract_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "subtract_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "subtract_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "subtract_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "subtract_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_25": {
        "_save_cookies": {
            "_save_cookies_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "_save_cookies_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "_save_cookies_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "_save_cookies_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "_save_cookies_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "get_cookies": {
            "get_cookies_0": {
                "compilation": "success",
                "errors": {
                    "json.decoder.JSONDecodeError": {
                        "test_get_cookies": "Expecting value: line 1 column 1 (char 0)",
                        "test_get_cookies_2": "Expecting value: line 1 column 1 (char 0)",
                        "test_get_cookies_3": "Expecting value: line 1 column 1 (char 0)",
                        "test_get_cookies_4": "Expecting value: line 1 column 1 (char 0)",
                        "test_get_cookies_5": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_cookies_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_cookies_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_cookies": "None != {'key1': 'value1', 'key2': 'value2'}",
                        "test_get_cookies_2": "None != {'key1': 'value1', 'key2': 'value2'}",
                        "test_get_cookies_3": "None != {'key1': 'value1', 'key2': 'value2'}",
                        "test_get_cookies_4": "None != {'key1': 'value1', 'key2': 'value2'}",
                        "test_get_cookies_5": "None != {'key1': 'value1', 'key2': 'value2'}"
                    }
                },
                "total_run": 5
            },
            "get_cookies_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_cookies_4": {
                "compilation": "success",
                "errors": {
                    "json.decoder.JSONDecodeError": {
                        "test_get_cookies": "Expecting value: line 1 column 1 (char 0)",
                        "test_get_cookies_2": "Expecting value: line 1 column 1 (char 0)",
                        "test_get_cookies_3": "Expecting value: line 1 column 1 (char 0)",
                        "test_get_cookies_4": "Expecting value: line 1 column 1 (char 0)",
                        "test_get_cookies_5": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "load_cookies": {
            "load_cookies_0": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_load_cookies_6": "[Errno 2] No such file or directory: ''"
                    },
                    "json.decoder.JSONDecodeError": {
                        "test_load_cookies": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_2": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_3": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_4": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_5": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "load_cookies_1": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_load_cookies_6": "[Errno 2] No such file or directory: ''"
                    },
                    "json.decoder.JSONDecodeError": {
                        "test_load_cookies": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_2": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_3": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_4": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_5": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "load_cookies_2": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_load_cookies_6": "[Errno 2] No such file or directory: ''"
                    },
                    "json.decoder.JSONDecodeError": {
                        "test_load_cookies": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_2": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_3": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_4": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_5": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "load_cookies_3": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_load_cookies_6": "[Errno 2] No such file or directory: ''"
                    },
                    "json.decoder.JSONDecodeError": {
                        "test_load_cookies": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_2": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_3": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_4": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_5": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "load_cookies_4": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_load_cookies_6": "[Errno 2] No such file or directory: ''"
                    },
                    "json.decoder.JSONDecodeError": {
                        "test_load_cookies": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_2": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_3": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_4": "Expecting value: line 1 column 1 (char 0)",
                        "test_load_cookies_5": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_26": {
        "process_csv_data": {
            "process_csv_data_0": {
                "compilation": "not enough values to unpack (expected 2, got 1)",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "process_csv_data_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "process_csv_data_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process_csv_data_1": "Lists differ: [\"['HELLO']\"] != ['HELLO']",
                        "test_process_csv_data_2": "Lists differ: [\"['YOU']\"] != ['YOU']",
                        "test_process_csv_data_3": "Lists differ: [\"['ME']\"] != ['ME']",
                        "test_process_csv_data_4": "Lists differ: [\"['LOW']\"] != ['LOW']",
                        "test_process_csv_data_5": "Lists differ: [\"['ABC']\"] != ['ABC']"
                    }
                },
                "total_run": 5
            },
            "process_csv_data_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process_csv_data_1": "Lists differ: [] != ['HELLO']",
                        "test_process_csv_data_2": "Lists differ: [] != ['YOU']",
                        "test_process_csv_data_3": "Lists differ: [] != ['ME']",
                        "test_process_csv_data_4": "Lists differ: [] != ['LOW']",
                        "test_process_csv_data_5": "Lists differ: [] != ['ABC']"
                    }
                },
                "total_run": 5
            },
            "process_csv_data_4": {
                "compilation": "not enough values to unpack (expected 2, got 1)",
                "errors": {},
                "failures": {},
                "total_run": 0
            }
        },
        "read_csv": {
            "read_csv_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_csv_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_csv_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_csv_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_csv_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "write_csv": {
            "write_csv_0": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_write_csv_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_csv_1": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_write_csv_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_csv_2": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_write_csv_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_csv_3": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_write_csv_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_write_csv_1": "1 != None",
                        "test_write_csv_2": "1 != None",
                        "test_write_csv_3": "1 != None",
                        "test_write_csv_4": "1 != None",
                        "test_write_csv_5": "1 != None"
                    }
                },
                "total_run": 6
            },
            "write_csv_4": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_write_csv_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_27": {
        "add_currency_rate": {
            "add_currency_rate_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_currency_rate_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_currency_rate_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_currency_rate_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_currency_rate_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "convert": {
            "convert_0": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_convert_2": "'USD'"
                    },
                    "TypeError": {
                        "test_convert_3": "unsupported operand type(s) for -: 'str' and 'float'",
                        "test_convert_5": "unsupported operand type(s) for -: 'str' and 'float'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_convert_1": "'Invalid currency type' != 10.0",
                        "test_convert_4": "46.72 != 46.08 within 7 places (0.6400000000000006 difference)",
                        "test_convert_6": "'Invalid currency type' is not false"
                    }
                },
                "total_run": 6
            },
            "convert_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_convert_3": "unsupported operand type(s) for -: 'NoneType' and 'float'",
                        "test_convert_4": "unsupported operand type(s) for -: 'NoneType' and 'float'",
                        "test_convert_5": "unsupported operand type(s) for -: 'NoneType' and 'float'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_convert_1": "None != 10.0",
                        "test_convert_2": "None != 64",
                        "test_convert_6": "'Invalid currency type' is not false"
                    }
                },
                "total_run": 6
            },
            "convert_2": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_convert_2": "'USD'"
                    },
                    "TypeError": {
                        "test_convert_3": "unsupported operand type(s) for -: 'str' and 'float'",
                        "test_convert_5": "unsupported operand type(s) for -: 'str' and 'float'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_convert_1": "'Invalid currency type' != 10.0",
                        "test_convert_4": "46.72 != 46.08 within 7 places (0.6400000000000006 difference)",
                        "test_convert_6": "'Invalid currency type' is not false"
                    }
                },
                "total_run": 6
            },
            "convert_3": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_convert_1": "'CNY'",
                        "test_convert_2": "'USD'",
                        "test_convert_3": "'CNY'",
                        "test_convert_5": "'CAD'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_convert_4": "46.72 != 46.08 within 7 places (0.6400000000000006 difference)",
                        "test_convert_6": "'Invalid currency type' is not false"
                    }
                },
                "total_run": 6
            },
            "convert_4": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_convert_1": "'CNY'",
                        "test_convert_2": "'USD'",
                        "test_convert_3": "'CNY'",
                        "test_convert_5": "'CAD'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_convert_4": "46.72 != 46.08 within 7 places (0.6400000000000006 difference)",
                        "test_convert_6": "'Invalid currency type' is not false"
                    }
                },
                "total_run": 6
            }
        },
        "get_supported_currencies": {
            "get_supported_currencies_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_supported_currencies_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_supported_currencies_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_supported_currencies_1": "None != ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']",
                        "test_get_supported_currencies_2": "None != ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']",
                        "test_get_supported_currencies_3": "None != ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']",
                        "test_get_supported_currencies_4": "None != ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']",
                        "test_get_supported_currencies_5": "None != ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']"
                    }
                },
                "total_run": 5
            },
            "get_supported_currencies_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_supported_currencies_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "update_currency_rate": {
            "update_currency_rate_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "update_currency_rate_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "update_currency_rate_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "update_currency_rate_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "update_currency_rate_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_28": {
        "create_table": {
            "create_table_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_table_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_table_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_table_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_table_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "delete_from_database": {
            "delete_from_database_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "delete_from_database_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "delete_from_database_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "delete_from_database_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "delete_from_database_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "insert_into_database": {
            "insert_into_database_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_into_database_1": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_2": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_3": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_4": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_5": "table test_table has 3 columns but 2 values were supplied"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "insert_into_database_1": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_into_database_1": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_2": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_3": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_4": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_5": "table test_table has 3 columns but 2 values were supplied"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "insert_into_database_2": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_into_database_1": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_2": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_3": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_4": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_5": "table test_table has 3 columns but 2 values were supplied"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "insert_into_database_3": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_into_database_1": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_2": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_3": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_4": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_5": "table test_table has 3 columns but 2 values were supplied"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "insert_into_database_4": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_into_database_1": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_2": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_3": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_4": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_5": "table test_table has 3 columns but 2 values were supplied"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "search_database": {
            "search_database_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_database_3": "[] is not None",
                        "test_search_database_4": "[] is not None",
                        "test_search_database_5": "[] is not None"
                    }
                },
                "total_run": 5
            },
            "search_database_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_database_3": "[] is not None",
                        "test_search_database_4": "[] is not None",
                        "test_search_database_5": "[] is not None"
                    }
                },
                "total_run": 5
            },
            "search_database_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "search_database_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_database_3": "[] is not None",
                        "test_search_database_4": "[] is not None",
                        "test_search_database_5": "[] is not None"
                    }
                },
                "total_run": 5
            },
            "search_database_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_database_3": "[] is not None",
                        "test_search_database_4": "[] is not None",
                        "test_search_database_5": "[] is not None"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_29": {
        "mean": {
            "mean_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mean_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mean_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mean_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mean_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "median": {
            "median_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "median_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "median_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "median_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "median_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "mode": {
            "mode_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mode_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mode_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mode_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mode_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_3": {
        "count": {
            "count_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "count_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "count_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_count_1": "name 'math' is not defined",
                        "test_count_2": "name 'math' is not defined",
                        "test_count_3": "name 'math' is not defined",
                        "test_count_4": "name 'math' is not defined",
                        "test_count_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "count_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_count_1": "name 'math' is not defined",
                        "test_count_2": "name 'math' is not defined",
                        "test_count_3": "name 'math' is not defined",
                        "test_count_4": "name 'math' is not defined",
                        "test_count_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "count_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_count_1": "'int' object has no attribute 'factorial'",
                        "test_count_2": "'int' object has no attribute 'factorial'",
                        "test_count_3": "'int' object has no attribute 'factorial'",
                        "test_count_4": "'int' object has no attribute 'factorial'",
                        "test_count_5": "'int' object has no attribute 'factorial'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "count_all": {
            "count_all_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_count_all_1": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_2": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_3": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_4": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_5": "type object 'ArrangementCalculator' has no attribute 'nCr'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "count_all_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_count_all_1": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_2": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_3": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_4": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_5": "type object 'ArrangementCalculator' has no attribute 'nCr'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "count_all_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_count_all_1": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_2": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_3": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_4": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_5": "type object 'ArrangementCalculator' has no attribute 'nCr'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "count_all_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_count_all_1": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_2": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_3": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_4": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_5": "type object 'ArrangementCalculator' has no attribute 'nCr'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "count_all_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_count_all_1": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_2": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_3": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_4": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_5": "type object 'ArrangementCalculator' has no attribute 'nCr'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "factorial": {
            "factorial_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_factorial_1": "name 'factorial' is not defined",
                        "test_factorial_2": "name 'factorial' is not defined",
                        "test_factorial_3": "name 'factorial' is not defined",
                        "test_factorial_4": "name 'factorial' is not defined",
                        "test_factorial_5": "name 'factorial' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "factorial_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "select": {
            "select_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_select_1": "name 'select_items' is not defined",
                        "test_select_2": "name 'select_items' is not defined",
                        "test_select_3": "name 'select_items' is not defined",
                        "test_select_4": "name 'select_items' is not defined",
                        "test_select_5": "name 'select_items' is not defined",
                        "test_select_6": "name 'select_items' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "select_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_select_1": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_2": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_3": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_4": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_5": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_6": "'ArrangementCalculator' object has no attribute 'select_items'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "select_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_select_1": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_2": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_3": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_4": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_5": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_6": "'ArrangementCalculator' object has no attribute 'select_items'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "select_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_select_1": "name 'select_items' is not defined",
                        "test_select_2": "name 'select_items' is not defined",
                        "test_select_3": "name 'select_items' is not defined",
                        "test_select_4": "name 'select_items' is not defined",
                        "test_select_5": "name 'select_items' is not defined",
                        "test_select_6": "name 'select_items' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "select_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_select_1": "name 'select_items' is not defined",
                        "test_select_2": "name 'select_items' is not defined",
                        "test_select_3": "name 'select_items' is not defined",
                        "test_select_4": "name 'select_items' is not defined",
                        "test_select_5": "name 'select_items' is not defined",
                        "test_select_6": "name 'select_items' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "select_all": {
            "select_all_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_all_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_all_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_select_all_1": "Lists differ: [[1],[15 chars]2], [2, 3], [1, 2, 3]] != [[1],[15 chars]2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1[58 chars], 1]]",
                        "test_select_all_2": "Lists differ: [[1],[15 chars]2], [2, 4], [1, 2, 4]] != [[1],[15 chars]2], [1, 4], [2, 1], [2, 4], [4, 1], [4, 2], [1[58 chars], 1]]",
                        "test_select_all_3": "Lists differ: [[1], [2], [1, 2]] != [[1], [2], [1, 2], [2, 1]]",
                        "test_select_all_4": "Lists differ: [[1], [3], [1, 3]] != [[1], [3], [1, 3], [3, 1]]"
                    }
                },
                "total_run": 5
            },
            "select_all_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_select_all_1": "Lists differ: [[1],[15 chars]2], [2, 3], [1, 2, 3]] != [[1],[15 chars]2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1[58 chars], 1]]",
                        "test_select_all_2": "Lists differ: [[1],[15 chars]2], [2, 4], [1, 2, 4]] != [[1],[15 chars]2], [1, 4], [2, 1], [2, 4], [4, 1], [4, 2], [1[58 chars], 1]]",
                        "test_select_all_3": "Lists differ: [[1], [2], [1, 2]] != [[1], [2], [1, 2], [2, 1]]",
                        "test_select_all_4": "Lists differ: [[1], [3], [1, 3]] != [[1], [3], [1, 3], [3, 1]]"
                    }
                },
                "total_run": 5
            },
            "select_all_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_select_all_1": "Lists differ: [[1],[15 chars]2], [2, 3], [1, 2, 3]] != [[1],[15 chars]2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1[58 chars], 1]]",
                        "test_select_all_2": "Lists differ: [[1],[15 chars]2], [2, 4], [1, 2, 4]] != [[1],[15 chars]2], [1, 4], [2, 1], [2, 4], [4, 1], [4, 2], [1[58 chars], 1]]",
                        "test_select_all_3": "Lists differ: [[1], [2], [1, 2]] != [[1], [2], [1, 2], [2, 1]]",
                        "test_select_all_4": "Lists differ: [[1], [3], [1, 3]] != [[1], [3], [1, 3], [3, 1]]"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_30": {
        "get_correlation": {
            "get_correlation_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_correlation_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_correlation_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_correlation_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_correlation_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_max": {
            "get_max_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_max_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_max_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_max_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_max_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_min": {
            "get_min_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_min_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_min_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_min_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_min_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_std_deviation": {
            "get_std_deviation_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_std_deviation_1": "name 'math' is not defined",
                        "test_get_std_deviation_2": "name 'math' is not defined",
                        "test_get_std_deviation_3": "name 'math' is not defined",
                        "test_get_std_deviation_4": "name 'math' is not defined",
                        "test_get_std_deviation_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_std_deviation_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_std_deviation_1": "name 'math' is not defined",
                        "test_get_std_deviation_2": "name 'math' is not defined",
                        "test_get_std_deviation_3": "name 'math' is not defined",
                        "test_get_std_deviation_4": "name 'math' is not defined",
                        "test_get_std_deviation_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_std_deviation_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_std_deviation_1": "name 'math' is not defined",
                        "test_get_std_deviation_2": "name 'math' is not defined",
                        "test_get_std_deviation_3": "name 'math' is not defined",
                        "test_get_std_deviation_4": "name 'math' is not defined",
                        "test_get_std_deviation_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_std_deviation_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_std_deviation_1": "name 'math' is not defined",
                        "test_get_std_deviation_2": "name 'math' is not defined",
                        "test_get_std_deviation_3": "name 'math' is not defined",
                        "test_get_std_deviation_4": "name 'math' is not defined",
                        "test_get_std_deviation_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_std_deviation_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_std_deviation_1": "name 'math' is not defined",
                        "test_get_std_deviation_2": "name 'math' is not defined",
                        "test_get_std_deviation_3": "name 'math' is not defined",
                        "test_get_std_deviation_4": "name 'math' is not defined",
                        "test_get_std_deviation_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "get_sum": {
            "get_sum_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_sum_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_sum_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_sum_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_sum_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_variance": {
            "get_variance_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_variance_1": "name 'statistics' is not defined",
                        "test_get_variance_2": "name 'statistics' is not defined",
                        "test_get_variance_3": "name 'statistics' is not defined",
                        "test_get_variance_4": "name 'statistics' is not defined",
                        "test_get_variance_5": "name 'statistics' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_variance_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_variance_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_variance_1": "name 'statistics' is not defined",
                        "test_get_variance_2": "name 'statistics' is not defined",
                        "test_get_variance_3": "name 'statistics' is not defined",
                        "test_get_variance_4": "name 'statistics' is not defined",
                        "test_get_variance_5": "name 'statistics' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_variance_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_variance_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_variance_1": "name 'statistics' is not defined",
                        "test_get_variance_2": "name 'statistics' is not defined",
                        "test_get_variance_3": "name 'statistics' is not defined",
                        "test_get_variance_4": "name 'statistics' is not defined",
                        "test_get_variance_5": "name 'statistics' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_31": {
        "correlation_coefficient": {
            "correlation_coefficient_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_coefficient": "name 'np' is not defined",
                        "test_correlation_coefficient_2": "name 'np' is not defined",
                        "test_correlation_coefficient_3": "name 'np' is not defined",
                        "test_correlation_coefficient_4": "name 'np' is not defined",
                        "test_correlation_coefficient_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_coefficient_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_coefficient": "name 'np' is not defined",
                        "test_correlation_coefficient_2": "name 'np' is not defined",
                        "test_correlation_coefficient_3": "name 'np' is not defined",
                        "test_correlation_coefficient_4": "name 'np' is not defined",
                        "test_correlation_coefficient_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_coefficient_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_coefficient": "name 'np' is not defined",
                        "test_correlation_coefficient_2": "name 'np' is not defined",
                        "test_correlation_coefficient_3": "name 'np' is not defined",
                        "test_correlation_coefficient_4": "name 'np' is not defined",
                        "test_correlation_coefficient_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_coefficient_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_coefficient": "name 'np' is not defined",
                        "test_correlation_coefficient_2": "name 'np' is not defined",
                        "test_correlation_coefficient_3": "name 'np' is not defined",
                        "test_correlation_coefficient_4": "name 'np' is not defined",
                        "test_correlation_coefficient_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_coefficient_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_correlation_coefficient": "correlation_coefficient() missing 1 required positional argument: 'data2'",
                        "test_correlation_coefficient_2": "correlation_coefficient() missing 1 required positional argument: 'data2'",
                        "test_correlation_coefficient_3": "correlation_coefficient() missing 1 required positional argument: 'data2'",
                        "test_correlation_coefficient_4": "correlation_coefficient() missing 1 required positional argument: 'data2'",
                        "test_correlation_coefficient_5": "correlation_coefficient() missing 1 required positional argument: 'data2'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "kurtosis": {
            "kurtosis_0": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_kurtosis_2": "float division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_kurtosis": "4.499999999999999 != -1.5000000000000002",
                        "test_kurtosis_3": "4.5 != -1.5000000000000002",
                        "test_kurtosis_4": "4.500000000000001 != -1.4999999999999996",
                        "test_kurtosis_5": "4.5 != -1.5000000000000002"
                    }
                },
                "total_run": 5
            },
            "kurtosis_1": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_kurtosis_2": "float division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_kurtosis": "4.499999999999999 != -1.5000000000000002",
                        "test_kurtosis_3": "4.5 != -1.5000000000000002",
                        "test_kurtosis_4": "4.500000000000001 != -1.4999999999999996",
                        "test_kurtosis_5": "4.5 != -1.5000000000000002"
                    }
                },
                "total_run": 5
            },
            "kurtosis_2": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_kurtosis_2": "float division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_kurtosis": "4.499999999999999 != -1.5000000000000002",
                        "test_kurtosis_3": "4.5 != -1.5000000000000002",
                        "test_kurtosis_4": "4.500000000000001 != -1.4999999999999996",
                        "test_kurtosis_5": "4.5 != -1.5000000000000002"
                    }
                },
                "total_run": 5
            },
            "kurtosis_3": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_kurtosis_2": "float division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_kurtosis": "4.499999999999999 != -1.5000000000000002",
                        "test_kurtosis_3": "4.5 != -1.5000000000000002",
                        "test_kurtosis_4": "4.500000000000001 != -1.4999999999999996",
                        "test_kurtosis_5": "4.5 != -1.5000000000000002"
                    }
                },
                "total_run": 5
            },
            "kurtosis_4": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_kurtosis_2": "float division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_kurtosis": "4.499999999999999 != -1.5000000000000002",
                        "test_kurtosis_3": "4.5 != -1.5000000000000002",
                        "test_kurtosis_4": "4.500000000000001 != -1.4999999999999996",
                        "test_kurtosis_5": "4.5 != -1.5000000000000002"
                    }
                },
                "total_run": 5
            }
        },
        "pdf": {
            "pdf_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_pdf": "name 'norm' is not defined",
                        "test_pdf_2": "name 'norm' is not defined",
                        "test_pdf_3": "name 'norm' is not defined",
                        "test_pdf_4": "name 'norm' is not defined",
                        "test_pdf_5": "name 'norm' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "pdf_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_pdf": "name 'norm' is not defined",
                        "test_pdf_2": "name 'norm' is not defined",
                        "test_pdf_3": "name 'norm' is not defined",
                        "test_pdf_4": "name 'norm' is not defined",
                        "test_pdf_5": "name 'norm' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "pdf_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "pdf_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "pdf_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_pdf": "name 'norm' is not defined",
                        "test_pdf_2": "name 'norm' is not defined",
                        "test_pdf_3": "name 'norm' is not defined",
                        "test_pdf_4": "name 'norm' is not defined",
                        "test_pdf_5": "name 'norm' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "skewness": {
            "skewness_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_skewness": "name 'np' is not defined",
                        "test_skewness_2": "name 'np' is not defined",
                        "test_skewness_3": "name 'np' is not defined",
                        "test_skewness_4": "name 'np' is not defined",
                        "test_skewness_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "skewness_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_skewness": "name 'np' is not defined",
                        "test_skewness_2": "name 'np' is not defined",
                        "test_skewness_3": "name 'np' is not defined",
                        "test_skewness_4": "name 'np' is not defined",
                        "test_skewness_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "skewness_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_skewness": "name 'np' is not defined",
                        "test_skewness_2": "name 'np' is not defined",
                        "test_skewness_3": "name 'np' is not defined",
                        "test_skewness_4": "name 'np' is not defined",
                        "test_skewness_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "skewness_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_skewness": "name 'np' is not defined",
                        "test_skewness_2": "name 'np' is not defined",
                        "test_skewness_3": "name 'np' is not defined",
                        "test_skewness_4": "name 'np' is not defined",
                        "test_skewness_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "skewness_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_skewness": "name 'np' is not defined",
                        "test_skewness_2": "name 'np' is not defined",
                        "test_skewness_3": "name 'np' is not defined",
                        "test_skewness_4": "name 'np' is not defined",
                        "test_skewness_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_32": {
        "caesar_decipher": {
            "caesar_decipher_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "caesar_decipher_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "caesar_decipher_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "caesar_decipher_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "caesar_decipher_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            }
        },
        "rail_fence_decipher": {
            "rail_fence_decipher_0": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_rail_fence_decipher": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_2": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_3": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_4": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_5": "local variable 'col' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "rail_fence_decipher_1": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_rail_fence_decipher": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_2": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_3": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_4": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_5": "local variable 'col' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "rail_fence_decipher_2": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_rail_fence_decipher": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_2": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_3": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_4": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_5": "local variable 'col' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "rail_fence_decipher_3": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_rail_fence_decipher": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_2": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_3": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_4": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_5": "local variable 'col' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "rail_fence_decipher_4": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_rail_fence_decipher": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_2": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_3": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_4": "local variable 'col' referenced before assignment",
                        "test_rail_fence_decipher_5": "local variable 'col' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "vigenere_decipher": {
            "vigenere_decipher_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_vigenere_decipher_3": "'UbWdYfA' != 'AbCdEfG'"
                    }
                },
                "total_run": 6
            },
            "vigenere_decipher_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_vigenere_decipher_3": "'UbWdYfA' != 'AbCdEfG'"
                    }
                },
                "total_run": 6
            },
            "vigenere_decipher_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_vigenere_decipher_3": "'UbWdYfA' != 'AbCdEfG'"
                    }
                },
                "total_run": 6
            },
            "vigenere_decipher_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_vigenere_decipher_3": "'UbWdYfA' != 'AbCdEfG'"
                    }
                },
                "total_run": 6
            },
            "vigenere_decipher_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_vigenere_decipher_3": "'UbWdYfA' != 'AbCdEfG'"
                    }
                },
                "total_run": 6
            }
        }
    },
    "ClassEval_33": {
        "BulkItemPromo": {
            "BulkItemPromo_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "BulkItemPromo_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_bulk_item_promo_1": "0.1 != 20.0",
                        "test_bulk_item_promo_3": "0.1 != 100.0",
                        "test_bulk_item_promo_5": "0.1 != 30.0"
                    }
                },
                "total_run": 5
            },
            "BulkItemPromo_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_bulk_item_promo_1": "22.5 != 20.0",
                        "test_bulk_item_promo_3": "102.5 != 100.0",
                        "test_bulk_item_promo_5": "32.5 != 30.0"
                    }
                },
                "total_run": 5
            },
            "BulkItemPromo_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_bulk_item_promo_1": "2.5 != 20.0",
                        "test_bulk_item_promo_3": "10.5 != 100.0",
                        "test_bulk_item_promo_5": "3.5 != 30.0"
                    }
                },
                "total_run": 5
            },
            "BulkItemPromo_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_bulk_item_promo_1": "0.1 != 20.0",
                        "test_bulk_item_promo_3": "0.1 != 100.0",
                        "test_bulk_item_promo_5": "0.1 != 30.0"
                    }
                },
                "total_run": 5
            }
        },
        "FidelityPromo": {
            "FidelityPromo_0": {
                "compilation": "success",
                "errors": {
                    "RecursionError": {
                        "test_fidelity_promo_1": "maximum recursion depth exceeded",
                        "test_fidelity_promo_2": "maximum recursion depth exceeded",
                        "test_fidelity_promo_3": "maximum recursion depth exceeded",
                        "test_fidelity_promo_4": "maximum recursion depth exceeded",
                        "test_fidelity_promo_5": "maximum recursion depth exceeded"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "FidelityPromo_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_fidelity_promo_1": "0 != 12.5"
                    }
                },
                "total_run": 5
            },
            "FidelityPromo_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_fidelity_promo_1": "0 != 12.5"
                    }
                },
                "total_run": 5
            },
            "FidelityPromo_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_fidelity_promo_1": "0 != 12.5"
                    }
                },
                "total_run": 5
            },
            "FidelityPromo_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_fidelity_promo_1": "0 != 12.5"
                    }
                },
                "total_run": 5
            }
        },
        "LargeOrderPromo": {
            "LargeOrderPromo_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_large_order_promo_1": "unhashable type: 'dict'",
                        "test_large_order_promo_2": "unhashable type: 'dict'",
                        "test_large_order_promo_3": "unhashable type: 'dict'",
                        "test_large_order_promo_4": "unhashable type: 'dict'",
                        "test_large_order_promo_5": "unhashable type: 'dict'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "LargeOrderPromo_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_large_order_promo_1": "0.07 != 7.0 within 7 places (6.93 difference)",
                        "test_large_order_promo_3": "0.07 != 70.0 within 7 places (69.93 difference)",
                        "test_large_order_promo_4": "0.07 != 700.0 within 7 places (699.93 difference)"
                    }
                },
                "total_run": 5
            },
            "LargeOrderPromo_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_large_order_promo_1": "unhashable type: 'dict'",
                        "test_large_order_promo_2": "unhashable type: 'dict'",
                        "test_large_order_promo_3": "unhashable type: 'dict'",
                        "test_large_order_promo_4": "unhashable type: 'dict'",
                        "test_large_order_promo_5": "unhashable type: 'dict'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "LargeOrderPromo_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_large_order_promo_1": "0.07 != 7.0 within 7 places (6.93 difference)",
                        "test_large_order_promo_3": "0.07 != 70.0 within 7 places (69.93 difference)",
                        "test_large_order_promo_4": "0.07 != 700.0 within 7 places (699.93 difference)"
                    }
                },
                "total_run": 5
            },
            "LargeOrderPromo_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_large_order_promo_1": "unhashable type: 'dict'",
                        "test_large_order_promo_2": "unhashable type: 'dict'",
                        "test_large_order_promo_3": "unhashable type: 'dict'",
                        "test_large_order_promo_4": "unhashable type: 'dict'",
                        "test_large_order_promo_5": "unhashable type: 'dict'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "due": {
            "due_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_due_2": "'float' object has no attribute 'customer'",
                        "test_due_3": "'float' object has no attribute 'cart'",
                        "test_due_4": "'float' object has no attribute 'cart'",
                        "test_due_5": "'float' object has no attribute 'customer'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "due_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_due_2": "'list' object has no attribute 'customer'",
                        "test_due_3": "'list' object has no attribute 'cart'",
                        "test_due_4": "'list' object has no attribute 'cart'",
                        "test_due_5": "'list' object has no attribute 'customer'"
                    },
                    "TypeError": {
                        "test_due_1": "'NoneType' object is not callable"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "due_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_due_2": "'list' object has no attribute 'customer'",
                        "test_due_3": "'list' object has no attribute 'cart'",
                        "test_due_4": "'list' object has no attribute 'cart'",
                        "test_due_5": "'list' object has no attribute 'customer'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "due_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_due_1": "'NoneType' object is not callable"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_due_2": "-2875.0 != 237.5",
                        "test_due_3": "-17550.0 != 410.0",
                        "test_due_4": "-1425.0000000000002 != 139.5"
                    }
                },
                "total_run": 5
            },
            "due_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_due_2": "'float' object has no attribute 'customer'",
                        "test_due_3": "'float' object has no attribute 'cart'",
                        "test_due_4": "'float' object has no attribute 'cart'",
                        "test_due_5": "'float' object has no attribute 'customer'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "total": {
            "total_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_total_1": "30.0 != 250.0",
                        "test_total_2": "20.0 != 150.0",
                        "test_total_3": "210.0 != 2050.0",
                        "test_total_4": "30.0 != 70.0"
                    }
                },
                "total_run": 5
            },
            "total_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_total_1": "30.0 != 250.0",
                        "test_total_2": "20.0 != 150.0",
                        "test_total_3": "210.0 != 2050.0",
                        "test_total_4": "30.0 != 70.0"
                    }
                },
                "total_run": 5
            },
            "total_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_total_1": "30.0 != 250.0",
                        "test_total_2": "20.0 != 150.0",
                        "test_total_3": "210.0 != 2050.0",
                        "test_total_4": "30.0 != 70.0"
                    }
                },
                "total_run": 5
            },
            "total_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_total_1": "30.0 != 250.0",
                        "test_total_2": "20.0 != 150.0",
                        "test_total_3": "210.0 != 2050.0",
                        "test_total_4": "30.0 != 70.0"
                    }
                },
                "total_run": 5
            },
            "total_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_total_1": "30.0 != 250.0",
                        "test_total_2": "20.0 != 150.0",
                        "test_total_3": "210.0 != 2050.0",
                        "test_total_4": "30.0 != 70.0"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_34": {
        "_get_alignment_value": {
            "_get_alignment_value_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "_get_alignment_value_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "_get_alignment_value_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "_get_alignment_value_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "_get_alignment_value_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            }
        },
        "add_heading": {
            "add_heading_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_heading_1": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_2": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_3": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_4": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_5": "'DocFileHandler' object has no attribute 'document'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_heading_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_heading_1": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_2": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_3": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_4": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_5": "'DocFileHandler' object has no attribute 'document'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_heading_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_heading_1": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_2": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_3": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_4": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_5": "'DocFileHandler' object has no attribute 'document'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_heading_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_heading_1": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_2": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_3": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_4": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_5": "'DocFileHandler' object has no attribute 'document'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_heading_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_heading_1": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_2": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_3": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_4": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_5": "'DocFileHandler' object has no attribute 'document'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "add_table": {
            "add_table_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_table_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_table_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_table_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_table_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "read_text": {
            "read_text_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_read_text_1": "'Initial content\\n' != 'Initial content'",
                        "test_read_text_2": "'111\\n' != '111'",
                        "test_read_text_3": "'aaa\\n' != 'aaa'",
                        "test_read_text_4": "'aaa\\nbbb\\n' != 'aaa\\nbbb'",
                        "test_read_text_5": "'\\n' != ''"
                    }
                },
                "total_run": 5
            },
            "read_text_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_read_text_1": "'Initial content\\n' != 'Initial content'",
                        "test_read_text_2": "'111\\n' != '111'",
                        "test_read_text_3": "'aaa\\n' != 'aaa'",
                        "test_read_text_4": "'aaa\\nbbb\\n' != 'aaa\\nbbb'",
                        "test_read_text_5": "'\\n' != ''"
                    }
                },
                "total_run": 5
            },
            "read_text_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_read_text_1": "'Initial content\\n' != 'Initial content'",
                        "test_read_text_2": "'111\\n' != '111'",
                        "test_read_text_3": "'aaa\\n' != 'aaa'",
                        "test_read_text_4": "'aaa\\nbbb\\n' != 'aaa\\nbbb'",
                        "test_read_text_5": "'\\n' != ''"
                    }
                },
                "total_run": 5
            },
            "read_text_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_read_text_1": "'Initial content\\n' != 'Initial content'",
                        "test_read_text_2": "'111\\n' != '111'",
                        "test_read_text_3": "'aaa\\n' != 'aaa'",
                        "test_read_text_4": "'aaa\\nbbb\\n' != 'aaa\\nbbb'",
                        "test_read_text_5": "'\\n' != ''"
                    }
                },
                "total_run": 5
            },
            "read_text_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_read_text_1": "'Initial content\\n' != 'Initial content'",
                        "test_read_text_2": "'111\\n' != '111'",
                        "test_read_text_3": "'aaa\\n' != 'aaa'",
                        "test_read_text_4": "'aaa\\nbbb\\n' != 'aaa\\nbbb'",
                        "test_read_text_5": "'\\n' != ''"
                    }
                },
                "total_run": 5
            }
        },
        "write_text": {
            "write_text_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_text_1": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_write_text_5": "list index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "write_text_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_text_3": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_write_text_5": "list index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_write_text_1": "'Initial content\\nNew content 1' != 'New content 1'",
                        "test_write_text_2": "'Initial content\\nNew content 2' != 'New content 2'",
                        "test_write_text_3": "'Initial content\\nNew content 3' != 'New content 3'",
                        "test_write_text_4": "'Initial content\\nNew content 4' != 'New content 4'"
                    }
                },
                "total_run": 5
            },
            "write_text_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_35": {
        "find_blank": {
            "find_blank_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "find_blank_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "find_blank_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "find_blank_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "find_blank_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_possible_moves": {
            "get_possible_moves_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_possible_moves_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_possible_moves_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_possible_moves_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_possible_moves_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_possible_moves_2": "'down' not found in ['up', 'left', 'right']",
                        "test_get_possible_moves_3": "'up' not found in ['down', 'left', 'right']",
                        "test_get_possible_moves_4": "'right' not found in ['up', 'down', 'left']",
                        "test_get_possible_moves_5": "'left' not found in ['up', 'down', 'right']"
                    }
                },
                "total_run": 5
            }
        },
        "move": {
            "move_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "move_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "move_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "move_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "move_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_move_1": "move() takes 2 positional arguments but 3 were given",
                        "test_move_2": "move() takes 2 positional arguments but 3 were given",
                        "test_move_3": "move() takes 2 positional arguments but 3 were given",
                        "test_move_4": "move() takes 2 positional arguments but 3 were given",
                        "test_move_5": "move() takes 2 positional arguments but 3 were given"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "solve": {
            "solve_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_solve_1": "name 'deque' is not defined",
                        "test_solve_2": "name 'deque' is not defined",
                        "test_solve_3": "name 'deque' is not defined",
                        "test_solve_4": "name 'deque' is not defined",
                        "test_solve_5": "name 'deque' is not defined",
                        "test_solve_6": "name 'deque' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "solve_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_solve_1": "name 'deque' is not defined",
                        "test_solve_2": "name 'deque' is not defined",
                        "test_solve_3": "name 'deque' is not defined",
                        "test_solve_4": "name 'deque' is not defined",
                        "test_solve_5": "name 'deque' is not defined",
                        "test_solve_6": "name 'deque' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "solve_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_solve_1": "name 'deque' is not defined",
                        "test_solve_2": "name 'deque' is not defined",
                        "test_solve_3": "name 'deque' is not defined",
                        "test_solve_4": "name 'deque' is not defined",
                        "test_solve_5": "name 'deque' is not defined",
                        "test_solve_6": "name 'deque' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "solve_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_solve_1": "name 'deque' is not defined",
                        "test_solve_2": "name 'deque' is not defined",
                        "test_solve_3": "name 'deque' is not defined",
                        "test_solve_4": "name 'deque' is not defined",
                        "test_solve_5": "name 'deque' is not defined",
                        "test_solve_6": "name 'deque' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "solve_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_solve_1": "name 'deque' is not defined",
                        "test_solve_2": "name 'deque' is not defined",
                        "test_solve_3": "name 'deque' is not defined",
                        "test_solve_4": "name 'deque' is not defined",
                        "test_solve_5": "name 'deque' is not defined",
                        "test_solve_6": "name 'deque' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_36": {
        "clear_inbox": {
            "clear_inbox_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_clear_inbox": "Lists differ: [{'size': 20}] != [{'size': 15}]",
                        "test_clear_inbox_2": "Lists differ: [{'size': 20}] != [{'size': 10}, {'size': 20}, {'size': 15}]",
                        "test_clear_inbox_4": "Lists differ: [{'size': 10}, {'size': 20}, {'size': 15}] != []",
                        "test_clear_inbox_5": "Lists differ: [] != [{'size': 20}, {'size': 15}]"
                    }
                },
                "total_run": 5
            },
            "clear_inbox_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_clear_inbox": "Lists differ: [{'size': 20}] != [{'size': 15}]",
                        "test_clear_inbox_2": "Lists differ: [{'size': 20}] != [{'size': 10}, {'size': 20}, {'size': 15}]",
                        "test_clear_inbox_4": "Lists differ: [{'size': 10}, {'size': 20}, {'size': 15}] != []",
                        "test_clear_inbox_5": "Lists differ: [] != [{'size': 20}, {'size': 15}]"
                    }
                },
                "total_run": 5
            },
            "clear_inbox_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_clear_inbox": "Lists differ: [{'size': 20}] != [{'size': 15}]",
                        "test_clear_inbox_2": "Lists differ: [{'size': 20}] != [{'size': 10}, {'size': 20}, {'size': 15}]",
                        "test_clear_inbox_4": "Lists differ: [{'size': 10}, {'size': 20}, {'size': 15}] != []",
                        "test_clear_inbox_5": "Lists differ: [] != [{'size': 20}, {'size': 15}]"
                    }
                },
                "total_run": 5
            },
            "clear_inbox_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_clear_inbox": "Lists differ: [{'size': 20}] != [{'size': 15}]",
                        "test_clear_inbox_2": "Lists differ: [{'size': 20}] != [{'size': 10}, {'size': 20}, {'size': 15}]",
                        "test_clear_inbox_4": "Lists differ: [{'size': 10}, {'size': 20}, {'size': 15}] != []",
                        "test_clear_inbox_5": "Lists differ: [] != [{'size': 20}, {'size': 15}]"
                    }
                },
                "total_run": 5
            },
            "clear_inbox_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_clear_inbox": "Lists differ: [{'size': 20}] != [{'size': 15}]",
                        "test_clear_inbox_2": "Lists differ: [{'size': 20}] != [{'size': 10}, {'size': 20}, {'size': 15}]",
                        "test_clear_inbox_4": "Lists differ: [{'size': 10}, {'size': 20}, {'size': 15}] != []",
                        "test_clear_inbox_5": "Lists differ: [] != [{'size': 20}, {'size': 15}]"
                    }
                },
                "total_run": 5
            }
        },
        "fetch": {
            "fetch_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_fetch": "name 'smtplib' is not defined",
                        "test_fetch_2": "name 'smtplib' is not defined",
                        "test_fetch_3": "name 'smtplib' is not defined",
                        "test_fetch_4": "name 'smtplib' is not defined",
                        "test_fetch_5": "name 'smtplib' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "fetch_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_fetch": "name 'smtplib' is not defined",
                        "test_fetch_2": "name 'smtplib' is not defined",
                        "test_fetch_3": "name 'smtplib' is not defined",
                        "test_fetch_4": "name 'smtplib' is not defined",
                        "test_fetch_5": "name 'smtplib' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "fetch_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_fetch": "name 'smtplib' is not defined",
                        "test_fetch_2": "name 'smtplib' is not defined",
                        "test_fetch_3": "name 'smtplib' is not defined",
                        "test_fetch_4": "name 'smtplib' is not defined",
                        "test_fetch_5": "name 'smtplib' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "fetch_3": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "fetch_4": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            }
        },
        "get_occupied_size": {
            "get_occupied_size_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_occupied_size_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_occupied_size_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_occupied_size_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_occupied_size_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "is_full_with_one_more_email": {
            "is_full_with_one_more_email_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_full_with_one_more_email_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_full_with_one_more_email_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_full_with_one_more_email_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_full_with_one_more_email_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "send_to": {
            "send_to_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_send_to": "name 'MIMEText' is not defined",
                        "test_send_to_2": "name 'MIMEText' is not defined",
                        "test_send_to_3": "name 'MIMEText' is not defined",
                        "test_send_to_4": "name 'MIMEText' is not defined",
                        "test_send_to_5": "name 'MIMEText' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "send_to_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_send_to": "name 'MIMEText' is not defined",
                        "test_send_to_2": "name 'MIMEText' is not defined",
                        "test_send_to_3": "name 'MIMEText' is not defined",
                        "test_send_to_4": "name 'MIMEText' is not defined",
                        "test_send_to_5": "name 'MIMEText' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "send_to_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_send_to": "name 'MIMEText' is not defined",
                        "test_send_to_2": "name 'MIMEText' is not defined",
                        "test_send_to_3": "name 'MIMEText' is not defined",
                        "test_send_to_4": "name 'MIMEText' is not defined",
                        "test_send_to_5": "name 'MIMEText' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "send_to_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_send_to": "name 'MIMEText' is not defined",
                        "test_send_to_2": "name 'MIMEText' is not defined",
                        "test_send_to_3": "name 'MIMEText' is not defined",
                        "test_send_to_4": "name 'MIMEText' is not defined",
                        "test_send_to_5": "name 'MIMEText' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "send_to_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_send_to": "name 'MIMEText' is not defined",
                        "test_send_to_2": "name 'MIMEText' is not defined",
                        "test_send_to_3": "name 'MIMEText' is not defined",
                        "test_send_to_4": "name 'MIMEText' is not defined",
                        "test_send_to_5": "name 'MIMEText' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_37": {
        "caesar_cipher": {
            "caesar_cipher_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "caesar_cipher_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "caesar_cipher_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "caesar_cipher_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "caesar_cipher_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "rail_fence_cipher": {
            "rail_fence_cipher_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_rail_fence_cipher": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_2": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_3": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_4": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_6": "unsupported operand type(s) for -: 'list' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "rail_fence_cipher_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_rail_fence_cipher": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_2": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_3": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_4": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_6": "unsupported operand type(s) for -: 'list' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "rail_fence_cipher_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "rail_fence_cipher_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "rail_fence_cipher_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_rail_fence_cipher": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_2": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_3": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_4": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_6": "unsupported operand type(s) for -: 'list' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "vigenere_cipher": {
            "vigenere_cipher_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_vigenere_cipher": "'ezu' != 'kfa'",
                        "test_vigenere_cipher_2": "'lcdpm' != 'rijvs'",
                        "test_vigenere_cipher_3": "'LjPdOdE' != 'LpPjOjE'",
                        "test_vigenere_cipher_4": "'Rcdpm, Agvjv! 123' != 'Rijvs, Uyvjn! 123'"
                    }
                },
                "total_run": 5
            },
            "vigenere_cipher_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_vigenere_cipher": "'ezu' != 'kfa'",
                        "test_vigenere_cipher_2": "'lcdpm' != 'rijvs'",
                        "test_vigenere_cipher_3": "'LjPdOdE' != 'LpPjOjE'",
                        "test_vigenere_cipher_4": "'Rcdpm, Agvjv! 123' != 'Rijvs, Uyvjn! 123'"
                    }
                },
                "total_run": 5
            },
            "vigenere_cipher_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_vigenere_cipher": "'ezu' != 'kfa'",
                        "test_vigenere_cipher_2": "'lcdpm' != 'rijvs'",
                        "test_vigenere_cipher_3": "'LjPdOdE' != 'LpPjOjE'",
                        "test_vigenere_cipher_4": "'Rcdpm, Agvjv! 123' != 'Rijvs, Uyvjn! 123'"
                    }
                },
                "total_run": 5
            },
            "vigenere_cipher_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_vigenere_cipher": "'ezu' != 'kfa'",
                        "test_vigenere_cipher_2": "'lcdpm' != 'rijvs'",
                        "test_vigenere_cipher_3": "'LjPdOdE' != 'LpPjOjE'",
                        "test_vigenere_cipher_4": "'Rcdpm, Agvjv! 123' != 'Rijvs, Uyvjn! 123'"
                    }
                },
                "total_run": 5
            },
            "vigenere_cipher_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_vigenere_cipher": "'ezu' != 'kfa'",
                        "test_vigenere_cipher_2": "'lcdpm' != 'rijvs'",
                        "test_vigenere_cipher_3": "'LjPdOdE' != 'LpPjOjE'",
                        "test_vigenere_cipher_4": "'Rcdpm, Agvjv! 123' != 'Rijvs, Uyvjn! 123'"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_38": {
        "process_excel_data": {
            "process_excel_data_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process_excel_data_1": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_2": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_3": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_4": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_5": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_6": "'list' object has no attribute 'columns'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "process_excel_data_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process_excel_data_1": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_2": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_3": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_4": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_5": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_6": "'list' object has no attribute 'columns'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "process_excel_data_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process_excel_data_1": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_2": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_3": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_4": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_5": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_6": "'list' object has no attribute 'columns'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "process_excel_data_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process_excel_data_1": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_2": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_3": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_4": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_5": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_6": "'list' object has no attribute 'columns'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "process_excel_data_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_process_excel_data_1": "name 'pd' is not defined",
                        "test_process_excel_data_2": "name 'pd' is not defined",
                        "test_process_excel_data_3": "name 'pd' is not defined",
                        "test_process_excel_data_4": "name 'pd' is not defined",
                        "test_process_excel_data_5": "name 'pd' is not defined",
                        "test_process_excel_data_6": "name 'pd' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "read_excel": {
            "read_excel_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_read_excel_1": "None != [('Name', 'Age', 'Country'), ('John', 25,[54 chars]ia')]",
                        "test_read_excel_2": "None != [('Name', 'Age'), ('John', 25), ('Alice', 30), ('Bob', 35)]",
                        "test_read_excel_3": "None != [('Name',), ('John',), ('Alice',), ('Bob',)]",
                        "test_read_excel_4": "None != [('Name', 'Country'), ('John', 'USA'), ('[35 chars]ia')]",
                        "test_read_excel_5": "None != [('Name', 'Country'), ('John', 'USA')]"
                    }
                },
                "total_run": 6
            },
            "read_excel_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_read_excel_1": "None != [('Name', 'Age', 'Country'), ('John', 25,[54 chars]ia')]",
                        "test_read_excel_2": "None != [('Name', 'Age'), ('John', 25), ('Alice', 30), ('Bob', 35)]",
                        "test_read_excel_3": "None != [('Name',), ('John',), ('Alice',), ('Bob',)]",
                        "test_read_excel_4": "None != [('Name', 'Country'), ('John', 'USA'), ('[35 chars]ia')]",
                        "test_read_excel_5": "None != [('Name', 'Country'), ('John', 'USA')]"
                    }
                },
                "total_run": 6
            },
            "read_excel_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_read_excel_1": "None != [('Name', 'Age', 'Country'), ('John', 25,[54 chars]ia')]",
                        "test_read_excel_2": "None != [('Name', 'Age'), ('John', 25), ('Alice', 30), ('Bob', 35)]",
                        "test_read_excel_3": "None != [('Name',), ('John',), ('Alice',), ('Bob',)]",
                        "test_read_excel_4": "None != [('Name', 'Country'), ('John', 'USA'), ('[35 chars]ia')]",
                        "test_read_excel_5": "None != [('Name', 'Country'), ('John', 'USA')]"
                    }
                },
                "total_run": 6
            },
            "read_excel_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_read_excel_1": "None != [('Name', 'Age', 'Country'), ('John', 25,[54 chars]ia')]",
                        "test_read_excel_2": "None != [('Name', 'Age'), ('John', 25), ('Alice', 30), ('Bob', 35)]",
                        "test_read_excel_3": "None != [('Name',), ('John',), ('Alice',), ('Bob',)]",
                        "test_read_excel_4": "None != [('Name', 'Country'), ('John', 'USA'), ('[35 chars]ia')]",
                        "test_read_excel_5": "None != [('Name', 'Country'), ('John', 'USA')]"
                    }
                },
                "total_run": 6
            },
            "read_excel_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_read_excel_1": "None != [('Name', 'Age', 'Country'), ('John', 25,[54 chars]ia')]",
                        "test_read_excel_2": "None != [('Name', 'Age'), ('John', 25), ('Alice', 30), ('Bob', 35)]",
                        "test_read_excel_3": "None != [('Name',), ('John',), ('Alice',), ('Bob',)]",
                        "test_read_excel_4": "None != [('Name', 'Country'), ('John', 'USA'), ('[35 chars]ia')]",
                        "test_read_excel_5": "None != [('Name', 'Country'), ('John', 'USA')]"
                    }
                },
                "total_run": 6
            }
        },
        "write_excel": {
            "write_excel_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_write_excel_1": "name 'pd' is not defined",
                        "test_write_excel_2": "name 'pd' is not defined",
                        "test_write_excel_3": "name 'pd' is not defined",
                        "test_write_excel_4": "name 'pd' is not defined",
                        "test_write_excel_5": "name 'pd' is not defined",
                        "test_write_excel_6": "name 'pd' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_excel_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_write_excel_1": "name 'pd' is not defined",
                        "test_write_excel_2": "name 'pd' is not defined",
                        "test_write_excel_3": "name 'pd' is not defined",
                        "test_write_excel_4": "name 'pd' is not defined",
                        "test_write_excel_5": "name 'pd' is not defined",
                        "test_write_excel_6": "name 'pd' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_excel_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_write_excel_1": "name 'pd' is not defined",
                        "test_write_excel_2": "name 'pd' is not defined",
                        "test_write_excel_3": "name 'pd' is not defined",
                        "test_write_excel_4": "name 'pd' is not defined",
                        "test_write_excel_5": "name 'pd' is not defined",
                        "test_write_excel_6": "name 'pd' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_excel_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_write_excel_1": "name 'pd' is not defined",
                        "test_write_excel_2": "name 'pd' is not defined",
                        "test_write_excel_3": "name 'pd' is not defined",
                        "test_write_excel_4": "name 'pd' is not defined",
                        "test_write_excel_5": "name 'pd' is not defined",
                        "test_write_excel_6": "name 'pd' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_excel_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_write_excel_1": "name 'pd' is not defined",
                        "test_write_excel_2": "name 'pd' is not defined",
                        "test_write_excel_3": "name 'pd' is not defined",
                        "test_write_excel_4": "name 'pd' is not defined",
                        "test_write_excel_5": "name 'pd' is not defined",
                        "test_write_excel_6": "name 'pd' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_39": {
        "_calculate": {
            "_calculate_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_method_1": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_2": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_3": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_4": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_5": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_6": "_calculate() missing 1 required positional argument: 'current_op'"
                    }
                },
                "failures": {},
                "total_run": 7
            },
            "_calculate_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_method_1": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_2": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_3": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_4": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_5": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_6": "_calculate() missing 1 required positional argument: 'current_op'"
                    }
                },
                "failures": {},
                "total_run": 7
            },
            "_calculate_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_method_1": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_2": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_3": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_4": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_5": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_6": "_calculate() missing 1 required positional argument: 'current_op'"
                    }
                },
                "failures": {},
                "total_run": 7
            },
            "_calculate_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_method_1": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_2": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_3": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_4": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_5": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_6": "_calculate() missing 1 required positional argument: 'current_op'"
                    }
                },
                "failures": {},
                "total_run": 7
            },
            "_calculate_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_method_1": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_2": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_3": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_4": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_5": "_calculate() missing 1 required positional argument: 'current_op'",
                        "test_calculate_method_6": "_calculate() missing 1 required positional argument: 'current_op'"
                    }
                },
                "failures": {},
                "total_run": 7
            }
        },
        "calculate": {
            "calculate_0": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_calculate_1": "pop from empty list",
                        "test_calculate_2": "pop from empty list",
                        "test_calculate_3": "pop from empty list",
                        "test_calculate_4": "pop from empty list",
                        "test_calculate_5": "pop from empty list"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_1": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_calculate_1": "pop from empty list",
                        "test_calculate_2": "pop from empty list",
                        "test_calculate_3": "pop from empty list",
                        "test_calculate_4": "pop from empty list",
                        "test_calculate_5": "pop from empty list"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_2": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_calculate_1": "pop from empty list",
                        "test_calculate_2": "pop from empty list",
                        "test_calculate_3": "pop from empty list",
                        "test_calculate_4": "pop from empty list",
                        "test_calculate_5": "pop from empty list"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_3": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_calculate_1": "pop from empty list",
                        "test_calculate_2": "pop from empty list",
                        "test_calculate_3": "pop from empty list",
                        "test_calculate_4": "pop from empty list",
                        "test_calculate_5": "pop from empty list"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_calculate_1": "pop from empty list",
                        "test_calculate_2": "pop from empty list",
                        "test_calculate_3": "pop from empty list",
                        "test_calculate_4": "pop from empty list",
                        "test_calculate_5": "pop from empty list"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "compare": {
            "compare_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "compare_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "compare_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "compare_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "compare_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            }
        },
        "is_operator": {
            "is_operator_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_is_operator_1": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_2": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_3": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_4": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_5": "is_operator() missing 1 required positional argument: 'c'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "is_operator_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_is_operator_1": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_2": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_3": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_4": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_5": "is_operator() missing 1 required positional argument: 'c'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "is_operator_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_is_operator_1": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_2": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_3": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_4": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_5": "is_operator() missing 1 required positional argument: 'c'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "is_operator_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_is_operator_1": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_2": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_3": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_4": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_5": "is_operator() missing 1 required positional argument: 'c'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "is_operator_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_is_operator_1": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_2": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_3": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_4": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_5": "is_operator() missing 1 required positional argument: 'c'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "prepare": {
            "prepare_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_prepare_3": "name 'is_operator' is not defined"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_prepare_1": "['2', '+', '3', '*', '4'] != deque(['2', '3', '4', '*', '+'])",
                        "test_prepare_2": "['2', '+', '3', '/', '4'] != deque(['2', '3', '4', '/', '+'])",
                        "test_prepare_4": "['1', '+', '3', '*', '4'] != deque(['1', '3', '4', '*', '+'])",
                        "test_prepare_5": "['(', '2', '+', '3', ')', '*', '4'] != deque(['2', '3', '+', '4', '*'])",
                        "test_prepare_6": "[] != deque([])"
                    }
                },
                "total_run": 6
            },
            "prepare_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_prepare_1": "['2', '+', '3', '*', '4'] != deque(['2', '3', '4', '*', '+'])",
                        "test_prepare_2": "['2', '+', '3', '/', '4'] != deque(['2', '3', '4', '/', '+'])",
                        "test_prepare_3": "['2', '-', '3', '*', '4'] != deque(['2', '3', '4', '*', '-'])",
                        "test_prepare_4": "['1', '+', '3', '*', '4'] != deque(['1', '3', '4', '*', '+'])",
                        "test_prepare_5": "['(', '2', '+', '3', ')', '*', '4'] != deque(['2', '3', '+', '4', '*'])",
                        "test_prepare_6": "[] != deque([])"
                    }
                },
                "total_run": 6
            },
            "prepare_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_prepare_5": "deque(['2', '3', ')', '4', '*', '+', '(']) != deque(['2', '3', '+', '4', '*'])"
                    }
                },
                "total_run": 6
            },
            "prepare_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_prepare_1": "'ExpressionCalculator' object has no attribute 'prepare'",
                        "test_prepare_2": "'ExpressionCalculator' object has no attribute 'prepare'",
                        "test_prepare_3": "'ExpressionCalculator' object has no attribute 'prepare'",
                        "test_prepare_4": "'ExpressionCalculator' object has no attribute 'prepare'",
                        "test_prepare_5": "'ExpressionCalculator' object has no attribute 'prepare'",
                        "test_prepare_6": "'ExpressionCalculator' object has no attribute 'prepare'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "prepare_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_prepare_1": "deque(['2', '+', '3', '*', '4']) != deque(['2', '3', '4', '*', '+'])",
                        "test_prepare_2": "deque(['2', '+', '3', '/', '4']) != deque(['2', '3', '4', '/', '+'])",
                        "test_prepare_3": "deque(['2', '-', '3', '*', '4']) != deque(['2', '3', '4', '*', '-'])",
                        "test_prepare_4": "deque(['1', '+', '3', '*', '4']) != deque(['1', '3', '4', '*', '+'])",
                        "test_prepare_5": "deque(['', '(', '2', '+', '3', ')', '*', '4']) != deque(['2', '3', '+', '4', '*'])",
                        "test_prepare_6": "deque(['']) != deque([])"
                    }
                },
                "total_run": 6
            }
        },
        "transform": {
            "transform_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_transform_1": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_2": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_3": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_4": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_5": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_6": "transform() missing 1 required positional argument: 'expression'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "transform_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_transform_1": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_2": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_3": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_4": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_5": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_6": "transform() missing 1 required positional argument: 'expression'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "transform_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_transform_1": "'234*+' != '2+3*4'",
                        "test_transform_2": "'234/+' != '2+3/4'",
                        "test_transform_3": "'234*-' != '2-3*4'",
                        "test_transform_4": "'134*+' != '1+3*4'",
                        "test_transform_5": "'2-3-4*+' != '~2+(~3)*4'",
                        "test_transform_6": "'11+' != '0-(1+1)'"
                    }
                },
                "total_run": 6
            },
            "transform_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_transform_1": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_2": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_3": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_4": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_5": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_6": "transform() missing 1 required positional argument: 'expression'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "transform_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_transform_1": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_2": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_3": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_4": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_5": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_6": "transform() missing 1 required positional argument: 'expression'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_4": {
        "add_course_score": {
            "add_course_score_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_course_score_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_course_score_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_course_score_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_course_score_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "add_student": {
            "add_student_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_student_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_student_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_student_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_student_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_all_students_with_fail_course": {
            "get_all_students_with_fail_course_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_all_students_with_fail_course": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_2": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_4": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_5": "'dict' object has no attribute 'scores'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_all_students_with_fail_course_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_all_students_with_fail_course": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_2": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_4": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_5": "'dict' object has no attribute 'scores'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_all_students_with_fail_course_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_all_students_with_fail_course": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_2": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_4": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_5": "'dict' object has no attribute 'scores'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_all_students_with_fail_course_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_all_students_with_fail_course": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_2": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_4": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_5": "'dict' object has no attribute 'scores'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_all_students_with_fail_course_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_all_students_with_fail_course": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_2": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_4": "'dict' object has no attribute 'scores'",
                        "test_get_all_students_with_fail_course_5": "'dict' object has no attribute 'scores'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "get_course_average": {
            "get_course_average_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_course_average_2": "unsupported operand type(s) for +=: 'int' and 'NoneType'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_course_average_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_course_average_2": "unsupported operand type(s) for +=: 'int' and 'NoneType'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_course_average_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_course_average_2": "unsupported operand type(s) for +=: 'int' and 'NoneType'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_course_average_3": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_get_course_average_1": "'scores'",
                        "test_get_course_average_2": "'scores'",
                        "test_get_course_average_3": "'scores'",
                        "test_get_course_average_5": "'scores'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_course_average_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_course_average_1": "None != 85.0",
                        "test_get_course_average_2": "None != 85",
                        "test_get_course_average_5": "None != 90"
                    }
                },
                "total_run": 5
            }
        },
        "get_gpa": {
            "get_gpa_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_gpa_1": "unsupported operand type(s) for +: 'int' and 'str'",
                        "test_get_gpa_3": "unsupported operand type(s) for +: 'int' and 'str'",
                        "test_get_gpa_5": "unsupported operand type(s) for +: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_gpa_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_gpa_2": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_get_gpa_1": "'grades'",
                        "test_get_gpa_3": "'grades'",
                        "test_get_gpa_5": "'grades'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_gpa_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_gpa_1": "unsupported operand type(s) for +: 'int' and 'str'",
                        "test_get_gpa_3": "unsupported operand type(s) for +: 'int' and 'str'",
                        "test_get_gpa_5": "unsupported operand type(s) for +: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_gpa_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_gpa_1": "unsupported operand type(s) for +: 'int' and 'str'",
                        "test_get_gpa_3": "unsupported operand type(s) for +: 'int' and 'str'",
                        "test_get_gpa_5": "unsupported operand type(s) for +: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "get_top_student": {
            "get_top_student_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_top_student_2": "'>' not supported between instances of 'NoneType' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_top_student_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_top_student": "'dict' object has no attribute 'name'",
                        "test_get_top_student_2": "'dict' object has no attribute 'name'",
                        "test_get_top_student_4": "'dict' object has no attribute 'name'",
                        "test_get_top_student_5": "'dict' object has no attribute 'name'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_top_student_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_top_student": "'dict' object has no attribute 'name'",
                        "test_get_top_student_2": "'dict' object has no attribute 'name'",
                        "test_get_top_student_4": "'dict' object has no attribute 'name'",
                        "test_get_top_student_5": "'dict' object has no attribute 'name'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_top_student_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_top_student_2": "'>' not supported between instances of 'NoneType' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_top_student_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_top_student": "unhashable type: 'dict'",
                        "test_get_top_student_2": "unhashable type: 'dict'",
                        "test_get_top_student_4": "unhashable type: 'dict'",
                        "test_get_top_student_5": "unhashable type: 'dict'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_40": {
        "calculate_calorie_intake": {
            "calculate_calorie_intake_0": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_calculate_calorie_intake": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_2": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_3": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_4": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_5": "local variable 'calorie_intake' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_calorie_intake_1": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_calculate_calorie_intake": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_2": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_3": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_4": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_5": "local variable 'calorie_intake' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_calorie_intake_2": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_calculate_calorie_intake": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_2": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_3": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_4": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_5": "local variable 'calorie_intake' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_calorie_intake_3": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_calculate_calorie_intake": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_2": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_3": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_4": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_5": "local variable 'calorie_intake' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_calorie_intake_4": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_calculate_calorie_intake": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_2": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_3": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_4": "local variable 'calorie_intake' referenced before assignment",
                        "test_calculate_calorie_intake_5": "local variable 'calorie_intake' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "condition_judge": {
            "condition_judge_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "condition_judge_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "condition_judge_2": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_condition_judge": "'female'",
                        "test_condition_judge_2": "'female'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "condition_judge_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "condition_judge_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_BMI": {
            "get_BMI_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_BMI_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_BMI_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_BMI_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_BMI_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_41": {
        "_check_five_in_a_row": {
            "_check_five_in_a_row_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_five_in_a_row_1": "True != False"
                    }
                },
                "total_run": 5
            },
            "_check_five_in_a_row_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_five_in_a_row_1": "True != False"
                    }
                },
                "total_run": 5
            },
            "_check_five_in_a_row_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_five_in_a_row_1": "True != False",
                        "test_check_five_in_a_row_2": "True != False"
                    }
                },
                "total_run": 5
            },
            "_check_five_in_a_row_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_five_in_a_row_1": "True != False"
                    }
                },
                "total_run": 5
            },
            "_check_five_in_a_row_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_five_in_a_row_1": "True != False",
                        "test_check_five_in_a_row_2": "True != False"
                    }
                },
                "total_run": 5
            }
        },
        "check_winner": {
            "check_winner_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "None != ' '",
                        "test_check_winner_2": "'X' != ' '"
                    }
                },
                "total_run": 5
            },
            "check_winner_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "None != 'X'",
                        "test_check_winner_2": "'X' != 'O'",
                        "test_check_winner_3": "'O' != 'X'",
                        "test_check_winner_4": "'X' != 'O'"
                    }
                },
                "total_run": 5
            },
            "check_winner_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "None != 'X'",
                        "test_check_winner_2": "'X' != 'O'",
                        "test_check_winner_3": "'O' != 'X'",
                        "test_check_winner_4": "'X' != 'O'"
                    }
                },
                "total_run": 5
            },
            "check_winner_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "None != 'X'",
                        "test_check_winner_2": "'X' != 'O'",
                        "test_check_winner_3": "'O' != 'X'",
                        "test_check_winner_4": "'X' != 'O'"
                    }
                },
                "total_run": 5
            },
            "check_winner_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "None != 'X'",
                        "test_check_winner_2": "'X' != 'O'",
                        "test_check_winner_3": "'O' != 'X'",
                        "test_check_winner_4": "'X' != 'O'"
                    }
                },
                "total_run": 5
            }
        },
        "make_move": {
            "make_move_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "make_move_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "make_move_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "make_move_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "make_move_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_42": {
        "book_room": {
            "book_room_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "book_room_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "book_room_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "book_room_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "book_room_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "check_in": {
            "check_in_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "check_in_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "check_in_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "check_in_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "check_in_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "check_out": {
            "check_out_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_out_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_out_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_out_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_out_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_available_rooms": {
            "get_available_rooms_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_available_rooms_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_available_rooms_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_available_rooms_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_available_rooms_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_43": {
        "add_employee": {
            "add_employee_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_employee_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_employee_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_employee_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_employee_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_employee": {
            "get_employee_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_employee_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_employee_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_employee_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_employee_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "list_employees": {
            "list_employees_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_list_employees": "{1: {'name': 'John', 'position': 'Manager', 'de[33 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[51 chars]000}}",
                        "test_list_employees_3": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}",
                        "test_list_employees_4": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}",
                        "test_list_employees_5": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}"
                    }
                },
                "total_run": 5
            },
            "list_employees_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_list_employees": "{1: {'name': 'John', 'position': 'Manager', 'de[33 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[51 chars]000}}",
                        "test_list_employees_3": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}",
                        "test_list_employees_4": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}",
                        "test_list_employees_5": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}"
                    }
                },
                "total_run": 5
            },
            "list_employees_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_list_employees": "{1: {'name': 'John', 'position': 'Manager', 'de[33 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[51 chars]000}}",
                        "test_list_employees_3": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}",
                        "test_list_employees_4": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}",
                        "test_list_employees_5": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}"
                    }
                },
                "total_run": 5
            },
            "list_employees_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_list_employees": "{1: {'name': 'John', 'position': 'Manager', 'de[33 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[51 chars]000}}",
                        "test_list_employees_3": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}",
                        "test_list_employees_4": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}",
                        "test_list_employees_5": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}"
                    }
                },
                "total_run": 5
            },
            "list_employees_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_list_employees": "{1: {'name': 'John', 'position': 'Manager', 'de[33 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[51 chars]000}}",
                        "test_list_employees_3": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}",
                        "test_list_employees_4": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}",
                        "test_list_employees_5": "{1: {'name': 'John', 'position': 'Manager', 'de[118 chars]000}} != {1: {'employee_ID': 1, 'name': 'John', 'positio[154 chars]000}}"
                    }
                },
                "total_run": 5
            }
        },
        "remove_employee": {
            "remove_employee_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_employee_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_employee_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_employee_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_employee_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "update_employee": {
            "update_employee_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_update_employee_6": "True != False"
                    }
                },
                "total_run": 6
            },
            "update_employee_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_update_employee": "'HRManagementSystem' object has no attribute 'save_employee'",
                        "test_update_employee_4": "'HRManagementSystem' object has no attribute 'save_employee'",
                        "test_update_employee_5": "'HRManagementSystem' object has no attribute 'save_employee'",
                        "test_update_employee_6": "'HRManagementSystem' object has no attribute 'save_employee'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "update_employee_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_update_employee": "'HRManagementSystem' object has no attribute 'save_employee'",
                        "test_update_employee_4": "'HRManagementSystem' object has no attribute 'save_employee'",
                        "test_update_employee_5": "'HRManagementSystem' object has no attribute 'save_employee'",
                        "test_update_employee_6": "'HRManagementSystem' object has no attribute 'save_employee'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "update_employee_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_update_employee": "'HRManagementSystem' object has no attribute 'save_employee'",
                        "test_update_employee_4": "'HRManagementSystem' object has no attribute 'save_employee'",
                        "test_update_employee_5": "'HRManagementSystem' object has no attribute 'save_employee'",
                        "test_update_employee_6": "'HRManagementSystem' object has no attribute 'save_employee'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "update_employee_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_update_employee": "'HRManagementSystem' object has no attribute 'save_employee'",
                        "test_update_employee_4": "'HRManagementSystem' object has no attribute 'save_employee'",
                        "test_update_employee_5": "'HRManagementSystem' object has no attribute 'save_employee'",
                        "test_update_employee_6": "'HRManagementSystem' object has no attribute 'save_employee'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_44": {
        "__format_line_feed": {
            "__format_line_feed_0": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "__format_line_feed_1": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "__format_line_feed_2": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "__format_line_feed_3": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "__format_line_feed_4": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            }
        },
        "extract_code_from_html_text": {
            "extract_code_from_html_text_0": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "extract_code_from_html_text_1": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "extract_code_from_html_text_2": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "extract_code_from_html_text_3": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "extract_code_from_html_text_4": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            }
        },
        "format_line_html_text": {
            "format_line_html_text_0": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "format_line_html_text_1": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "format_line_html_text_2": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "format_line_html_text_3": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "format_line_html_text_4": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            }
        }
    },
    "ClassEval_45": {
        "adjust_brightness": {
            "adjust_brightness_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "adjust_brightness_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "adjust_brightness_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "adjust_brightness_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "adjust_brightness_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_adjust_brightness": "False is not true",
                        "test_adjust_brightness_2": "False is not true",
                        "test_adjust_brightness_3": "False is not true"
                    }
                },
                "total_run": 5
            }
        },
        "load_image": {
            "load_image_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "load_image_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "load_image_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "load_image_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "load_image_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "resize_image": {
            "resize_image_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_resize_image": "Tuples differ: (100, 100) != (30, 15)",
                        "test_resize_image_3": "'PNG' != None",
                        "test_resize_image_5": "'PNG' != None"
                    }
                },
                "total_run": 5
            },
            "resize_image_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_resize_image": "Tuples differ: (100, 100) != (30, 15)",
                        "test_resize_image_3": "'PNG' != None",
                        "test_resize_image_5": "'PNG' != None"
                    }
                },
                "total_run": 5
            },
            "resize_image_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "resize_image_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_resize_image": "can't set attribute",
                        "test_resize_image_2": "can't set attribute",
                        "test_resize_image_3": "can't set attribute",
                        "test_resize_image_4": "can't set attribute",
                        "test_resize_image_5": "can't set attribute"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "resize_image_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "rotate_image": {
            "rotate_image_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "rotate_image_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "rotate_image_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "rotate_image_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "rotate_image_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "save_image": {
            "save_image_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "save_image_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "save_image_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "save_image_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "save_image_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_46": {
        "interpolate_1d": {
            "interpolate_1d_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_interpolate_1d": "interpolate_1d() missing 1 required positional argument: 'x_interp'",
                        "test_interpolate_1d_2": "interpolate_1d() missing 1 required positional argument: 'x_interp'",
                        "test_interpolate_1d_3": "interpolate_1d() missing 1 required positional argument: 'x_interp'",
                        "test_interpolate_1d_4": "interpolate_1d() missing 1 required positional argument: 'x_interp'",
                        "test_interpolate_1d_5": "interpolate_1d() missing 1 required positional argument: 'x_interp'",
                        "test_interpolate_1d_6": "interpolate_1d() missing 1 required positional argument: 'x_interp'",
                        "test_interpolate_1d_7": "interpolate_1d() missing 1 required positional argument: 'x_interp'"
                    }
                },
                "failures": {},
                "total_run": 7
            },
            "interpolate_1d_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_interpolate_1d": "name 'np' is not defined",
                        "test_interpolate_1d_2": "name 'np' is not defined",
                        "test_interpolate_1d_3": "name 'np' is not defined",
                        "test_interpolate_1d_4": "name 'np' is not defined",
                        "test_interpolate_1d_5": "name 'np' is not defined",
                        "test_interpolate_1d_7": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 7
            },
            "interpolate_1d_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_interpolate_1d": "name 'np' is not defined",
                        "test_interpolate_1d_2": "name 'np' is not defined",
                        "test_interpolate_1d_3": "name 'np' is not defined",
                        "test_interpolate_1d_4": "name 'np' is not defined",
                        "test_interpolate_1d_5": "name 'np' is not defined",
                        "test_interpolate_1d_7": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 7
            },
            "interpolate_1d_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_interpolate_1d": "name 'np' is not defined",
                        "test_interpolate_1d_2": "name 'np' is not defined",
                        "test_interpolate_1d_3": "name 'np' is not defined",
                        "test_interpolate_1d_4": "name 'np' is not defined",
                        "test_interpolate_1d_5": "name 'np' is not defined",
                        "test_interpolate_1d_7": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 7
            },
            "interpolate_1d_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_interpolate_1d": "interpolate_1d() missing 1 required positional argument: 'x_interp'",
                        "test_interpolate_1d_2": "interpolate_1d() missing 1 required positional argument: 'x_interp'",
                        "test_interpolate_1d_3": "interpolate_1d() missing 1 required positional argument: 'x_interp'",
                        "test_interpolate_1d_4": "interpolate_1d() missing 1 required positional argument: 'x_interp'",
                        "test_interpolate_1d_5": "interpolate_1d() missing 1 required positional argument: 'x_interp'",
                        "test_interpolate_1d_6": "interpolate_1d() missing 1 required positional argument: 'x_interp'",
                        "test_interpolate_1d_7": "interpolate_1d() missing 1 required positional argument: 'x_interp'"
                    }
                },
                "failures": {},
                "total_run": 7
            }
        },
        "interpolate_2d": {
            "interpolate_2d_0": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_interpolate_2d": "list index out of range",
                        "test_interpolate_2d_2": "list index out of range",
                        "test_interpolate_2d_3": "list index out of range",
                        "test_interpolate_2d_4": "list index out of range",
                        "test_interpolate_2d_5": "list index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "interpolate_2d_1": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_interpolate_2d": "list index out of range",
                        "test_interpolate_2d_2": "list index out of range",
                        "test_interpolate_2d_3": "list index out of range",
                        "test_interpolate_2d_4": "list index out of range",
                        "test_interpolate_2d_5": "list index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "interpolate_2d_2": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_interpolate_2d": "list index out of range",
                        "test_interpolate_2d_2": "list index out of range",
                        "test_interpolate_2d_3": "list index out of range",
                        "test_interpolate_2d_4": "list index out of range",
                        "test_interpolate_2d_5": "list index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "interpolate_2d_3": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_interpolate_2d": "list index out of range",
                        "test_interpolate_2d_2": "list index out of range",
                        "test_interpolate_2d_3": "list index out of range",
                        "test_interpolate_2d_4": "list index out of range",
                        "test_interpolate_2d_5": "list index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "interpolate_2d_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_interpolate_2d": "list index out of range",
                        "test_interpolate_2d_2": "list index out of range",
                        "test_interpolate_2d_3": "list index out of range",
                        "test_interpolate_2d_4": "list index out of range",
                        "test_interpolate_2d_5": "list index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_47": {
        "get_binary": {
            "get_binary_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_binary_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_binary_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_binary_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_binary_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_octets": {
            "get_octets_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_octets_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_octets_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_octets_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_octets_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "is_valid": {
            "is_valid_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_48": {
        "get_hostname": {
            "get_hostname_0": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "get_hostname_1": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "get_hostname_2": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "get_hostname_3": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "get_hostname_4": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            }
        },
        "is_valid_ipv4": {
            "is_valid_ipv4_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_ipv4_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_ipv4_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_ipv4_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_ipv4_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "is_valid_ipv6": {
            "is_valid_ipv6_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_ipv6_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_ipv6_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_ipv6_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_ipv6_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_49": {
        "get_job_applicants": {
            "get_job_applicants_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_job_applicants": "Lists differ: [] != [{'name': 'Tom', 'skills': ['skill1', 'skill2'], 'experience': 'experience'}]",
                        "test_get_job_applicants_2": "Lists differ: [] != [{'name': 'Tom', 'skills': ['skill1', 'skill2'], 'experience': 'experience'}]",
                        "test_get_job_applicants_3": "Lists differ: [] != [{'name': 'John', 'skills': ['skill3', 'skill4'], 'experience': 'experience'}]"
                    }
                },
                "total_run": 5
            },
            "get_job_applicants_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_job_applicants_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_job_applicants": "Lists differ: [] != [{'name': 'Tom', 'skills': ['skill1', 'skill2'], 'experience': 'experience'}]",
                        "test_get_job_applicants_2": "Lists differ: [] != [{'name': 'Tom', 'skills': ['skill1', 'skill2'], 'experience': 'experience'}]",
                        "test_get_job_applicants_3": "Lists differ: [] != [{'name': 'John', 'skills': ['skill3', 'skill4'], 'experience': 'experience'}]"
                    }
                },
                "total_run": 5
            },
            "get_job_applicants_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_job_applicants": "Lists differ: [] != [{'name': 'Tom', 'skills': ['skill1', 'skill2'], 'experience': 'experience'}]",
                        "test_get_job_applicants_2": "Lists differ: [] != [{'name': 'Tom', 'skills': ['skill1', 'skill2'], 'experience': 'experience'}]",
                        "test_get_job_applicants_3": "Lists differ: [] != [{'name': 'John', 'skills': ['skill3', 'skill4'], 'experience': 'experience'}]"
                    }
                },
                "total_run": 5
            },
            "get_job_applicants_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_job_applicants": "Lists differ: [] != [{'name': 'Tom', 'skills': ['skill1', 'skill2'], 'experience': 'experience'}]",
                        "test_get_job_applicants_2": "Lists differ: [] != [{'name': 'Tom', 'skills': ['skill1', 'skill2'], 'experience': 'experience'}]",
                        "test_get_job_applicants_3": "Lists differ: [] != [{'name': 'John', 'skills': ['skill3', 'skill4'], 'experience': 'experience'}]"
                    }
                },
                "total_run": 5
            }
        },
        "post_job": {
            "post_job_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "post_job_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "post_job_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "post_job_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "post_job_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "remove_job": {
            "remove_job_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_job_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_job_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_job_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_job_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "search_jobs": {
            "search_jobs_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_jobs": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_2": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_3": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]4']}]"
                    }
                },
                "total_run": 5
            },
            "search_jobs_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_jobs": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_2": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_3": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]4']}]"
                    }
                },
                "total_run": 5
            },
            "search_jobs_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_jobs": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_2": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_3": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]4']}]"
                    }
                },
                "total_run": 5
            },
            "search_jobs_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_jobs": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_2": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_3": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]4']}]"
                    }
                },
                "total_run": 5
            },
            "search_jobs_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_jobs": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_2": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_3": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]4']}]"
                    }
                },
                "total_run": 5
            }
        },
        "submit_resume": {
            "submit_resume_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "submit_resume_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "submit_resume_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "submit_resume_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "submit_resume_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "withdraw_resume": {
            "withdraw_resume_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_resume_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_resume_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_resume_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_resume_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_5": {
        "display": {
            "display_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_1": "None != 'Normal Guitar Playing -- Chord: C, Play Tune: 53231323'",
                        "test_display_2": "None != 'Normal Guitar Playing -- Chord: Em, Play Tune: 43231323'",
                        "test_display_3": "None != 'Normal Guitar Playing -- Chord: F, Play Tune: 43231323'",
                        "test_display_4": "None != 'Normal Guitar Playing -- Chord: G, Play Tune: 63231323'",
                        "test_display_5": "None != 'Normal Guitar Playing -- Chord: , Play Tune: '"
                    }
                },
                "total_run": 5
            },
            "display_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_1": "None != 'Normal Guitar Playing -- Chord: C, Play Tune: 53231323'",
                        "test_display_2": "None != 'Normal Guitar Playing -- Chord: Em, Play Tune: 43231323'",
                        "test_display_3": "None != 'Normal Guitar Playing -- Chord: F, Play Tune: 43231323'",
                        "test_display_4": "None != 'Normal Guitar Playing -- Chord: G, Play Tune: 63231323'",
                        "test_display_5": "None != 'Normal Guitar Playing -- Chord: , Play Tune: '"
                    }
                },
                "total_run": 5
            },
            "display_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_1": "None != 'Normal Guitar Playing -- Chord: C, Play Tune: 53231323'",
                        "test_display_2": "None != 'Normal Guitar Playing -- Chord: Em, Play Tune: 43231323'",
                        "test_display_3": "None != 'Normal Guitar Playing -- Chord: F, Play Tune: 43231323'",
                        "test_display_4": "None != 'Normal Guitar Playing -- Chord: G, Play Tune: 63231323'",
                        "test_display_5": "None != 'Normal Guitar Playing -- Chord: , Play Tune: '"
                    }
                },
                "total_run": 5
            },
            "display_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_1": "None != 'Normal Guitar Playing -- Chord: C, Play Tune: 53231323'",
                        "test_display_2": "None != 'Normal Guitar Playing -- Chord: Em, Play Tune: 43231323'",
                        "test_display_3": "None != 'Normal Guitar Playing -- Chord: F, Play Tune: 43231323'",
                        "test_display_4": "None != 'Normal Guitar Playing -- Chord: G, Play Tune: 63231323'",
                        "test_display_5": "None != 'Normal Guitar Playing -- Chord: , Play Tune: '"
                    }
                },
                "total_run": 5
            },
            "display_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_1": "None != 'Normal Guitar Playing -- Chord: C, Play Tune: 53231323'",
                        "test_display_2": "None != 'Normal Guitar Playing -- Chord: Em, Play Tune: 43231323'",
                        "test_display_3": "None != 'Normal Guitar Playing -- Chord: F, Play Tune: 43231323'",
                        "test_display_4": "None != 'Normal Guitar Playing -- Chord: G, Play Tune: 63231323'",
                        "test_display_5": "None != 'Normal Guitar Playing -- Chord: , Play Tune: '"
                    }
                },
                "total_run": 5
            }
        },
        "interpret": {
            "interpret_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_interpret_1": "Lists differ: [{'Chord': 'C5', 'Tune': '3231323'}] != [{'Chord': 'C', 'Tune': '53231323'}]",
                        "test_interpret_2": "Lists differ: [{'Chord': 'F4', 'Tune': '3231323'}] != [{'Chord': 'F', 'Tune': '43231323'}]",
                        "test_interpret_4": "Lists differ: [{'Chord': 'G6', 'Tune': '3231323'}] != [{'Chord': 'G', 'Tune': '63231323'}]",
                        "test_interpret_5": "Lists differ: [{'Chord': 'F4', 'Tune': '3231323'}, {'Chord': 'G6', 'Tune': '3231323'}] != [{'Chord': 'F', 'Tune': '43231323'}, {'Chord': 'G', 'Tune': '63231323'}]",
                        "test_interpret_6": "Lists differ: [] != [{'Chord': '', 'Tune': ''}, {'Chord': '', 'Tune': ''}]",
                        "test_interpret_7": "Lists differ: [{'Chord': 'AB', 'Tune': 'C43231323'}, {'Chord': 'DE', 'Tune': 'F63231323'}] != [{'Chord': 'ABC', 'Tune': '43231323'}, {'Chord': 'DEF', 'Tune': '63231323'}]",
                        "test_interpret_8": "Lists differ: [{'Chord': 'C5', 'Tune': '3231323'}] != [{'Chord': 'C', 'Tune': '53231323'}]",
                        "test_interpret_9": "[] is not None"
                    }
                },
                "total_run": 9
            },
            "interpret_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_interpret_1": "Lists differ: [{'Chord': 'C5', 'Tune': '3231323'}] != [{'Chord': 'C', 'Tune': '53231323'}]",
                        "test_interpret_2": "Lists differ: [{'Chord': 'F4', 'Tune': '3231323'}] != [{'Chord': 'F', 'Tune': '43231323'}]",
                        "test_interpret_4": "Lists differ: [{'Chord': 'G6', 'Tune': '3231323'}] != [{'Chord': 'G', 'Tune': '63231323'}]",
                        "test_interpret_5": "Lists differ: [{'Chord': 'F4', 'Tune': '3231323'}, {'Chord': 'G6', 'Tune': '3231323'}] != [{'Chord': 'F', 'Tune': '43231323'}, {'Chord': 'G', 'Tune': '63231323'}]",
                        "test_interpret_6": "Lists differ: [] != [{'Chord': '', 'Tune': ''}, {'Chord': '', 'Tune': ''}]",
                        "test_interpret_7": "Lists differ: [{'Chord': 'AB', 'Tune': 'C43231323'}, {'Chord': 'DE', 'Tune': 'F63231323'}] != [{'Chord': 'ABC', 'Tune': '43231323'}, {'Chord': 'DEF', 'Tune': '63231323'}]",
                        "test_interpret_8": "Lists differ: [{'Chord': 'C5', 'Tune': '3231323'}] != [{'Chord': 'C', 'Tune': '53231323'}]",
                        "test_interpret_9": "[] is not None"
                    }
                },
                "total_run": 9
            },
            "interpret_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_interpret_1": "Lists differ: [{'Chord': 'C5', 'Tune': '3231323'}] != [{'Chord': 'C', 'Tune': '53231323'}]",
                        "test_interpret_2": "Lists differ: [{'Chord': 'F4', 'Tune': '3231323'}] != [{'Chord': 'F', 'Tune': '43231323'}]",
                        "test_interpret_4": "Lists differ: [{'Chord': 'G6', 'Tune': '3231323'}] != [{'Chord': 'G', 'Tune': '63231323'}]",
                        "test_interpret_5": "Lists differ: [{'Chord': 'F4', 'Tune': '3231323'}, {'Chord': 'G6', 'Tune': '3231323'}] != [{'Chord': 'F', 'Tune': '43231323'}, {'Chord': 'G', 'Tune': '63231323'}]",
                        "test_interpret_6": "Lists differ: [] != [{'Chord': '', 'Tune': ''}, {'Chord': '', 'Tune': ''}]",
                        "test_interpret_7": "Lists differ: [{'Chord': 'AB', 'Tune': 'C43231323'}, {'Chord': 'DE', 'Tune': 'F63231323'}] != [{'Chord': 'ABC', 'Tune': '43231323'}, {'Chord': 'DEF', 'Tune': '63231323'}]",
                        "test_interpret_8": "Lists differ: [{'Chord': 'C5', 'Tune': '3231323'}] != [{'Chord': 'C', 'Tune': '53231323'}]",
                        "test_interpret_9": "[] is not None"
                    }
                },
                "total_run": 9
            },
            "interpret_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_interpret_1": "Lists differ: [{'Chord': 'C53231323', 'Tune': ''}] != [{'Chord': 'C', 'Tune': '53231323'}]",
                        "test_interpret_2": "Lists differ: [{'Chord': 'F43231323', 'Tune': ''}] != [{'Chord': 'F', 'Tune': '43231323'}]",
                        "test_interpret_3": "Lists differ: [{'Chord': 'Em43231323', 'Tune': ''}] != [{'Chord': 'Em', 'Tune': '43231323'}]",
                        "test_interpret_4": "Lists differ: [{'Chord': 'G63231323', 'Tune': ''}] != [{'Chord': 'G', 'Tune': '63231323'}]",
                        "test_interpret_5": "Lists differ: [{'Chord': 'F43231323', 'Tune': ''}, {'Chord': 'G63231323', 'Tune': ''}] != [{'Chord': 'F', 'Tune': '43231323'}, {'Chord': 'G', 'Tune': '63231323'}]",
                        "test_interpret_6": "Lists differ: [] != [{'Chord': '', 'Tune': ''}, {'Chord': '', 'Tune': ''}]",
                        "test_interpret_7": "Lists differ: [{'Chord': 'ABC43231323', 'Tune': ''}, {'Chord': 'DEF63231323', 'Tune': ''}] != [{'Chord': 'ABC', 'Tune': '43231323'}, {'Chord': 'DEF', 'Tune': '63231323'}]",
                        "test_interpret_8": "Lists differ: [{'Chord': 'C53231323', 'Tune': ''}] != [{'Chord': 'C', 'Tune': '53231323'}]",
                        "test_interpret_9": "[] is not None"
                    }
                },
                "total_run": 9
            },
            "interpret_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_interpret_1": "Lists differ: [{'Chord': 'C5', 'Tune': '3231323'}] != [{'Chord': 'C', 'Tune': '53231323'}]",
                        "test_interpret_2": "Lists differ: [{'Chord': 'F4', 'Tune': '3231323'}] != [{'Chord': 'F', 'Tune': '43231323'}]",
                        "test_interpret_4": "Lists differ: [{'Chord': 'G6', 'Tune': '3231323'}] != [{'Chord': 'G', 'Tune': '63231323'}]",
                        "test_interpret_5": "Lists differ: [{'Chord': 'F4', 'Tune': '3231323'}, {'Chord': 'G6', 'Tune': '3231323'}] != [{'Chord': 'F', 'Tune': '43231323'}, {'Chord': 'G', 'Tune': '63231323'}]",
                        "test_interpret_6": "Lists differ: [] != [{'Chord': '', 'Tune': ''}, {'Chord': '', 'Tune': ''}]",
                        "test_interpret_7": "Lists differ: [{'Chord': 'AB', 'Tune': 'C43231323'}, {'Chord': 'DE', 'Tune': 'F63231323'}] != [{'Chord': 'ABC', 'Tune': '43231323'}, {'Chord': 'DEF', 'Tune': '63231323'}]",
                        "test_interpret_8": "Lists differ: [{'Chord': 'C5', 'Tune': '3231323'}] != [{'Chord': 'C', 'Tune': '53231323'}]",
                        "test_interpret_9": "[] is not None"
                    }
                },
                "total_run": 9
            }
        }
    },
    "ClassEval_50": {
        "process_json": {
            "process_json_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_process_json_3": "argument of type 'int' is not iterable"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_json_1": {
                "compilation": "success",
                "errors": {
                    "json.decoder.JSONDecodeError": {
                        "test_process_json_3": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_json_2": {
                "compilation": "success",
                "errors": {
                    "json.decoder.JSONDecodeError": {
                        "test_process_json_3": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_json_3": {
                "compilation": "success",
                "errors": {
                    "json.decoder.JSONDecodeError": {
                        "test_process_json_3": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_json_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_process_json_3": "argument of type 'int' is not iterable"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "read_json": {
            "read_json_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_json_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_json_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_json_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_json_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "write_json": {
            "write_json_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_json_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_json_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_json_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_json_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_51": {
        "fleiss_kappa": {
            "fleiss_kappa_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_fleiss_kappa_2": "0.20782576965564814 != 0.2115748928799344",
                        "test_fleiss_kappa_3": "0.20700128597090803 != 0.21076904123090398",
                        "test_fleiss_kappa_4": "0.2058648146199446 != 0.2096583016522883",
                        "test_fleiss_kappa_5": "0.20772280296554033 != 0.21147425143148907"
                    }
                },
                "total_run": 5
            },
            "fleiss_kappa_1": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_fleiss_kappa_1": "operands could not be broadcast together with shapes (5,) (10,)",
                        "test_fleiss_kappa_2": "operands could not be broadcast together with shapes (5,) (10,)",
                        "test_fleiss_kappa_3": "operands could not be broadcast together with shapes (5,) (10,)",
                        "test_fleiss_kappa_4": "operands could not be broadcast together with shapes (5,) (10,)",
                        "test_fleiss_kappa_5": "operands could not be broadcast together with shapes (5,) (10,)"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "fleiss_kappa_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_fleiss_kappa_2": "0.20782576965564814 != 0.2115748928799344",
                        "test_fleiss_kappa_3": "0.20700128597090803 != 0.21076904123090398",
                        "test_fleiss_kappa_4": "0.2058648146199446 != 0.2096583016522883",
                        "test_fleiss_kappa_5": "0.20772280296554033 != 0.21147425143148907"
                    }
                },
                "total_run": 5
            },
            "fleiss_kappa_3": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_fleiss_kappa_1": "operands could not be broadcast together with shapes (5,) (10,)",
                        "test_fleiss_kappa_2": "operands could not be broadcast together with shapes (5,) (10,)",
                        "test_fleiss_kappa_3": "operands could not be broadcast together with shapes (5,) (10,)",
                        "test_fleiss_kappa_4": "operands could not be broadcast together with shapes (5,) (10,)",
                        "test_fleiss_kappa_5": "operands could not be broadcast together with shapes (5,) (10,)"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "fleiss_kappa_4": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_fleiss_kappa_1": "operands could not be broadcast together with shapes (5,) (10,)",
                        "test_fleiss_kappa_2": "operands could not be broadcast together with shapes (5,) (10,)",
                        "test_fleiss_kappa_3": "operands could not be broadcast together with shapes (5,) (10,)",
                        "test_fleiss_kappa_4": "operands could not be broadcast together with shapes (5,) (10,)",
                        "test_fleiss_kappa_5": "operands could not be broadcast together with shapes (5,) (10,)"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "kappa": {
            "kappa_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_kappa_1": "type object 'KappaCalculator' has no attribute 'kappa'",
                        "test_kappa_2": "type object 'KappaCalculator' has no attribute 'kappa'",
                        "test_kappa_3": "type object 'KappaCalculator' has no attribute 'kappa'",
                        "test_kappa_4": "type object 'KappaCalculator' has no attribute 'kappa'",
                        "test_kappa_5": "type object 'KappaCalculator' has no attribute 'kappa'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "kappa_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_kappa_1": "type object 'KappaCalculator' has no attribute 'kappa'",
                        "test_kappa_2": "type object 'KappaCalculator' has no attribute 'kappa'",
                        "test_kappa_3": "type object 'KappaCalculator' has no attribute 'kappa'",
                        "test_kappa_4": "type object 'KappaCalculator' has no attribute 'kappa'",
                        "test_kappa_5": "type object 'KappaCalculator' has no attribute 'kappa'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "kappa_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "kappa_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "kappa_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_52": {
        "get_pos_tag": {
            "get_pos_tag_0": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "get_pos_tag_1": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "get_pos_tag_2": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "get_pos_tag_3": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "get_pos_tag_4": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            }
        },
        "lemmatize_sentence": {
            "lemmatize_sentence_0": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "lemmatize_sentence_1": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "lemmatize_sentence_2": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "lemmatize_sentence_3": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "lemmatize_sentence_4": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            }
        },
        "remove_punctuation": {
            "remove_punctuation_0": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "remove_punctuation_1": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "remove_punctuation_2": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "remove_punctuation_3": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "remove_punctuation_4": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            }
        }
    },
    "ClassEval_53": {
        "add_word": {
            "add_word_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_word_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_word_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_word_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_word_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "find_longest_word": {
            "find_longest_word_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_find_longest_word_4": "'apple' != ''",
                        "test_find_longest_word_5": "'apple' != 'red'"
                    }
                },
                "total_run": 5
            },
            "find_longest_word_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_find_longest_word_4": "'apple' != ''",
                        "test_find_longest_word_5": "'apple' != 'red'"
                    }
                },
                "total_run": 5
            },
            "find_longest_word_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_find_longest_word_4": "'apple' != ''",
                        "test_find_longest_word_5": "'apple' != 'red'"
                    }
                },
                "total_run": 5
            },
            "find_longest_word_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_find_longest_word_4": "'apple' != ''",
                        "test_find_longest_word_5": "'apple' != 'red'"
                    }
                },
                "total_run": 5
            },
            "find_longest_word_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_find_longest_word_4": "'apple' != ''",
                        "test_find_longest_word_5": "'apple' != 'red'"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_54": {
        "create_board": {
            "create_board_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_board_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_board_1": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_2": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_3": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_4": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_5": "['a', 'b', 'c'] not found in ['a', 'b', 'c']"
                    }
                },
                "total_run": 5
            },
            "create_board_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_board_1": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_2": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_3": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_4": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_5": "['a', 'b', 'c'] not found in ['a', 'b', 'c']"
                    }
                },
                "total_run": 5
            },
            "create_board_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_board_1": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_2": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_3": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_4": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_5": "['a', 'b', 'c'] not found in ['a', 'b', 'c']"
                    }
                },
                "total_run": 5
            },
            "create_board_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_board_1": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_2": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_3": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_4": "['a', 'b', 'c'] not found in ['a', 'b', 'c']",
                        "test_create_board_5": "['a', 'b', 'c'] not found in ['a', 'b', 'c']"
                    }
                },
                "total_run": 5
            }
        },
        "has_path": {
            "has_path_0": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_has_path_5": "list index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_has_path_4": "True != False"
                    }
                },
                "total_run": 6
            },
            "has_path_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_has_path_1": "False != True",
                        "test_has_path_2": "False != True",
                        "test_has_path_3": "False != True",
                        "test_has_path_6": "False != True"
                    }
                },
                "total_run": 6
            },
            "has_path_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "has_path_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_has_path_4": "True != False"
                    }
                },
                "total_run": 6
            },
            "has_path_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_has_path_1": "'MahjongConnect' object has no attribute 'is_valid_position'",
                        "test_has_path_2": "'MahjongConnect' object has no attribute 'is_valid_position'",
                        "test_has_path_3": "'MahjongConnect' object has no attribute 'is_valid_position'",
                        "test_has_path_4": "'MahjongConnect' object has no attribute 'is_valid_position'",
                        "test_has_path_5": "'MahjongConnect' object has no attribute 'is_valid_position'",
                        "test_has_path_6": "'MahjongConnect' object has no attribute 'is_valid_position'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "is_game_over": {
            "is_game_over_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_game_over_1": "False != True"
                    }
                },
                "total_run": 5
            },
            "is_game_over_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_game_over_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_game_over_1": "False != True"
                    }
                },
                "total_run": 5
            },
            "is_game_over_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_game_over_1": "False != True"
                    }
                },
                "total_run": 5
            },
            "is_game_over_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_game_over_1": "False != True"
                    }
                },
                "total_run": 5
            }
        },
        "is_valid_move": {
            "is_valid_move_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "is_valid_move_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "is_valid_move_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "is_valid_move_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "is_valid_move_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "remove_icons": {
            "remove_icons_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_icons_1": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [[' ', 'b', 'c', 'a'], [' ', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_2": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], [' ', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_3": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', ' ', 'c', 'a'], ['a', ' ', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_4": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_5": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'][40 chars]' ']]"
                    }
                },
                "total_run": 5
            },
            "remove_icons_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_icons_1": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [[' ', 'b', 'c', 'a'], [' ', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_2": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], [' ', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_3": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', ' ', 'c', 'a'], ['a', ' ', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_4": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_5": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'][40 chars]' ']]"
                    }
                },
                "total_run": 5
            },
            "remove_icons_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_icons_1": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [[' ', 'b', 'c', 'a'], [' ', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_2": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], [' ', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_3": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', ' ', 'c', 'a'], ['a', ' ', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_4": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_5": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'][40 chars]' ']]"
                    }
                },
                "total_run": 5
            },
            "remove_icons_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_icons_1": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [[' ', 'b', 'c', 'a'], [' ', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_2": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], [' ', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_3": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', ' ', 'c', 'a'], ['a', ' ', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_4": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_5": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'][40 chars]' ']]"
                    }
                },
                "total_run": 5
            },
            "remove_icons_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_icons_1": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [[' ', 'b', 'c', 'a'], [' ', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_2": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], [' ', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_3": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', ' ', 'c', 'a'], ['a', ' ', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_4": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'][40 chars]'a']]",
                        "test_remove_icons_5": "Lists differ: [[None, None, None, None], [None, None, Non[56 chars]one]] != [['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a'][40 chars]' ']]"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_55": {
        "palindromic_length": {
            "palindromic_length_0": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_length_4": "string index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_palindromic_length": "0 != 2",
                        "test_palindromic_length_2": "0 != 2",
                        "test_palindromic_length_5": "0 != 4"
                    }
                },
                "total_run": 5
            },
            "palindromic_length_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_palindromic_length": "palindromic_length() takes 3 positional arguments but 4 were given",
                        "test_palindromic_length_2": "palindromic_length() takes 3 positional arguments but 4 were given",
                        "test_palindromic_length_3": "palindromic_length() takes 3 positional arguments but 4 were given",
                        "test_palindromic_length_4": "palindromic_length() takes 3 positional arguments but 4 were given",
                        "test_palindromic_length_5": "palindromic_length() takes 3 positional arguments but 4 were given"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "palindromic_length_2": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_length_4": "string index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_palindromic_length": "0 != 2",
                        "test_palindromic_length_2": "0 != 2",
                        "test_palindromic_length_5": "0 != 4"
                    }
                },
                "total_run": 5
            },
            "palindromic_length_3": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_length_4": "string index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_palindromic_length": "0 != 2",
                        "test_palindromic_length_2": "0 != 2",
                        "test_palindromic_length_5": "0 != 4"
                    }
                },
                "total_run": 5
            },
            "palindromic_length_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_length_4": "string index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_palindromic_length": "0 != 2",
                        "test_palindromic_length_2": "0 != 2",
                        "test_palindromic_length_5": "0 != 4"
                    }
                },
                "total_run": 5
            }
        },
        "palindromic_string": {
            "palindromic_string_0": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_string": "string index out of range",
                        "test_palindromic_string_2": "string index out of range",
                        "test_palindromic_string_3": "string index out of range",
                        "test_palindromic_string_4": "string index out of range",
                        "test_palindromic_string_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "palindromic_string_1": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_string": "string index out of range",
                        "test_palindromic_string_2": "string index out of range",
                        "test_palindromic_string_3": "string index out of range",
                        "test_palindromic_string_4": "string index out of range",
                        "test_palindromic_string_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "palindromic_string_2": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_string": "string index out of range",
                        "test_palindromic_string_2": "string index out of range",
                        "test_palindromic_string_3": "string index out of range",
                        "test_palindromic_string_4": "string index out of range",
                        "test_palindromic_string_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "palindromic_string_3": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_string": "string index out of range",
                        "test_palindromic_string_2": "string index out of range",
                        "test_palindromic_string_3": "string index out of range",
                        "test_palindromic_string_4": "string index out of range",
                        "test_palindromic_string_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "palindromic_string_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_string": "string index out of range",
                        "test_palindromic_string_2": "string index out of range",
                        "test_palindromic_string_3": "string index out of range",
                        "test_palindromic_string_4": "string index out of range",
                        "test_palindromic_string_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_56": {
        "accuracy": {
            "accuracy_0": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_accuracy_6": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_accuracy_2": "0.25 != 0.3333333333333333 within 7 places (0.08333333333333331 difference)"
                    }
                },
                "total_run": 6
            },
            "accuracy_1": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_accuracy_6": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_accuracy_2": "0.25 != 0.3333333333333333 within 7 places (0.08333333333333331 difference)"
                    }
                },
                "total_run": 6
            },
            "accuracy_2": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_accuracy_6": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_accuracy_2": "0.25 != 0.3333333333333333 within 7 places (0.08333333333333331 difference)"
                    }
                },
                "total_run": 6
            },
            "accuracy_3": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_accuracy_6": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_accuracy_2": "0.25 != 0.3333333333333333 within 7 places (0.08333333333333331 difference)"
                    }
                },
                "total_run": 6
            },
            "accuracy_4": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_accuracy_6": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_accuracy_2": "0.25 != 0.3333333333333333 within 7 places (0.08333333333333331 difference)"
                    }
                },
                "total_run": 6
            }
        },
        "f1_score": {
            "f1_score_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "f1_score_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "f1_score_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "f1_score_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "f1_score_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "precision": {
            "precision_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "precision_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "precision_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "precision_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "precision_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "recall": {
            "recall_0": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_recall_6": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "recall_1": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_recall_6": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "recall_2": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_recall_6": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "recall_3": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_recall_6": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "recall_4": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_recall_6": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "update": {
            "update_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "update_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "update_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_update_1": "Tuples differ: (4, 4, 4, 4) != (1, 1, 1, 1)",
                        "test_update_2": "Tuples differ: (6, 6, 2, 2) != (1, 2, 1, 0)",
                        "test_update_3": "Tuples differ: (6, 6, 2, 2) != (2, 1, 0, 1)",
                        "test_update_4": "Tuples differ: (6, 2, 6, 2) != (2, 0, 1, 1)",
                        "test_update_5": "Tuples differ: (6, 2, 6, 2) != (1, 1, 2, 0)"
                    }
                },
                "total_run": 5
            },
            "update_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "update_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_57": {
        "map": {
            "map_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_map_1": "name 'compute_precision' is not defined",
                        "test_map_2": "name 'compute_precision' is not defined",
                        "test_map_3": "name 'compute_precision' is not defined",
                        "test_map_4": "name 'compute_precision' is not defined",
                        "test_map_5": "name 'compute_precision' is not defined",
                        "test_map_8": "name 'compute_precision' is not defined"
                    },
                    "TypeError": {
                        "test_map_7": "cannot unpack non-iterable numpy.float64 object"
                    }
                },
                "failures": {},
                "total_run": 8
            },
            "map_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_map_1": "cannot unpack non-iterable float object",
                        "test_map_2": "cannot unpack non-iterable float object"
                    },
                    "ZeroDivisionError": {
                        "test_map_7": "division by zero",
                        "test_map_8": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_map_3": "0.25 != 0.3333333333333333",
                        "test_map_4": "0.3125 != 0.40625",
                        "test_map_5": "0.3125 != 0.3645833333333333"
                    }
                },
                "total_run": 8
            },
            "map_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_map_1": "type object 'MetricsCalculator2' has no attribute 'compute_precision'",
                        "test_map_2": "type object 'MetricsCalculator2' has no attribute 'compute_precision'",
                        "test_map_3": "type object 'MetricsCalculator2' has no attribute 'compute_precision'",
                        "test_map_4": "type object 'MetricsCalculator2' has no attribute 'compute_precision'",
                        "test_map_5": "type object 'MetricsCalculator2' has no attribute 'compute_precision'",
                        "test_map_8": "type object 'MetricsCalculator2' has no attribute 'compute_precision'"
                    },
                    "ZeroDivisionError": {
                        "test_map_7": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 8
            },
            "map_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_map_1": "unsupported operand type(s) for *: 'NoneType' and 'NoneType'",
                        "test_map_2": "unsupported operand type(s) for *: 'NoneType' and 'NoneType'",
                        "test_map_3": "unsupported operand type(s) for *: 'NoneType' and 'NoneType'",
                        "test_map_4": "unsupported operand type(s) for *: 'NoneType' and 'NoneType'",
                        "test_map_5": "unsupported operand type(s) for *: 'NoneType' and 'NoneType'",
                        "test_map_8": "unsupported operand type(s) for *: 'NoneType' and 'NoneType'"
                    },
                    "ZeroDivisionError": {
                        "test_map_7": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 8
            },
            "map_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_map_1": "cannot unpack non-iterable float object",
                        "test_map_2": "cannot unpack non-iterable float object"
                    },
                    "ZeroDivisionError": {
                        "test_map_8": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_map_3": "0.25 != 0.3333333333333333",
                        "test_map_4": "0.3125 != 0.40625",
                        "test_map_5": "0.3125 != 0.3645833333333333",
                        "test_map_7": "nan != 0.0"
                    }
                },
                "total_run": 8
            }
        },
        "mrr": {
            "mrr_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_mrr_1": "'int' object is not iterable",
                        "test_mrr_2": "'int' object is not iterable",
                        "test_mrr_3": "cannot unpack non-iterable float object",
                        "test_mrr_4": "cannot unpack non-iterable float object",
                        "test_mrr_5": "cannot unpack non-iterable float object",
                        "test_mrr_7": "cannot unpack non-iterable int object",
                        "test_mrr_8": "cannot unpack non-iterable float object"
                    }
                },
                "failures": {},
                "total_run": 8
            },
            "mrr_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_mrr_1": "'int' object is not iterable",
                        "test_mrr_2": "'int' object is not iterable",
                        "test_mrr_3": "cannot unpack non-iterable float object",
                        "test_mrr_4": "cannot unpack non-iterable float object",
                        "test_mrr_5": "cannot unpack non-iterable float object",
                        "test_mrr_7": "cannot unpack non-iterable int object",
                        "test_mrr_8": "cannot unpack non-iterable float object"
                    }
                },
                "failures": {},
                "total_run": 8
            },
            "mrr_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_mrr_1": "'int' object is not iterable",
                        "test_mrr_2": "'int' object is not iterable",
                        "test_mrr_3": "cannot unpack non-iterable float object",
                        "test_mrr_4": "cannot unpack non-iterable float object",
                        "test_mrr_5": "cannot unpack non-iterable float object",
                        "test_mrr_7": "cannot unpack non-iterable int object",
                        "test_mrr_8": "cannot unpack non-iterable float object"
                    }
                },
                "failures": {},
                "total_run": 8
            },
            "mrr_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_mrr_1": "'int' object is not iterable",
                        "test_mrr_2": "'int' object is not iterable",
                        "test_mrr_3": "cannot unpack non-iterable float object",
                        "test_mrr_4": "cannot unpack non-iterable float object",
                        "test_mrr_5": "cannot unpack non-iterable float object",
                        "test_mrr_7": "cannot unpack non-iterable int object",
                        "test_mrr_8": "cannot unpack non-iterable float object"
                    }
                },
                "failures": {},
                "total_run": 8
            },
            "mrr_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_mrr_1": "cannot unpack non-iterable float object",
                        "test_mrr_2": "cannot unpack non-iterable float object",
                        "test_mrr_3": "cannot unpack non-iterable float object",
                        "test_mrr_4": "cannot unpack non-iterable float object",
                        "test_mrr_5": "cannot unpack non-iterable float object",
                        "test_mrr_7": "cannot unpack non-iterable int object",
                        "test_mrr_8": "cannot unpack non-iterable float object"
                    }
                },
                "failures": {},
                "total_run": 8
            }
        }
    },
    "ClassEval_58": {
        "check_won": {
            "check_won_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_won_4": "False != True"
                    }
                },
                "total_run": 5
            },
            "check_won_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_won_4": "False != True"
                    }
                },
                "total_run": 5
            },
            "check_won_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_won_4": "False != True"
                    }
                },
                "total_run": 5
            },
            "check_won_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_won_4": "False != True"
                    }
                },
                "total_run": 5
            },
            "check_won_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_won_4": "False != True"
                    }
                },
                "total_run": 5
            }
        },
        "generate_mine_sweeper_map": {
            "generate_mine_sweeper_map_0": {
                "compilation": "unexpected indent (ClassEval_58_generate_mine_sweeper_map_0.py, line 53)",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "generate_mine_sweeper_map_1": {
                "compilation": "unexpected indent (ClassEval_58_generate_mine_sweeper_map_1.py, line 46)",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "generate_mine_sweeper_map_2": {
                "compilation": "unexpected indent (ClassEval_58_generate_mine_sweeper_map_2.py, line 50)",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "generate_mine_sweeper_map_3": {
                "compilation": "unexpected indent (ClassEval_58_generate_mine_sweeper_map_3.py, line 57)",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "generate_mine_sweeper_map_4": {
                "compilation": "unexpected indent (ClassEval_58_generate_mine_sweeper_map_4.py, line 48)",
                "errors": {},
                "failures": {},
                "total_run": 0
            }
        },
        "generate_playerMap": {
            "generate_playerMap_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_playerMap_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_playerMap_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_playerMap_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_playerMap_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "sweep": {
            "sweep_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_sweep_4": "'MinesweeperGame' object has no attribute 'explore'"
                    },
                    "TypeError": {
                        "test_sweep": "check_won() missing 1 required positional argument: 'map'",
                        "test_sweep_3": "check_won() missing 1 required positional argument: 'map'",
                        "test_sweep_5": "check_won() missing 1 required positional argument: 'map'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "sweep_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sweep": "0 != 1",
                        "test_sweep_2": "True != False",
                        "test_sweep_3": "[['-', 1, '0'], ['1', '1', '0'], ['0', '0', '0']] != True",
                        "test_sweep_4": "0 != 1",
                        "test_sweep_5": "0 != 1"
                    }
                },
                "total_run": 5
            },
            "sweep_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_sweep": "'MinesweeperGame' object has no attribute 'calculate_mine_count'",
                        "test_sweep_3": "'MinesweeperGame' object has no attribute 'calculate_mine_count'",
                        "test_sweep_4": "'MinesweeperGame' object has no attribute 'calculate_mine_count'",
                        "test_sweep_5": "'MinesweeperGame' object has no attribute 'calculate_mine_count'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_sweep_2": "[['X', '-', '-'], ['-', '-', '-'], ['-', '-', '-']] != False"
                    }
                },
                "total_run": 5
            },
            "sweep_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sweep": "0 != 1",
                        "test_sweep_2": "[['X', '-', '-'], ['-', '-', '-'], ['-', '-', '-']] != False",
                        "test_sweep_3": "[['-', 1, '0'], ['1', '1', '0'], ['0', '0', '0']] != True",
                        "test_sweep_4": "0 != 1",
                        "test_sweep_5": "0 != 1"
                    }
                },
                "total_run": 5
            },
            "sweep_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sweep": "0 != 1",
                        "test_sweep_2": "True != False",
                        "test_sweep_3": "[['-', 1, '0'], ['1', '1', '0'], ['0', '0', '0']] != True",
                        "test_sweep_4": "0 != 1",
                        "test_sweep_5": "0 != 1"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_59": {
        "add_movie": {
            "add_movie_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_movie_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_movie_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_movie_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_movie_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "available_movies": {
            "available_movies_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_available_movies_1": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_2": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_3": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_4": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_5": "'<=' not supported between instances of 'str' and 'datetime.datetime'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "available_movies_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_available_movies_1": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_2": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_3": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_4": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_5": "'<=' not supported between instances of 'str' and 'datetime.datetime'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "available_movies_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_available_movies_3": "Lists differ: ['Batman', 'Spiderman'] != ['Batman']"
                    }
                },
                "total_run": 5
            },
            "available_movies_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_available_movies_3": "Lists differ: ['Batman', 'Spiderman'] != ['Batman']"
                    }
                },
                "total_run": 5
            },
            "available_movies_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_available_movies_3": "Lists differ: ['Batman', 'Spiderman'] != ['Batman']"
                    }
                },
                "total_run": 5
            }
        },
        "book_ticket": {
            "book_ticket_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_book_ticket_2": "'Booking success.' != 'Booking failed.'"
                    }
                },
                "total_run": 5
            },
            "book_ticket_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "book_ticket_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "book_ticket_3": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_book_ticket_1": "'available_seats'",
                        "test_book_ticket_2": "'available_seats'",
                        "test_book_ticket_3": "'available_seats'",
                        "test_book_ticket_4": "'available_seats'",
                        "test_book_ticket_5": "'available_seats'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "book_ticket_4": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_book_ticket_1": "'available_seats'",
                        "test_book_ticket_2": "'available_seats'",
                        "test_book_ticket_4": "'available_seats'",
                        "test_book_ticket_5": "'available_seats'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_6": {
        "get": {
            "get_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "setNum": {
            "setNum_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "setNum_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "setNum_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "setNum_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "setNum_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_60": {
        "create_table": {
            "create_table_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_ticket_1": "table tickets has no column named theater_name",
                        "test_insert_ticket_2": "table tickets has no column named theater_name",
                        "test_insert_ticket_3": "table tickets has no column named theater_name",
                        "test_insert_ticket_4": "table tickets has no column named theater_name",
                        "test_insert_ticket_5": "table tickets has no column named theater_name"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "create_table_1": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_ticket_1": "table tickets has no column named theater_name",
                        "test_insert_ticket_2": "table tickets has no column named theater_name",
                        "test_insert_ticket_3": "table tickets has no column named theater_name",
                        "test_insert_ticket_4": "table tickets has no column named theater_name",
                        "test_insert_ticket_5": "table tickets has no column named theater_name"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "create_table_2": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_ticket_1": "table tickets has no column named theater_name",
                        "test_insert_ticket_2": "table tickets has no column named theater_name",
                        "test_insert_ticket_3": "table tickets has no column named theater_name",
                        "test_insert_ticket_4": "table tickets has no column named theater_name",
                        "test_insert_ticket_5": "table tickets has no column named theater_name"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "create_table_3": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_ticket_1": "table tickets has no column named theater_name",
                        "test_insert_ticket_2": "table tickets has no column named theater_name",
                        "test_insert_ticket_3": "table tickets has no column named theater_name",
                        "test_insert_ticket_4": "table tickets has no column named theater_name",
                        "test_insert_ticket_5": "table tickets has no column named theater_name"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "create_table_4": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_ticket_1": "table tickets has no column named theater_name",
                        "test_insert_ticket_2": "table tickets has no column named theater_name",
                        "test_insert_ticket_3": "table tickets has no column named theater_name",
                        "test_insert_ticket_4": "table tickets has no column named theater_name",
                        "test_insert_ticket_5": "table tickets has no column named theater_name"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "delete_ticket": {
            "delete_ticket_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_MovieTicketDB": "no such column: ticket_id"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "delete_ticket_1": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_MovieTicketDB": "no such column: ticket_id"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "delete_ticket_2": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_MovieTicketDB": "no such column: ticket_id"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "delete_ticket_3": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_MovieTicketDB": "no such column: ticket_id"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "delete_ticket_4": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_MovieTicketDB": "no such column: ticket_id"
                    }
                },
                "failures": {},
                "total_run": 1
            }
        },
        "insert_ticket": {
            "insert_ticket_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_ticket_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_ticket_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_ticket_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_ticket_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "search_tickets_by_customer": {
            "search_tickets_by_customer_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "search_tickets_by_customer_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "search_tickets_by_customer_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "search_tickets_by_customer_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "search_tickets_by_customer_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_61": {
        "add_song": {
            "add_song_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_song_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_song_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_song_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_song_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "play": {
            "play_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_play_2": "'song2' != None",
                        "test_play_4": "'song3' != 'song1'"
                    }
                },
                "total_run": 5
            },
            "play_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_play_2": "'song2' != None",
                        "test_play_4": "'song3' != 'song1'"
                    }
                },
                "total_run": 5
            },
            "play_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_play_2": "'song2' != None",
                        "test_play_4": "'song3' != 'song1'"
                    }
                },
                "total_run": 5
            },
            "play_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_play_2": "'song2' != None",
                        "test_play_4": "'song3' != 'song1'"
                    }
                },
                "total_run": 5
            },
            "play_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_play_2": "'song2' != None",
                        "test_play_4": "'song3' != 'song1'"
                    }
                },
                "total_run": 5
            }
        },
        "previous_song": {
            "previous_song_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_previous_song2": "True != False"
                    }
                },
                "total_run": 5
            },
            "previous_song_1": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_previous_song4": "None is not in list",
                        "test_previous_song5": "None is not in list"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_previous_song2": "True != False"
                    }
                },
                "total_run": 5
            },
            "previous_song_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_previous_song2": "True != False"
                    }
                },
                "total_run": 5
            },
            "previous_song_3": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_previous_song4": "None is not in list",
                        "test_previous_song5": "None is not in list"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_previous_song2": "True != False"
                    }
                },
                "total_run": 5
            },
            "previous_song_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_previous_song2": "True != False"
                    }
                },
                "total_run": 5
            }
        },
        "remove_song": {
            "remove_song_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_song_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_song_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_song_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_song_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "set_volume": {
            "set_volume_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_set_volume": "True != None",
                        "test_set_volume2": "True != None",
                        "test_set_volume3": "True != None"
                    }
                },
                "total_run": 5
            },
            "set_volume_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_set_volume": "True != None",
                        "test_set_volume2": "True != None",
                        "test_set_volume3": "True != None"
                    }
                },
                "total_run": 5
            },
            "set_volume_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_set_volume": "True != None",
                        "test_set_volume2": "True != None",
                        "test_set_volume3": "True != None"
                    }
                },
                "total_run": 5
            },
            "set_volume_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_set_volume": "True != None",
                        "test_set_volume2": "True != None",
                        "test_set_volume3": "True != None"
                    }
                },
                "total_run": 5
            },
            "set_volume_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_set_volume": "True != None",
                        "test_set_volume2": "True != None",
                        "test_set_volume3": "True != None"
                    }
                },
                "total_run": 5
            }
        },
        "shuffle": {
            "shuffle_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_shuffle": "name 'random' is not defined",
                        "test_shuffle_3": "name 'random' is not defined",
                        "test_shuffle_4": "name 'random' is not defined",
                        "test_shuffle_5": "name 'random' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "shuffle_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_shuffle": "name 'random' is not defined",
                        "test_shuffle_3": "name 'random' is not defined",
                        "test_shuffle_4": "name 'random' is not defined",
                        "test_shuffle_5": "name 'random' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "shuffle_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_shuffle": "name 'random' is not defined",
                        "test_shuffle_3": "name 'random' is not defined",
                        "test_shuffle_4": "name 'random' is not defined",
                        "test_shuffle_5": "name 'random' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "shuffle_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_shuffle": "name 'random' is not defined",
                        "test_shuffle_3": "name 'random' is not defined",
                        "test_shuffle_4": "name 'random' is not defined",
                        "test_shuffle_5": "name 'random' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "shuffle_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_shuffle": "name 'random' is not defined",
                        "test_shuffle_3": "name 'random' is not defined",
                        "test_shuffle_4": "name 'random' is not defined",
                        "test_shuffle_5": "name 'random' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "stop": {
            "stop_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "stop_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "stop_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "stop_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "stop_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "switch_song": {
            "switch_song_0": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_switch_song4": "None is not in list"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "switch_song_1": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_switch_song4": "None is not in list"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "switch_song_2": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_switch_song4": "None is not in list"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "switch_song_3": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_switch_song4": "None is not in list"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "switch_song_4": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_switch_song4": "None is not in list"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_62": {
        "construct_stop_word_list": {
            "construct_stop_word_list_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "construct_stop_word_list_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "construct_stop_word_list_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "construct_stop_word_list_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "construct_stop_word_list_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            }
        },
        "process": {
            "process_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_empty_string_list": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_single_word_sentences": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_stop_words_only": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_stop_words_only_2": "'NLPDataProcessor' object has no attribute 'process'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_empty_string_list": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_single_word_sentences": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_stop_words_only": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_stop_words_only_2": "'NLPDataProcessor' object has no attribute 'process'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_empty_string_list": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_single_word_sentences": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_stop_words_only": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_stop_words_only_2": "'NLPDataProcessor' object has no attribute 'process'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "process_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "remove_stop_words": {
            "remove_stop_words_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_remove_stop_words": "'NLPDataProcessor' object has no attribute 'remove_stop_words'",
                        "test_remove_stop_words_2": "'NLPDataProcessor' object has no attribute 'remove_stop_words'",
                        "test_remove_stop_words_3": "'NLPDataProcessor' object has no attribute 'remove_stop_words'",
                        "test_remove_stop_words_4": "'NLPDataProcessor' object has no attribute 'remove_stop_words'",
                        "test_remove_stop_words_5": "'NLPDataProcessor' object has no attribute 'remove_stop_words'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "remove_stop_words_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_stop_words_5": "Lists differ: [['This', 'test'], ['This', 'apple'], ['This', 'dog']] != [['is', 'test'], ['is', 'apple'], ['is', 'dog']]"
                    }
                },
                "total_run": 5
            },
            "remove_stop_words_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_stop_words": "Lists differ: ['This is test', 'This is apple', 'This is dog'] != [['This', 'is', 'test'], ['This', 'is', 'apple'], ['This', 'is', 'dog']]",
                        "test_remove_stop_words_2": "Lists differ: ['', '', ''] != [[], [], []]",
                        "test_remove_stop_words_4": "Lists differ: ['This is a test', 'This is an apple', 'This is the dog'] != [['This', 'is', 'a', 'test'], ['This', 'is[43 chars]og']]",
                        "test_remove_stop_words_5": "Lists differ: ['This test', 'This apple', 'This dog'] != [['is', 'test'], ['is', 'apple'], ['is', 'dog']]"
                    }
                },
                "total_run": 5
            },
            "remove_stop_words_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_stop_words_5": "Lists differ: [['This', 'test'], ['This', 'apple'], ['This', 'dog']] != [['is', 'test'], ['is', 'apple'], ['is', 'dog']]"
                    }
                },
                "total_run": 5
            },
            "remove_stop_words_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_stop_words_5": "Lists differ: [['This', 'test'], ['This', 'apple'], ['This', 'dog']] != [['is', 'test'], ['is', 'apple'], ['is', 'dog']]"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_63": {
        "calculate_word_frequency": {
            "calculate_word_frequency_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_word_frequency_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_word_frequency_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_word_frequency": "{'hello': 4, 'world': 3, 'this': 2, 'is': 2, 'test': 2, 'a': 1, 'another': 1} != {'hello': 4, 'world': 3, 'this': 2, 'is': 2, 'test': 2}",
                        "test_calculate_word_frequency2": "{'world': 6, 'hello': 4, 'this': 2, 'is': 2, 'test': 2, 'a': 1, 'another': 1} != {'world': 6, 'hello': 4, 'this': 2, 'is': 2, 'test': 2}",
                        "test_calculate_word_frequency4": "{'%%%': 6, 'hello': 5, 'world': 4, 'this': 2, 'is': 2, 'a': 2, 'another': 1} != {'%%%': 6, 'hello': 5, 'world': 4, 'is': 2, 'this': 2}",
                        "test_calculate_word_frequency5": "{'%%%': 12, 'hello': 10, 'world': 8, 'this': 4, 'is': 4, 'a': 4, 'another': 2} != {'%%%': 12, 'hello': 10, 'world': 8, 'is': 4, 'this': 4}"
                    }
                },
                "total_run": 5
            },
            "calculate_word_frequency_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_word_frequency_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "process": {
            "process_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process": "'NLPDataProcessor2' object has no attribute 'process'",
                        "test_process5": "'NLPDataProcessor2' object has no attribute 'process'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "process_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process": "'NLPDataProcessor2' object has no attribute 'process'",
                        "test_process5": "'NLPDataProcessor2' object has no attribute 'process'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "process_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_process": "process() takes 1 positional argument but 2 were given",
                        "test_process5": "process() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "process_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process": "{'l': 6, 't': 6, 's': 6, 'h': 4, 'e': 4} != {'hello': 2, 'world': 2, 'this': 2, 'is': 2, 'a': 2}",
                        "test_process5": "{'l': 6, 't': 6, 's': 6, 'h': 4, 'e': 4} != {'hello': 2, 'world': 2, 'this': 2, 'is': 2, 'a': 2}"
                    }
                },
                "total_run": 6
            },
            "process_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process": "'NLPDataProcessor2' object has no attribute 'process'",
                        "test_process5": "'NLPDataProcessor2' object has no attribute 'process'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "process_data": {
            "process_data_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "process_data_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_process_data": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data2": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data3": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data4": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data5": "process_data() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_data_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "process_data_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "process_data_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_process_data": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data2": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data3": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data4": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data5": "process_data() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_64": {
        "binary_to_decimal": {
            "binary_to_decimal_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "binary_to_decimal_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "binary_to_decimal_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_binary_to_decimal": "not all arguments converted during string formatting",
                        "test_binary_to_decimal_2": "not all arguments converted during string formatting",
                        "test_binary_to_decimal_3": "not all arguments converted during string formatting",
                        "test_binary_to_decimal_4": "not all arguments converted during string formatting",
                        "test_binary_to_decimal_5": "not all arguments converted during string formatting"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "binary_to_decimal_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "binary_to_decimal_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_binary_to_decimal": "string index out of range",
                        "test_binary_to_decimal_2": "string index out of range",
                        "test_binary_to_decimal_3": "string index out of range",
                        "test_binary_to_decimal_4": "string index out of range",
                        "test_binary_to_decimal_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "decimal_to_binary": {
            "decimal_to_binary_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_binary_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_binary_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_binary_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_binary_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "decimal_to_hex": {
            "decimal_to_hex_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_hex_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_hex_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_decimal_to_hex": "'a5b7' != '0xa5b7'",
                        "test_decimal_to_hex_2": "'5317' != '0x5317'",
                        "test_decimal_to_hex_3": "'14bab' != '0x14bab'",
                        "test_decimal_to_hex_4": "'29757' != '0x29757'",
                        "test_decimal_to_hex_5": "'52eb7' != '0x52eb7'"
                    }
                },
                "total_run": 5
            },
            "decimal_to_hex_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_hex_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "decimal_to_octal": {
            "decimal_to_octal_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_octal_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_octal_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_octal_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_octal_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "hex_to_decimal": {
            "hex_to_decimal_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "hex_to_decimal_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "hex_to_decimal_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "hex_to_decimal_3": {
                "compilation": "unexpected unindent (ClassEval_64_hex_to_decimal_3.py, line 30)",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "hex_to_decimal_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "octal_to_decimal": {
            "octal_to_decimal_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_octal_to_decimal": "not all arguments converted during string formatting",
                        "test_octal_to_decimal_2": "not all arguments converted during string formatting",
                        "test_octal_to_decimal_3": "not all arguments converted during string formatting",
                        "test_octal_to_decimal_4": "not all arguments converted during string formatting",
                        "test_octal_to_decimal_5": "not all arguments converted during string formatting"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "octal_to_decimal_1": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_octal_to_decimal": "string index out of range",
                        "test_octal_to_decimal_2": "string index out of range",
                        "test_octal_to_decimal_3": "string index out of range",
                        "test_octal_to_decimal_4": "string index out of range",
                        "test_octal_to_decimal_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "octal_to_decimal_2": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_octal_to_decimal": "string index out of range",
                        "test_octal_to_decimal_2": "string index out of range",
                        "test_octal_to_decimal_3": "string index out of range",
                        "test_octal_to_decimal_4": "string index out of range",
                        "test_octal_to_decimal_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "octal_to_decimal_3": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_octal_to_decimal": "string index out of range",
                        "test_octal_to_decimal_2": "string index out of range",
                        "test_octal_to_decimal_3": "string index out of range",
                        "test_octal_to_decimal_4": "string index out of range",
                        "test_octal_to_decimal_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "octal_to_decimal_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_65": {
        "format": {
            "format_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_format_1": "format() takes 1 positional argument but 2 were given",
                        "test_format_2": "format() takes 1 positional argument but 2 were given",
                        "test_format_3": "format() takes 1 positional argument but 2 were given",
                        "test_format_4": "format() takes 1 positional argument but 2 were given",
                        "test_format_5": "format() takes 1 positional argument but 2 were given",
                        "test_format_6": "format() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "format_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_format_1": "'Number not supported' != 'ONE HUNDRED AND TWENTY THREE THOUSAND FOUR HUNDRED AND FIFTY SIX ONLY'",
                        "test_format_2": "'Number not supported' != 'ONE THOUSAND ONLY'",
                        "test_format_3": "'Number not supported' != 'ONE MILLION ONLY'",
                        "test_format_4": "'Number not supported' != 'ONE AND CENTS TWENTY THREE ONLY'",
                        "test_format_5": "'zero' != 'ZERO ONLY'",
                        "test_format_6": "'Number not supported' != ''"
                    }
                },
                "total_run": 6
            },
            "format_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_format_1": "'NumberWordFormatter' object has no attribute 'format'",
                        "test_format_2": "'NumberWordFormatter' object has no attribute 'format'",
                        "test_format_3": "'NumberWordFormatter' object has no attribute 'format'",
                        "test_format_4": "'NumberWordFormatter' object has no attribute 'format'",
                        "test_format_5": "'NumberWordFormatter' object has no attribute 'format'",
                        "test_format_6": "'NumberWordFormatter' object has no attribute 'format'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "format_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_format_1": "'int' object has no attribute 'split'",
                        "test_format_2": "'int' object has no attribute 'split'",
                        "test_format_3": "'int' object has no attribute 'split'",
                        "test_format_4": "'int' object has no attribute 'split'",
                        "test_format_5": "'int' object has no attribute 'split'"
                    },
                    "ValueError": {
                        "test_format_6": "invalid literal for int() with base 10: 'None'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "format_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_format_1": "'Number not supported' != 'ONE HUNDRED AND TWENTY THREE THOUSAND FOUR HUNDRED AND FIFTY SIX ONLY'",
                        "test_format_2": "'Number not supported' != 'ONE THOUSAND ONLY'",
                        "test_format_3": "'Number not supported' != 'ONE MILLION ONLY'",
                        "test_format_4": "'Number not supported' != 'ONE AND CENTS TWENTY THREE ONLY'",
                        "test_format_5": "'zero' != 'ZERO ONLY'",
                        "test_format_6": "'Number not supported' != ''"
                    }
                },
                "total_run": 6
            }
        },
        "format_string": {
            "format_string_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_format_string_1": "'ONE TWO THREE FOUR FIVE SIX ONLY' != 'ONE HUNDRED AND TWENTY THREE THOUSAND FOUR HUNDRED AND FIFTY SIX ONLY'",
                        "test_format_string_2": "'ONE ZERO ZERO ZERO ONLY' != 'ONE THOUSAND ONLY'",
                        "test_format_string_3": "'ONE ZERO ZERO ZERO ZERO ZERO ZERO ONLY' != 'ONE MILLION ONLY'",
                        "test_format_string_4": "'ONE TWO THREE ONLY' != 'ONE AND CENTS TWENTY THREE ONLY'",
                        "test_format_string_6": "'ONE ZERO ONLY' != 'TEN ONLY'"
                    }
                },
                "total_run": 6
            },
            "format_string_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_format_string_1": "'one two three four five six' != 'ONE HUNDRED AND TWENTY THREE THOUSAND FOUR HUNDRED AND FIFTY SIX ONLY'",
                        "test_format_string_2": "'one zero zero zero' != 'ONE THOUSAND ONLY'",
                        "test_format_string_3": "'one zero zero zero zero zero zero' != 'ONE MILLION ONLY'",
                        "test_format_string_4": "'one two three' != 'ONE AND CENTS TWENTY THREE ONLY'",
                        "test_format_string_5": "'zero' != 'ZERO ONLY'",
                        "test_format_string_6": "'one zero' != 'TEN ONLY'"
                    }
                },
                "total_run": 6
            },
            "format_string_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_format_string_1": "'one two three four five six' != 'ONE HUNDRED AND TWENTY THREE THOUSAND FOUR HUNDRED AND FIFTY SIX ONLY'",
                        "test_format_string_2": "'one zero zero zero' != 'ONE THOUSAND ONLY'",
                        "test_format_string_3": "'one zero zero zero zero zero zero' != 'ONE MILLION ONLY'",
                        "test_format_string_4": "'one two three' != 'ONE AND CENTS TWENTY THREE ONLY'",
                        "test_format_string_5": "'zero' != 'ZERO ONLY'",
                        "test_format_string_6": "'one zero' != 'TEN ONLY'"
                    }
                },
                "total_run": 6
            },
            "format_string_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_format_string_1": "'NumberWordFormatter' object has no attribute 'format_string'",
                        "test_format_string_2": "'NumberWordFormatter' object has no attribute 'format_string'",
                        "test_format_string_3": "'NumberWordFormatter' object has no attribute 'format_string'",
                        "test_format_string_4": "'NumberWordFormatter' object has no attribute 'format_string'",
                        "test_format_string_5": "'NumberWordFormatter' object has no attribute 'format_string'",
                        "test_format_string_6": "'NumberWordFormatter' object has no attribute 'format_string'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "format_string_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_format_string_2": "string index out of range",
                        "test_format_string_3": "string index out of range"
                    },
                    "ValueError": {
                        "test_format_string_1": "invalid literal for int() with base 10: ''",
                        "test_format_string_4": "invalid literal for int() with base 10: '32.'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_format_string_5": "' ONLY' != 'ZERO ONLY'",
                        "test_format_string_6": "'ONE  ONLY' != 'TEN ONLY'"
                    }
                },
                "total_run": 6
            }
        },
        "parse_more": {
            "parse_more_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_more_2": "'thousand' != 'THOUSAND'",
                        "test_parse_more_3": "'million' != 'MILLION'",
                        "test_parse_more_4": "'billion' != 'BILLION'"
                    }
                },
                "total_run": 4
            },
            "parse_more_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 4
            },
            "parse_more_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_more_2": "'thousand' != 'THOUSAND'",
                        "test_parse_more_3": "'million' != 'MILLION'",
                        "test_parse_more_4": "'billion' != 'BILLION'"
                    }
                },
                "total_run": 4
            },
            "parse_more_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_more_2": "'thousand' != 'THOUSAND'",
                        "test_parse_more_3": "'million' != 'MILLION'",
                        "test_parse_more_4": "'billion' != 'BILLION'"
                    }
                },
                "total_run": 4
            },
            "parse_more_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_more_2": "'thousand' != 'THOUSAND'",
                        "test_parse_more_3": "'million' != 'MILLION'",
                        "test_parse_more_4": "'billion' != 'BILLION'"
                    }
                },
                "total_run": 4
            }
        },
        "trans_three": {
            "trans_three_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_trans_three_1": "'ONE HUNDRED AND THIRTY THREE' != 'ONE HUNDRED AND TWENTY THREE'",
                        "test_trans_three_2": "'NINE HUNDRED AND TEN ' != 'NINE HUNDRED'",
                        "test_trans_three_3": "' AND TEN SEVEN' != 'SEVEN'",
                        "test_trans_three_4": "' AND TEN ONE' != 'ONE'",
                        "test_trans_three_5": "' AND TEN SIX' != 'SIX'"
                    }
                },
                "total_run": 5
            },
            "trans_three_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_trans_three_1": "'ONE HUNDRED AND THIRTY THREE' != 'ONE HUNDRED AND TWENTY THREE'",
                        "test_trans_three_2": "'NINE HUNDRED AND TEN ' != 'NINE HUNDRED'",
                        "test_trans_three_3": "' AND TEN SEVEN' != 'SEVEN'",
                        "test_trans_three_4": "' AND TEN ONE' != 'ONE'",
                        "test_trans_three_5": "' AND TEN SIX' != 'SIX'"
                    }
                },
                "total_run": 5
            },
            "trans_three_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_trans_three_1": "'ONE HUNDRED AND THIRTY THREE' != 'ONE HUNDRED AND TWENTY THREE'",
                        "test_trans_three_2": "'NINE HUNDRED AND TEN ' != 'NINE HUNDRED'",
                        "test_trans_three_3": "' AND TEN SEVEN' != 'SEVEN'",
                        "test_trans_three_4": "' AND TEN ONE' != 'ONE'",
                        "test_trans_three_5": "' AND TEN SIX' != 'SIX'"
                    }
                },
                "total_run": 5
            },
            "trans_three_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_trans_three_1": "'ONE HUNDRED AND THIRTY THREE' != 'ONE HUNDRED AND TWENTY THREE'",
                        "test_trans_three_2": "'NINE HUNDRED AND TEN ' != 'NINE HUNDRED'",
                        "test_trans_three_3": "' AND TEN SEVEN' != 'SEVEN'",
                        "test_trans_three_4": "' AND TEN ONE' != 'ONE'",
                        "test_trans_three_5": "' AND TEN SIX' != 'SIX'"
                    }
                },
                "total_run": 5
            },
            "trans_three_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_trans_three_1": "'ONE HUNDRED THIRTY THREE' != 'ONE HUNDRED AND TWENTY THREE'",
                        "test_trans_three_2": "'NINE HUNDRED TEN ' != 'NINE HUNDRED'",
                        "test_trans_three_3": "' TEN SEVEN' != 'SEVEN'",
                        "test_trans_three_4": "' TEN ONE' != 'ONE'",
                        "test_trans_three_5": "' TEN SIX' != 'SIX'"
                    }
                },
                "total_run": 5
            }
        },
        "trans_two": {
            "trans_two_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_trans_two_1": "'two three' != 'TWENTY THREE'",
                        "test_trans_two_2": "'one zero' != 'TEN'",
                        "test_trans_two_3": "'zero five' != 'FIVE'",
                        "test_trans_two_4": "'zero zero' != ''",
                        "test_trans_two_5": "'zero one' != 'ONE'",
                        "test_trans_two_6": "'eight zero' != 'EIGHTY'"
                    }
                },
                "total_run": 6
            },
            "trans_two_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_trans_two_1": "'THIRTY three' != 'TWENTY THREE'",
                        "test_trans_two_2": "'TWENTY zero' != 'TEN'",
                        "test_trans_two_3": "'TEN five' != 'FIVE'",
                        "test_trans_two_4": "'TEN zero' != ''",
                        "test_trans_two_5": "'TEN one' != 'ONE'",
                        "test_trans_two_6": "'NINETY zero' != 'EIGHTY'"
                    }
                },
                "total_run": 6
            },
            "trans_two_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_trans_two_1": "'two three' != 'TWENTY THREE'",
                        "test_trans_two_2": "'one zero' != 'TEN'",
                        "test_trans_two_3": "'zero five' != 'FIVE'",
                        "test_trans_two_4": "'zero zero' != ''",
                        "test_trans_two_5": "'zero one' != 'ONE'",
                        "test_trans_two_6": "'eight zero' != 'EIGHTY'"
                    }
                },
                "total_run": 6
            },
            "trans_two_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_trans_two_1": "'TWENTY three' != 'TWENTY THREE'",
                        "test_trans_two_2": "'TEN zero' != 'TEN'",
                        "test_trans_two_3": "'NINETY five' != 'FIVE'",
                        "test_trans_two_4": "'NINETY zero' != ''",
                        "test_trans_two_5": "'NINETY one' != 'ONE'",
                        "test_trans_two_6": "'EIGHTY zero' != 'EIGHTY'"
                    }
                },
                "total_run": 6
            },
            "trans_two_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_trans_two_1": "'two three' != 'TWENTY THREE'",
                        "test_trans_two_2": "'one zero' != 'TEN'",
                        "test_trans_two_3": "'zero five' != 'FIVE'",
                        "test_trans_two_4": "'zero zero' != ''",
                        "test_trans_two_5": "'zero one' != 'ONE'",
                        "test_trans_two_6": "'eight zero' != 'EIGHTY'"
                    }
                },
                "total_run": 6
            }
        }
    },
    "ClassEval_66": {
        "is_hex_char": {
            "is_hex_char_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_hex_char_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_hex_char_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_hex_char_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_is_hex_char_1": "is_hex_char() missing 1 required positional argument: 'char'",
                        "test_is_hex_char_2": "is_hex_char() missing 1 required positional argument: 'char'",
                        "test_is_hex_char_3": "is_hex_char() missing 1 required positional argument: 'char'",
                        "test_is_hex_char_4": "is_hex_char() missing 1 required positional argument: 'char'",
                        "test_is_hex_char_5": "is_hex_char() missing 1 required positional argument: 'char'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "is_hex_char_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "replace": {
            "replace_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_replace_1": "'NumericEntityUnescaper' object has no attribute 'html'",
                        "test_replace_10": "'NumericEntityUnescaper' object has no attribute 'html'",
                        "test_replace_11": "'NumericEntityUnescaper' object has no attribute 'html'",
                        "test_replace_2": "'NumericEntityUnescaper' object has no attribute 'html'",
                        "test_replace_3": "'NumericEntityUnescaper' object has no attribute 'html'",
                        "test_replace_4": "'NumericEntityUnescaper' object has no attribute 'html'",
                        "test_replace_5": "'NumericEntityUnescaper' object has no attribute 'html'",
                        "test_replace_6": "'NumericEntityUnescaper' object has no attribute 'html'",
                        "test_replace_7": "'NumericEntityUnescaper' object has no attribute 'html'",
                        "test_replace_8": "'NumericEntityUnescaper' object has no attribute 'html'",
                        "test_replace_9": "'NumericEntityUnescaper' object has no attribute 'html'"
                    }
                },
                "failures": {},
                "total_run": 11
            },
            "replace_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_replace_10": "'&#X' != ''",
                        "test_replace_11": "'&#c1d;BC' != ''",
                        "test_replace_6": "'&#' != ''",
                        "test_replace_9": "'CCC;' != 'CCC'"
                    }
                },
                "total_run": 11
            },
            "replace_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_replace_10": "'&#X' != ''",
                        "test_replace_11": "'&#c1d;BC' != ''",
                        "test_replace_6": "'&#' != ''",
                        "test_replace_9": "'CCC;' != 'CCC'"
                    }
                },
                "total_run": 11
            },
            "replace_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_replace_1": "name 'html' is not defined",
                        "test_replace_10": "name 'html' is not defined",
                        "test_replace_11": "name 'html' is not defined",
                        "test_replace_2": "name 'html' is not defined",
                        "test_replace_3": "name 'html' is not defined",
                        "test_replace_4": "name 'html' is not defined",
                        "test_replace_5": "name 'html' is not defined",
                        "test_replace_6": "name 'html' is not defined",
                        "test_replace_7": "name 'html' is not defined",
                        "test_replace_8": "name 'html' is not defined",
                        "test_replace_9": "name 'html' is not defined"
                    }
                },
                "failures": {},
                "total_run": 11
            },
            "replace_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_replace_10": "'&#X' != ''",
                        "test_replace_11": "'&#c1d;BC' != ''",
                        "test_replace_6": "'&#' != ''",
                        "test_replace_9": "'CCC;' != 'CCC'"
                    }
                },
                "total_run": 11
            }
        }
    },
    "ClassEval_67": {
        "add_dish": {
            "add_dish_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_dish_6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "add_dish_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_dish_1": "False is not true",
                        "test_add_dish_3": "False is not true",
                        "test_add_dish_4": "False is not true",
                        "test_add_dish_5": "False is not true",
                        "test_add_dish_6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "add_dish_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_dish_6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "add_dish_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_dish_6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "add_dish_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_dish_1": "False is not true",
                        "test_add_dish_3": "False is not true",
                        "test_add_dish_4": "False is not true",
                        "test_add_dish_5": "False is not true",
                        "test_add_dish_6": "False is not true"
                    }
                },
                "total_run": 6
            }
        },
        "calculate_total": {
            "calculate_total_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_total_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_total_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_total_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_total_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "checkout": {
            "checkout_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_checkout_1": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 2[41 chars]: 2}]",
                        "test_checkout_3": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 1[41 chars]: 1}]",
                        "test_checkout_4": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 3[41 chars]: 3}]",
                        "test_checkout_5": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 5[41 chars]: 5}]"
                    }
                },
                "total_run": 5
            },
            "checkout_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_checkout_1": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 2[41 chars]: 2}]",
                        "test_checkout_3": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 1[41 chars]: 1}]",
                        "test_checkout_4": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 3[41 chars]: 3}]",
                        "test_checkout_5": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 5[41 chars]: 5}]"
                    }
                },
                "total_run": 5
            },
            "checkout_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_checkout_1": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 2[41 chars]: 2}]",
                        "test_checkout_3": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 1[41 chars]: 1}]",
                        "test_checkout_4": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 3[41 chars]: 3}]",
                        "test_checkout_5": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 5[41 chars]: 5}]"
                    }
                },
                "total_run": 5
            },
            "checkout_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_checkout_1": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 2[41 chars]: 2}]",
                        "test_checkout_3": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 1[41 chars]: 1}]",
                        "test_checkout_4": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 3[41 chars]: 3}]",
                        "test_checkout_5": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 5[41 chars]: 5}]"
                    }
                },
                "total_run": 5
            },
            "checkout_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_checkout_1": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 2[41 chars]: 2}]",
                        "test_checkout_3": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 1[41 chars]: 1}]",
                        "test_checkout_4": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 3[41 chars]: 3}]",
                        "test_checkout_5": "Lists differ: [] != [{'dish': 'dish1', 'price': 10, 'count': 5[41 chars]: 5}]"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_68": {
        "get_page": {
            "get_page_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_page_1": "'PageUtil' object has no attribute 'get_page'",
                        "test_get_page_2": "'PageUtil' object has no attribute 'get_page'",
                        "test_get_page_3": "'PageUtil' object has no attribute 'get_page'",
                        "test_get_page_4": "'PageUtil' object has no attribute 'get_page'",
                        "test_get_page_5": "'PageUtil' object has no attribute 'get_page'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_page_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_page_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_page_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_page_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_page_1": "'PageUtil' object has no attribute 'get_page'",
                        "test_get_page_2": "'PageUtil' object has no attribute 'get_page'",
                        "test_get_page_3": "'PageUtil' object has no attribute 'get_page'",
                        "test_get_page_4": "'PageUtil' object has no attribute 'get_page'",
                        "test_get_page_5": "'PageUtil' object has no attribute 'get_page'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "get_page_info": {
            "get_page_info_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_page_info_5": "{'current_page': 5, 'per_page': 3, 'total_[77 chars]: []} != {}"
                    }
                },
                "total_run": 5
            },
            "get_page_info_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_page_info_5": "{'current_page': 5, 'per_page': 3, 'total_[77 chars]: []} != {}"
                    }
                },
                "total_run": 5
            },
            "get_page_info_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_page_info_5": "{'current_page': 5, 'per_page': 3, 'total_[77 chars]: []} != {}"
                    }
                },
                "total_run": 5
            },
            "get_page_info_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_page_info_5": "{'current_page': 5, 'per_page': 3, 'total_[77 chars]: []} != {}"
                    }
                },
                "total_run": 5
            },
            "get_page_info_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_page_info_5": "{'current_page': 5, 'per_page': 3, 'total_[77 chars]: []} != {}"
                    }
                },
                "total_run": 5
            }
        },
        "search": {
            "search_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_search_1": "argument of type 'int' is not iterable",
                        "test_search_2": "argument of type 'int' is not iterable",
                        "test_search_3": "argument of type 'int' is not iterable",
                        "test_search_4": "argument of type 'int' is not iterable",
                        "test_search_5": "argument of type 'int' is not iterable"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "search_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_search_1": "argument of type 'int' is not iterable",
                        "test_search_2": "argument of type 'int' is not iterable",
                        "test_search_3": "argument of type 'int' is not iterable",
                        "test_search_4": "argument of type 'int' is not iterable",
                        "test_search_5": "argument of type 'int' is not iterable"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "search_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "search_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_search_1": "argument of type 'int' is not iterable",
                        "test_search_2": "argument of type 'int' is not iterable",
                        "test_search_3": "argument of type 'int' is not iterable",
                        "test_search_4": "argument of type 'int' is not iterable",
                        "test_search_5": "argument of type 'int' is not iterable"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "search_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_search_1": "argument of type 'int' is not iterable",
                        "test_search_2": "argument of type 'int' is not iterable",
                        "test_search_3": "argument of type 'int' is not iterable",
                        "test_search_4": "argument of type 'int' is not iterable",
                        "test_search_5": "argument of type 'int' is not iterable"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_69": {
        "extract_text_from_pdfs": {
            "extract_text_from_pdfs_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_merge_pdfs": "name 'TestPDFHandler' is not defined"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "extract_text_from_pdfs_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_merge_pdfs": "name 'TestPDFHandler' is not defined"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "extract_text_from_pdfs_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_merge_pdfs": "name 'TestPDFHandler' is not defined"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "extract_text_from_pdfs_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_merge_pdfs": "name 'TestPDFHandler' is not defined"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "extract_text_from_pdfs_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_merge_pdfs": "name 'TestPDFHandler' is not defined"
                    }
                },
                "failures": {},
                "total_run": 1
            }
        },
        "merge_pdfs": {
            "merge_pdfs_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "merge_pdfs_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "merge_pdfs_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "merge_pdfs_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "merge_pdfs_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 0
            }
        }
    },
    "ClassEval_7": {
        "check_balanced_brackets": {
            "check_balanced_brackets_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "check_balanced_brackets_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "check_balanced_brackets_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "check_balanced_brackets_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "check_balanced_brackets_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            }
        },
        "clear_expr": {
            "clear_expr_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "clear_expr_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "clear_expr_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "clear_expr_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "clear_expr_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_70": {
        "_validate_name": {
            "_validate_name_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_name_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_name_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_name_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_name_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "_validate_phoneNumber": {
            "_validate_phoneNumber_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_phoneNumber_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_phoneNumber_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_phoneNumber_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_phoneNumber_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "_validate_sex": {
            "_validate_sex_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_sex_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_sex_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_sex_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_validate_sex_2": "None != 'UGM'",
                        "test_validate_sex_3": "None != 'Man'",
                        "test_validate_sex_4": "None != 'Woman'"
                    }
                },
                "total_run": 5
            },
            "_validate_sex_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_71": {
        "check_win": {
            "check_win_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_win_2": "None is not true"
                    }
                },
                "total_run": 2
            },
            "check_win_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 2
            },
            "check_win_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 2
            },
            "check_win_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_win_2": "None is not true"
                    }
                },
                "total_run": 2
            },
            "check_win_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_win_2": "None is not true"
                    }
                },
                "total_run": 2
            }
        },
        "init_game": {
            "init_game_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_init_game_7": "0 != 1"
                    }
                },
                "total_run": 7
            },
            "init_game_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_init_game_7": "0 != 1"
                    }
                },
                "total_run": 7
            },
            "init_game_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_init_game_7": "0 != 1"
                    }
                },
                "total_run": 7
            },
            "init_game_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_init_game_3": "0 != 1",
                        "test_init_game_4": "0 != 1",
                        "test_init_game_7": "0 != 1"
                    }
                },
                "total_run": 7
            },
            "init_game_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            }
        },
        "move": {
            "move_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_move_1": "'str' object does not support item assignment",
                        "test_move_3": "'str' object does not support item assignment",
                        "test_move_4": "'str' object does not support item assignment",
                        "test_move_7": "'str' object does not support item assignment"
                    }
                },
                "failures": {},
                "total_run": 7
            },
            "move_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "move_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_move_1": "True is not false"
                    }
                },
                "total_run": 7
            },
            "move_3": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_move_6": "local variable 'new_row' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 7
            },
            "move_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_move_1": "'str' object does not support item assignment",
                        "test_move_3": "'str' object does not support item assignment",
                        "test_move_4": "'str' object does not support item assignment"
                    }
                },
                "failures": {},
                "total_run": 7
            }
        }
    },
    "ClassEval_72": {
        "extract_email": {
            "extract_email_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "extract_email_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "extract_email_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "extract_email_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "extract_email_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "findall": {
            "findall_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "findall_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "findall_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "findall_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "findall_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "generate_email_pattern": {
            "generate_email_pattern_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_email_pattern_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_email_pattern_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_email_pattern_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_email_pattern_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "generate_phone_number_pattern": {
            "generate_phone_number_pattern_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_phone_number_pattern_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_phone_number_pattern_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_phone_number_pattern_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_phone_number_pattern_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "generate_split_sentences_pattern": {
            "generate_split_sentences_pattern_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_generate_split_sentences_pattern_1": "False != True",
                        "test_generate_split_sentences_pattern_2": "False != True"
                    }
                },
                "total_run": 5
            },
            "generate_split_sentences_pattern_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_split_sentences_pattern_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_generate_split_sentences_pattern_1": "False != True",
                        "test_generate_split_sentences_pattern_2": "False != True"
                    }
                },
                "total_run": 5
            },
            "generate_split_sentences_pattern_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_generate_split_sentences_pattern_1": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_2": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_3": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_4": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_5": "name 'sentence1' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "generate_split_sentences_pattern_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_generate_split_sentences_pattern_1": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_2": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_3": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_4": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_5": "name 'sentence1' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "match": {
            "match_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "match_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "match_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "match_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "match_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "split": {
            "split_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "split_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "split_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "split_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "split_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "split_sentences": {
            "split_sentences_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_1": "Lists differ: ['Aaa.', 'Bbbb?', 'Ccc!'] != ['Aaa', 'Bbbb', 'Ccc!']",
                        "test_split_sentences_2": "Lists differ: ['Aaa.Bbbb?', 'Ccc!'] != ['Aaa.Bbbb', 'Ccc!']",
                        "test_split_sentences_3": "Lists differ: ['Aaa.', 'bbbb?', 'Ccc!'] != ['Aaa. bbbb', 'Ccc!']",
                        "test_split_sentences_4": "Lists differ: ['Aaa.', 'bbbb, Ccc!'] != ['Aaa. bbbb, Ccc!']",
                        "test_split_sentences_5": "Lists differ: ['Aaa, Bbbb?', 'Ccc!'] != ['Aaa, Bbbb', 'Ccc!']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_1": "Lists differ: ['Aaa.', 'Bbbb?', 'Ccc!'] != ['Aaa', 'Bbbb', 'Ccc!']",
                        "test_split_sentences_2": "Lists differ: ['Aaa.Bbbb?', 'Ccc!'] != ['Aaa.Bbbb', 'Ccc!']",
                        "test_split_sentences_3": "Lists differ: ['Aaa.', 'bbbb?', 'Ccc!'] != ['Aaa. bbbb', 'Ccc!']",
                        "test_split_sentences_4": "Lists differ: ['Aaa.', 'bbbb, Ccc!'] != ['Aaa. bbbb, Ccc!']",
                        "test_split_sentences_5": "Lists differ: ['Aaa, Bbbb?', 'Ccc!'] != ['Aaa, Bbbb', 'Ccc!']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_1": "Lists differ: ['Aaa.', 'Bbbb?', 'Ccc!'] != ['Aaa', 'Bbbb', 'Ccc!']",
                        "test_split_sentences_2": "Lists differ: ['Aaa.Bbbb?', 'Ccc!'] != ['Aaa.Bbbb', 'Ccc!']",
                        "test_split_sentences_3": "Lists differ: ['Aaa.', 'bbbb?', 'Ccc!'] != ['Aaa. bbbb', 'Ccc!']",
                        "test_split_sentences_4": "Lists differ: ['Aaa.', 'bbbb, Ccc!'] != ['Aaa. bbbb, Ccc!']",
                        "test_split_sentences_5": "Lists differ: ['Aaa, Bbbb?', 'Ccc!'] != ['Aaa, Bbbb', 'Ccc!']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_1": "Lists differ: ['Aaa.', 'Bbbb?', 'Ccc!'] != ['Aaa', 'Bbbb', 'Ccc!']",
                        "test_split_sentences_2": "Lists differ: ['Aaa.Bbbb?', 'Ccc!'] != ['Aaa.Bbbb', 'Ccc!']",
                        "test_split_sentences_3": "Lists differ: ['Aaa.', 'bbbb?', 'Ccc!'] != ['Aaa. bbbb', 'Ccc!']",
                        "test_split_sentences_4": "Lists differ: ['Aaa.', 'bbbb, Ccc!'] != ['Aaa. bbbb, Ccc!']",
                        "test_split_sentences_5": "Lists differ: ['Aaa, Bbbb?', 'Ccc!'] != ['Aaa, Bbbb', 'Ccc!']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_1": "Lists differ: ['Aaa.', 'Bbbb?', 'Ccc!'] != ['Aaa', 'Bbbb', 'Ccc!']",
                        "test_split_sentences_2": "Lists differ: ['Aaa.Bbbb?', 'Ccc!'] != ['Aaa.Bbbb', 'Ccc!']",
                        "test_split_sentences_3": "Lists differ: ['Aaa.', 'bbbb?', 'Ccc!'] != ['Aaa. bbbb', 'Ccc!']",
                        "test_split_sentences_4": "Lists differ: ['Aaa.', 'bbbb, Ccc!'] != ['Aaa. bbbb, Ccc!']",
                        "test_split_sentences_5": "Lists differ: ['Aaa, Bbbb?', 'Ccc!'] != ['Aaa, Bbbb', 'Ccc!']"
                    }
                },
                "total_run": 5
            }
        },
        "sub": {
            "sub_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sub_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sub_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sub_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sub_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "validate_phone_number": {
            "validate_phone_number_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_validate_phone_number_2": "True != False"
                    }
                },
                "total_run": 5
            },
            "validate_phone_number_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_validate_phone_number_2": "True != False"
                    }
                },
                "total_run": 5
            },
            "validate_phone_number_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_validate_phone_number_2": "True != False"
                    }
                },
                "total_run": 5
            },
            "validate_phone_number_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_validate_phone_number_2": "True != False"
                    }
                },
                "total_run": 5
            },
            "validate_phone_number_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_validate_phone_number_2": "True != False"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_73": {
        "attack": {
            "attack_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "attack_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "attack_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "attack_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "attack_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "gain_exp": {
            "gain_exp_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "gain_exp_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "gain_exp_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "gain_exp_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_gain_exp_1": "3 != 2",
                        "test_gain_exp_2": "3 != 5",
                        "test_gain_exp_3": "3 != 2",
                        "test_gain_exp_5": "0 != 100"
                    }
                },
                "total_run": 5
            },
            "gain_exp_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "heal": {
            "heal_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "heal_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "heal_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "heal_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "heal_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "is_alive": {
            "is_alive_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_alive_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_alive_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_alive_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_alive_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "level_up": {
            "level_up_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_level_up_2": "101 != 100"
                    }
                },
                "total_run": 5
            },
            "level_up_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_level_up_1": "1 != 2",
                        "test_level_up_2": "120 != 100",
                        "test_level_up_3": "2 != 3",
                        "test_level_up_4": "3 != 4",
                        "test_level_up_5": "4 != 5"
                    }
                },
                "total_run": 5
            },
            "level_up_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_level_up_2": "101 != 100"
                    }
                },
                "total_run": 5
            },
            "level_up_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "level_up_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_74": {
        "add_white_list": {
            "add_white_list_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_white_list_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_white_list_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_white_list_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_white_list_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "del_white_list": {
            "del_white_list_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "del_white_list_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "del_white_list_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "del_white_list_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "del_white_list_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "recv": {
            "recv_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_recv_3": "'list' object has no attribute 'get'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_recv_1": "{} != {'addr': 88, 'content': 'abc'}",
                        "test_recv_4": "False != -1",
                        "test_recv_5": "False != -1"
                    }
                },
                "total_run": 5
            },
            "recv_1": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_recv_5": "'addr'"
                    },
                    "TypeError": {
                        "test_recv_3": "list indices must be integers or slices, not str"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_recv_1": "{} != {'addr': 88, 'content': 'abc'}",
                        "test_recv_4": "False != -1"
                    }
                },
                "total_run": 5
            },
            "recv_2": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_recv_5": "'addr'"
                    },
                    "TypeError": {
                        "test_recv_3": "list indices must be integers or slices, not str"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_recv_1": "{} != {'addr': 88, 'content': 'abc'}",
                        "test_recv_4": "False != -1"
                    }
                },
                "total_run": 5
            },
            "recv_3": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_recv_5": "'addr'"
                    },
                    "TypeError": {
                        "test_recv_3": "list indices must be integers or slices, not str"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_recv_1": "{} != {'addr': 88, 'content': 'abc'}",
                        "test_recv_4": "False != -1"
                    }
                },
                "total_run": 5
            },
            "recv_4": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_recv_4": "'content'",
                        "test_recv_5": "'addr'"
                    },
                    "TypeError": {
                        "test_recv_3": "list indices must be integers or slices, not str"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_recv_1": "{} != {'addr': 88, 'content': 'abc'}"
                    }
                },
                "total_run": 5
            }
        },
        "send": {
            "send_0": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_send_2": "'content'",
                        "test_send_3": "'addr'"
                    },
                    "TypeError": {
                        "test_send_4": "list indices must be integers or slices, not str"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "send_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_send_2": "None != 'info structure is not correct'",
                        "test_send_3": "None != 'info structure is not correct'",
                        "test_send_4": "None != 'info structure is not correct'"
                    }
                },
                "total_run": 5
            },
            "send_2": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_send_2": "'content'",
                        "test_send_3": "'addr'"
                    },
                    "TypeError": {
                        "test_send_4": "list indices must be integers or slices, not str"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "send_3": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_send_2": "'content'",
                        "test_send_3": "'addr'"
                    },
                    "TypeError": {
                        "test_send_4": "list indices must be integers or slices, not str"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "send_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_send_2": "None != 'info structure is not correct'",
                        "test_send_3": "None != 'info structure is not correct'",
                        "test_send_4": "None != 'info structure is not correct'"
                    }
                },
                "total_run": 5
            }
        },
        "show": {
            "show_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "show_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "show_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "show_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "show_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_75": {
        "add_item": {
            "add_item_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_item_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_item_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_item_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_item_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "remove_item": {
            "remove_item_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_item_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_item_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_item_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_item_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "total_price": {
            "total_price_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "total_price_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "total_price_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "total_price_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "total_price_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "view_items": {
            "view_items_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_items_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_items_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_items_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_items_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_76": {
        "add_user": {
            "add_user_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_user_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_user_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_user_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_user_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "all_not_signed_in": {
            "all_not_signed_in_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "all_not_signed_in_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "all_not_signed_in_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "all_not_signed_in_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "all_not_signed_in_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "all_signed_in": {
            "all_signed_in_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_all_signed_in_1": "'bool' object has no attribute 'is_signed_in'",
                        "test_all_signed_in_2": "'bool' object has no attribute 'is_signed_in'",
                        "test_all_signed_in_3": "'bool' object has no attribute 'is_signed_in'",
                        "test_all_signed_in_4": "'bool' object has no attribute 'is_signed_in'",
                        "test_all_signed_in_5": "'bool' object has no attribute 'is_signed_in'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "all_signed_in_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_all_signed_in_1": "False is not true",
                        "test_all_signed_in_3": "False is not true",
                        "test_all_signed_in_4": "False is not true"
                    }
                },
                "total_run": 5
            },
            "all_signed_in_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_all_signed_in_1": "False is not true",
                        "test_all_signed_in_3": "False is not true",
                        "test_all_signed_in_4": "False is not true"
                    }
                },
                "total_run": 5
            },
            "all_signed_in_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_all_signed_in_1": "'bool' object has no attribute 'is_signed_in'",
                        "test_all_signed_in_2": "'bool' object has no attribute 'is_signed_in'",
                        "test_all_signed_in_3": "'bool' object has no attribute 'is_signed_in'",
                        "test_all_signed_in_4": "'bool' object has no attribute 'is_signed_in'",
                        "test_all_signed_in_5": "'bool' object has no attribute 'is_signed_in'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "all_signed_in_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_all_signed_in_1": "'bool' object has no attribute 'is_signed_in'",
                        "test_all_signed_in_2": "'bool' object has no attribute 'is_signed_in'",
                        "test_all_signed_in_3": "'bool' object has no attribute 'is_signed_in'",
                        "test_all_signed_in_4": "'bool' object has no attribute 'is_signed_in'",
                        "test_all_signed_in_5": "'bool' object has no attribute 'is_signed_in'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "check_sign_in": {
            "check_sign_in_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_check_sign_in_1": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_2": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_4": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_5": "'bool' object has no attribute 'is_signed_in'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "check_sign_in_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_check_sign_in_1": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_2": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_4": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_5": "'bool' object has no attribute 'is_signed_in'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "check_sign_in_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_check_sign_in_1": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_2": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_4": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_5": "'bool' object has no attribute 'is_signed_in'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "check_sign_in_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_check_sign_in_1": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_2": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_4": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_5": "'bool' object has no attribute 'is_signed_in'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "check_sign_in_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_check_sign_in_1": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_2": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_4": "'bool' object has no attribute 'is_signed_in'",
                        "test_check_sign_in_5": "'bool' object has no attribute 'is_signed_in'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "sign_in": {
            "sign_in_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sign_in_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sign_in_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sign_in_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sign_in_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_77": {
        "eat_food": {
            "eat_food_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "eat_food_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "eat_food_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "eat_food_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "eat_food_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "move": {
            "move_0": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_move_1": "local variable 'new_head' referenced before assignment",
                        "test_move_2": "local variable 'new_head' referenced before assignment",
                        "test_move_3": "local variable 'new_head' referenced before assignment",
                        "test_move_4": "local variable 'new_head' referenced before assignment",
                        "test_move_5": "local variable 'new_head' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "move_1": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_move_1": "local variable 'new_head' referenced before assignment",
                        "test_move_2": "local variable 'new_head' referenced before assignment",
                        "test_move_3": "local variable 'new_head' referenced before assignment",
                        "test_move_4": "local variable 'new_head' referenced before assignment",
                        "test_move_5": "local variable 'new_head' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "move_2": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_move_1": "local variable 'new_head' referenced before assignment",
                        "test_move_2": "local variable 'new_head' referenced before assignment",
                        "test_move_3": "local variable 'new_head' referenced before assignment",
                        "test_move_4": "local variable 'new_head' referenced before assignment",
                        "test_move_5": "local variable 'new_head' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "move_3": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_move_1": "local variable 'new_head' referenced before assignment",
                        "test_move_2": "local variable 'new_head' referenced before assignment",
                        "test_move_3": "local variable 'new_head' referenced before assignment",
                        "test_move_4": "local variable 'new_head' referenced before assignment",
                        "test_move_5": "local variable 'new_head' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "move_4": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_move_1": "local variable 'new_head' referenced before assignment",
                        "test_move_2": "local variable 'new_head' referenced before assignment",
                        "test_move_3": "local variable 'new_head' referenced before assignment",
                        "test_move_4": "local variable 'new_head' referenced before assignment",
                        "test_move_5": "local variable 'new_head' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "random_food_position": {
            "random_food_position_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "random_food_position_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "random_food_position_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "random_food_position_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "random_food_position_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "reset": {
            "reset_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "reset_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "reset_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "reset_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "reset_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_78": {
        "count_words": {
            "count_words_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_count_words_2": "3 != 2",
                        "test_count_words_3": "2 != 1",
                        "test_count_words_5": "3 != 2"
                    }
                },
                "total_run": 5
            },
            "count_words_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_count_words_2": "3 != 2",
                        "test_count_words_3": "2 != 1",
                        "test_count_words_5": "3 != 2"
                    }
                },
                "total_run": 5
            },
            "count_words_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_count_words_2": "3 != 2",
                        "test_count_words_3": "2 != 1",
                        "test_count_words_5": "3 != 2"
                    }
                },
                "total_run": 5
            },
            "count_words_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_count_words_2": "3 != 2",
                        "test_count_words_3": "2 != 1",
                        "test_count_words_5": "3 != 2"
                    }
                },
                "total_run": 5
            },
            "count_words_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_count_words_2": "3 != 2",
                        "test_count_words_3": "2 != 1",
                        "test_count_words_5": "3 != 2"
                    }
                },
                "total_run": 5
            }
        },
        "process_text_file": {
            "process_text_file_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process_text_file_1": "7 != 4",
                        "test_process_text_file_2": "4 != 5",
                        "test_process_text_file_3": "7 != 5",
                        "test_process_text_file_4": "7 != 4"
                    }
                },
                "total_run": 5
            },
            "process_text_file_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process_text_file_1": "7 != 4",
                        "test_process_text_file_2": "4 != 5",
                        "test_process_text_file_3": "7 != 5",
                        "test_process_text_file_4": "7 != 4"
                    }
                },
                "total_run": 5
            },
            "process_text_file_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process_text_file_1": "7 != 4",
                        "test_process_text_file_2": "4 != 5",
                        "test_process_text_file_3": "7 != 5",
                        "test_process_text_file_4": "7 != 4"
                    }
                },
                "total_run": 5
            },
            "process_text_file_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process_text_file_2": "4 != 5",
                        "test_process_text_file_3": "7 != 5"
                    }
                },
                "total_run": 5
            },
            "process_text_file_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process_text_file_1": "7 != 4",
                        "test_process_text_file_2": "4 != 5",
                        "test_process_text_file_3": "7 != 5",
                        "test_process_text_file_4": "7 != 4"
                    }
                },
                "total_run": 5
            }
        },
        "split_sentences": {
            "split_sentences_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_3": "Lists differ: ['Who is A.', 'B.', 'C.', '?', 'He is a teacher.'] != ['Who is A.B.C.?', 'He is a teacher.']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_3": "Lists differ: ['Who is A.', 'B.', 'C.', '?', 'He is a teacher.'] != ['Who is A.B.C.?', 'He is a teacher.']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_3": "Lists differ: ['Who is A.', 'B.', 'C.', '?', 'He is a teacher.'] != ['Who is A.B.C.?', 'He is a teacher.']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_3": "Lists differ: ['Who is A.', 'B.', 'C.', '?', 'He is a teacher.'] != ['Who is A.B.C.?', 'He is a teacher.']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_3": "Lists differ: ['Who is A.', 'B.', 'C.', '?', 'He is a teacher.'] != ['Who is A.B.C.?', 'He is a teacher.']"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_79": {
        "delete": {
            "delete_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "delete_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "delete_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "delete_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "delete_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "insert": {
            "insert_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "select": {
            "select_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "select_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "select_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "select_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "select_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "select_by_age_range": {
            "select_by_age_range_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_by_age_range_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_by_age_range_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_by_age_range_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_by_age_range_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "select_female_under_age": {
            "select_female_under_age_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_female_under_age_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_female_under_age_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_female_under_age_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_female_under_age_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "update": {
            "update_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "update_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "update_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "update_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "update_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_8": {
        "deposit": {
            "deposit_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "deposit_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "deposit_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "deposit_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "deposit_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "transfer": {
            "transfer_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_transfer_2": "ValueError not raised",
                        "test_transfer_3": "ValueError not raised"
                    }
                },
                "total_run": 5
            },
            "transfer_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_transfer_2": "ValueError not raised",
                        "test_transfer_3": "ValueError not raised"
                    }
                },
                "total_run": 5
            },
            "transfer_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_transfer_2": "ValueError not raised",
                        "test_transfer_3": "ValueError not raised"
                    }
                },
                "total_run": 5
            },
            "transfer_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_transfer_2": "ValueError not raised",
                        "test_transfer_3": "ValueError not raised"
                    }
                },
                "total_run": 5
            },
            "transfer_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_transfer_2": "ValueError not raised",
                        "test_transfer_3": "ValueError not raised"
                    }
                },
                "total_run": 5
            }
        },
        "view_balance": {
            "view_balance_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_balance_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_balance_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_balance_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_balance_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "withdraw": {
            "withdraw_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_80": {
        "delete": {
            "delete_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_delete_6": "'NoneType' object has no attribute 'items'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "delete_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "delete_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_delete_6": "'DELETE FROM items WHERE ' != 'DELETE FROM items'"
                    }
                },
                "total_run": 6
            },
            "delete_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_delete_6": "'DELETE FROM items WHERE ' != 'DELETE FROM items'"
                    }
                },
                "total_run": 6
            },
            "delete_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "insert": {
            "insert_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_insert_1": "'INSERT INTO users (name, age) VALUES (Tom, 30)' != \"INSERT INTO users (name, age) VALUES ('Tom', '30')\"",
                        "test_insert_2": "'INSERT INTO students (name, age) VALUES (Tom, 18)' != \"INSERT INTO students (name, age) VALUES ('Tom', '18')\"",
                        "test_insert_3": "'INSERT INTO items (name, price) VALUES (apple, 1.0)' != \"INSERT INTO items (name, price) VALUES ('apple', '1.0')\"",
                        "test_insert_4": "'INSERT INTO users (name) VALUES (Tom)' != \"INSERT INTO users (name) VALUES ('Tom')\"",
                        "test_insert_5": "'INSERT INTO users (name, age, region) VALUES (Tom, 30, USA)' != \"INSERT INTO users (name, age, region) VALUES ('Tom', '30', 'USA')\""
                    }
                },
                "total_run": 5
            },
            "insert_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_insert_1": "'INSERT INTO users (name, age) VALUES (Tom, 30)' != \"INSERT INTO users (name, age) VALUES ('Tom', '30')\"",
                        "test_insert_2": "'INSERT INTO students (name, age) VALUES (Tom, 18)' != \"INSERT INTO students (name, age) VALUES ('Tom', '18')\"",
                        "test_insert_3": "'INSERT INTO items (name, price) VALUES (apple, 1.0)' != \"INSERT INTO items (name, price) VALUES ('apple', '1.0')\"",
                        "test_insert_4": "'INSERT INTO users (name) VALUES (Tom)' != \"INSERT INTO users (name) VALUES ('Tom')\"",
                        "test_insert_5": "'INSERT INTO users (name, age, region) VALUES (Tom, 30, USA)' != \"INSERT INTO users (name, age, region) VALUES ('Tom', '30', 'USA')\""
                    }
                },
                "total_run": 5
            },
            "insert_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_insert_1": "'INSERT INTO users (name, age) VALUES (Tom, 30)' != \"INSERT INTO users (name, age) VALUES ('Tom', '30')\"",
                        "test_insert_2": "'INSERT INTO students (name, age) VALUES (Tom, 18)' != \"INSERT INTO students (name, age) VALUES ('Tom', '18')\"",
                        "test_insert_3": "'INSERT INTO items (name, price) VALUES (apple, 1.0)' != \"INSERT INTO items (name, price) VALUES ('apple', '1.0')\"",
                        "test_insert_4": "'INSERT INTO users (name) VALUES (Tom)' != \"INSERT INTO users (name) VALUES ('Tom')\"",
                        "test_insert_5": "'INSERT INTO users (name, age, region) VALUES (Tom, 30, USA)' != \"INSERT INTO users (name, age, region) VALUES ('Tom', '30', 'USA')\""
                    }
                },
                "total_run": 5
            },
            "insert_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_insert_1": "'INSERT INTO users (name, age) VALUES (Tom, 30)' != \"INSERT INTO users (name, age) VALUES ('Tom', '30')\"",
                        "test_insert_2": "'INSERT INTO students (name, age) VALUES (Tom, 18)' != \"INSERT INTO students (name, age) VALUES ('Tom', '18')\"",
                        "test_insert_3": "'INSERT INTO items (name, price) VALUES (apple, 1.0)' != \"INSERT INTO items (name, price) VALUES ('apple', '1.0')\"",
                        "test_insert_4": "'INSERT INTO users (name) VALUES (Tom)' != \"INSERT INTO users (name) VALUES ('Tom')\"",
                        "test_insert_5": "'INSERT INTO users (name, age, region) VALUES (Tom, 30, USA)' != \"INSERT INTO users (name, age, region) VALUES ('Tom', '30', 'USA')\""
                    }
                },
                "total_run": 5
            }
        },
        "select": {
            "select_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "select_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "select_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "select_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "select_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            }
        },
        "update": {
            "update_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_update_1": "\"UPDATE users SET age='35' WHERE name='Tom';\" != \"UPDATE users SET age='35' WHERE name='Tom'\"",
                        "test_update_2": "\"UPDATE students SET age='18' WHERE name='Tom';\" != \"UPDATE students SET age='18' WHERE name='Tom'\"",
                        "test_update_3": "\"UPDATE items SET price='1.0' WHERE name='apple';\" != \"UPDATE items SET price='1.0' WHERE name='apple'\"",
                        "test_update_4": "\"UPDATE items SET price='1.0' WHERE name='aaa';\" != \"UPDATE items SET price='1.0' WHERE name='aaa'\"",
                        "test_update_5": "\"UPDATE items SET price='1.0' WHERE name='bbb';\" != \"UPDATE items SET price='1.0' WHERE name='bbb'\"",
                        "test_update_6": "\"UPDATE items SET price='1.0' ;\" != \"UPDATE items SET price='1.0'\""
                    }
                },
                "total_run": 6
            },
            "update_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_update_1": "\"UPDATE users SET age = '35' WHERE name = 'Tom';\" != \"UPDATE users SET age='35' WHERE name='Tom'\"",
                        "test_update_2": "\"UPDATE students SET age = '18' WHERE name = 'Tom';\" != \"UPDATE students SET age='18' WHERE name='Tom'\"",
                        "test_update_3": "\"UPDATE items SET price = '1.0' WHERE name = 'apple';\" != \"UPDATE items SET price='1.0' WHERE name='apple'\"",
                        "test_update_4": "\"UPDATE items SET price = '1.0' WHERE name = 'aaa';\" != \"UPDATE items SET price='1.0' WHERE name='aaa'\"",
                        "test_update_5": "\"UPDATE items SET price = '1.0' WHERE name = 'bbb';\" != \"UPDATE items SET price='1.0' WHERE name='bbb'\"",
                        "test_update_6": "\"UPDATE items SET price = '1.0' ;\" != \"UPDATE items SET price='1.0'\""
                    }
                },
                "total_run": 6
            },
            "update_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_update_1": "\"UPDATE users SET age = '35' WHERE name = 'Tom';\" != \"UPDATE users SET age='35' WHERE name='Tom'\"",
                        "test_update_2": "\"UPDATE students SET age = '18' WHERE name = 'Tom';\" != \"UPDATE students SET age='18' WHERE name='Tom'\"",
                        "test_update_3": "\"UPDATE items SET price = '1.0' WHERE name = 'apple';\" != \"UPDATE items SET price='1.0' WHERE name='apple'\"",
                        "test_update_4": "\"UPDATE items SET price = '1.0' WHERE name = 'aaa';\" != \"UPDATE items SET price='1.0' WHERE name='aaa'\"",
                        "test_update_5": "\"UPDATE items SET price = '1.0' WHERE name = 'bbb';\" != \"UPDATE items SET price='1.0' WHERE name='bbb'\"",
                        "test_update_6": "\"UPDATE items SET price = '1.0' ;\" != \"UPDATE items SET price='1.0'\""
                    }
                },
                "total_run": 6
            },
            "update_3": {
                "compilation": "invalid syntax (ClassEval_80_update_3.py, line 28)",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "update_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_update_1": "\"UPDATE users SET age = '35' WHERE name = 'Tom';\" != \"UPDATE users SET age='35' WHERE name='Tom'\"",
                        "test_update_2": "\"UPDATE students SET age = '18' WHERE name = 'Tom';\" != \"UPDATE students SET age='18' WHERE name='Tom'\"",
                        "test_update_3": "\"UPDATE items SET price = '1.0' WHERE name = 'apple';\" != \"UPDATE items SET price='1.0' WHERE name='apple'\"",
                        "test_update_4": "\"UPDATE items SET price = '1.0' WHERE name = 'aaa';\" != \"UPDATE items SET price='1.0' WHERE name='aaa'\"",
                        "test_update_5": "\"UPDATE items SET price = '1.0' WHERE name = 'bbb';\" != \"UPDATE items SET price='1.0' WHERE name='bbb'\"",
                        "test_update_6": "\"UPDATE items SET price = '1.0' ;\" != \"UPDATE items SET price='1.0'\""
                    }
                },
                "total_run": 6
            }
        }
    },
    "ClassEval_81": {
        "correlation": {
            "correlation_0": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_correlation_5": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_correlation": "0.0015779092702169625 != 1.0",
                        "test_correlation_2": "0.0005067339309040134 != 1.0",
                        "test_correlation_3": "0.16666666666666666 != 1.0",
                        "test_correlation_4": "0.012345679012345678 != None"
                    }
                },
                "total_run": 5
            },
            "correlation_1": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_correlation_5": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_correlation": "0.0015779092702169625 != 1.0",
                        "test_correlation_2": "0.0005067339309040134 != 1.0",
                        "test_correlation_3": "0.16666666666666666 != 1.0",
                        "test_correlation_4": "0.012345679012345678 != None"
                    }
                },
                "total_run": 5
            },
            "correlation_2": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_correlation_5": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_correlation": "0.0015779092702169625 != 1.0",
                        "test_correlation_2": "0.0005067339309040134 != 1.0",
                        "test_correlation_3": "0.16666666666666666 != 1.0",
                        "test_correlation_4": "0.012345679012345678 != None"
                    }
                },
                "total_run": 5
            },
            "correlation_3": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_correlation": "math domain error",
                        "test_correlation_2": "math domain error",
                        "test_correlation_3": "math domain error"
                    },
                    "ZeroDivisionError": {
                        "test_correlation_4": "float division by zero",
                        "test_correlation_5": "float division by zero"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_4": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_correlation_5": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_correlation": "0.0015779092702169625 != 1.0",
                        "test_correlation_2": "0.0005067339309040134 != 1.0",
                        "test_correlation_3": "0.16666666666666666 != 1.0",
                        "test_correlation_4": "0.012345679012345678 != None"
                    }
                },
                "total_run": 5
            }
        },
        "correlation_matrix": {
            "correlation_matrix_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_matrix": "name 'np' is not defined",
                        "test_correlation_matrix_2": "name 'np' is not defined",
                        "test_correlation_matrix_3": "name 'np' is not defined",
                        "test_correlation_matrix_4": "name 'np' is not defined",
                        "test_correlation_matrix_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_matrix_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_matrix": "name 'np' is not defined",
                        "test_correlation_matrix_2": "name 'np' is not defined",
                        "test_correlation_matrix_3": "name 'np' is not defined",
                        "test_correlation_matrix_4": "name 'np' is not defined",
                        "test_correlation_matrix_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_matrix_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_matrix": "name 'np' is not defined",
                        "test_correlation_matrix_2": "name 'np' is not defined",
                        "test_correlation_matrix_3": "name 'np' is not defined",
                        "test_correlation_matrix_4": "name 'np' is not defined",
                        "test_correlation_matrix_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_matrix_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_matrix": "name 'np' is not defined",
                        "test_correlation_matrix_2": "name 'np' is not defined",
                        "test_correlation_matrix_3": "name 'np' is not defined",
                        "test_correlation_matrix_4": "name 'np' is not defined",
                        "test_correlation_matrix_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_matrix_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_matrix": "name 'np' is not defined",
                        "test_correlation_matrix_2": "name 'np' is not defined",
                        "test_correlation_matrix_3": "name 'np' is not defined",
                        "test_correlation_matrix_4": "name 'np' is not defined",
                        "test_correlation_matrix_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "mean": {
            "mean_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mean_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mean_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mean_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mean_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "median": {
            "median_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_median": "median() missing 1 required positional argument: 'data'",
                        "test_median_2": "median() missing 1 required positional argument: 'data'",
                        "test_median_3": "median() missing 1 required positional argument: 'data'",
                        "test_median_4": "median() missing 1 required positional argument: 'data'",
                        "test_median_5": "median() missing 1 required positional argument: 'data'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "median_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_median": "median() missing 1 required positional argument: 'data'",
                        "test_median_2": "median() missing 1 required positional argument: 'data'",
                        "test_median_3": "median() missing 1 required positional argument: 'data'",
                        "test_median_4": "median() missing 1 required positional argument: 'data'",
                        "test_median_5": "median() missing 1 required positional argument: 'data'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "median_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "median_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_median": "median() missing 1 required positional argument: 'data'",
                        "test_median_2": "median() missing 1 required positional argument: 'data'",
                        "test_median_3": "median() missing 1 required positional argument: 'data'",
                        "test_median_4": "median() missing 1 required positional argument: 'data'",
                        "test_median_5": "median() missing 1 required positional argument: 'data'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "median_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_median": "median() missing 1 required positional argument: 'data'",
                        "test_median_2": "median() missing 1 required positional argument: 'data'",
                        "test_median_3": "median() missing 1 required positional argument: 'data'",
                        "test_median_4": "median() missing 1 required positional argument: 'data'",
                        "test_median_5": "median() missing 1 required positional argument: 'data'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "mode": {
            "mode_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_mode": "mode() missing 1 required positional argument: 'data'",
                        "test_mode_2": "mode() missing 1 required positional argument: 'data'",
                        "test_mode_3": "mode() missing 1 required positional argument: 'data'",
                        "test_mode_4": "mode() missing 1 required positional argument: 'data'",
                        "test_mode_5": "mode() missing 1 required positional argument: 'data'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "mode_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mode_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mode_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mode_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "standard_deviation": {
            "standard_deviation_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_standard_deviation": "standard_deviation() missing 1 required positional argument: 'data'",
                        "test_standard_deviation_2": "standard_deviation() missing 1 required positional argument: 'data'",
                        "test_standard_deviation_3": "standard_deviation() missing 1 required positional argument: 'data'",
                        "test_standard_deviation_4": "standard_deviation() missing 1 required positional argument: 'data'",
                        "test_standard_deviation_5": "standard_deviation() missing 1 required positional argument: 'data'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "standard_deviation_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_standard_deviation": "0.816496580927726 != 1.0",
                        "test_standard_deviation_5": "1.1661903789690602 != 1.3038404810405297"
                    }
                },
                "total_run": 5
            },
            "standard_deviation_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_standard_deviation": "0.816496580927726 != 1.0",
                        "test_standard_deviation_5": "1.1661903789690602 != 1.3038404810405297"
                    }
                },
                "total_run": 5
            },
            "standard_deviation_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_standard_deviation": "0.816496580927726 != 1.0",
                        "test_standard_deviation_5": "1.1661903789690602 != 1.3038404810405297"
                    }
                },
                "total_run": 5
            },
            "standard_deviation_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_standard_deviation": "0.816496580927726 != 1.0",
                        "test_standard_deviation_5": "1.1661903789690602 != 1.3038404810405297"
                    }
                },
                "total_run": 5
            }
        },
        "z_score": {
            "z_score_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_z_score_3": "unsupported operand type(s) for /: 'float' and 'NoneType'"
                    },
                    "ZeroDivisionError": {
                        "test_z_score_2": "float division by zero",
                        "test_z_score_5": "float division by zero"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "z_score_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_z_score_3": "unsupported operand type(s) for /: 'float' and 'NoneType'"
                    },
                    "ZeroDivisionError": {
                        "test_z_score_2": "float division by zero",
                        "test_z_score_5": "float division by zero"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "z_score_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_z_score": "name 'statistics' is not defined",
                        "test_z_score_2": "name 'statistics' is not defined",
                        "test_z_score_3": "name 'statistics' is not defined",
                        "test_z_score_4": "name 'statistics' is not defined",
                        "test_z_score_5": "name 'statistics' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "z_score_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_z_score_3": "unsupported operand type(s) for /: 'float' and 'NoneType'"
                    },
                    "ZeroDivisionError": {
                        "test_z_score_2": "float division by zero",
                        "test_z_score_5": "float division by zero"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "z_score_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_z_score": "name 'statistics' is not defined",
                        "test_z_score_2": "name 'statistics' is not defined",
                        "test_z_score_3": "name 'statistics' is not defined",
                        "test_z_score_4": "name 'statistics' is not defined",
                        "test_z_score_5": "name 'statistics' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_82": {
        "add_stock": {
            "add_stock_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_stock_2": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_add_stock_4": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]",
                        "test_add_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[108 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 20}]"
                    }
                },
                "total_run": 5
            },
            "add_stock_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_stock_2": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_add_stock_4": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]",
                        "test_add_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[108 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 20}]"
                    }
                },
                "total_run": 5
            },
            "add_stock_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_stock_2": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_add_stock_4": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]",
                        "test_add_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[108 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 20}]"
                    }
                },
                "total_run": 5
            },
            "add_stock_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_stock_2": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_add_stock_4": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]",
                        "test_add_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[108 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 20}]"
                    }
                },
                "total_run": 5
            },
            "add_stock_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_stock_2": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_add_stock_4": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]",
                        "test_add_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[108 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 20}]"
                    }
                },
                "total_run": 5
            }
        },
        "buy_stock": {
            "buy_stock_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_buy_stock_3": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_buy_stock_4": "Lists differ: [{'na[82 chars]antity': 10}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}] != [{'na[82 chars]antity': 20}]",
                        "test_buy_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]"
                    }
                },
                "total_run": 5
            },
            "buy_stock_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_buy_stock_3": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_buy_stock_4": "Lists differ: [{'na[82 chars]antity': 10}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}] != [{'na[82 chars]antity': 20}]",
                        "test_buy_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]"
                    }
                },
                "total_run": 5
            },
            "buy_stock_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_buy_stock_3": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_buy_stock_4": "Lists differ: [{'na[82 chars]antity': 10}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}] != [{'na[82 chars]antity': 20}]",
                        "test_buy_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]"
                    }
                },
                "total_run": 5
            },
            "buy_stock_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_buy_stock_3": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_buy_stock_4": "Lists differ: [{'na[82 chars]antity': 10}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}] != [{'na[82 chars]antity': 20}]",
                        "test_buy_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]"
                    }
                },
                "total_run": 5
            },
            "buy_stock_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_buy_stock_3": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_buy_stock_4": "Lists differ: [{'na[82 chars]antity': 10}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}] != [{'na[82 chars]antity': 20}]",
                        "test_buy_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]"
                    }
                },
                "total_run": 5
            }
        },
        "calculate_portfolio_value": {
            "calculate_portfolio_value_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_portfolio_value": "1500.0 != 11500.0",
                        "test_calculate_portfolio_value_2": "3000.0 != 13000.0",
                        "test_calculate_portfolio_value_3": "0 != 10000.0",
                        "test_calculate_portfolio_value_4": "0.0 != 10000.0",
                        "test_calculate_portfolio_value_5": "0.0 != 10000.0"
                    }
                },
                "total_run": 5
            },
            "calculate_portfolio_value_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_portfolio_value": "1500.0 != 11500.0",
                        "test_calculate_portfolio_value_2": "3000.0 != 13000.0",
                        "test_calculate_portfolio_value_3": "0 != 10000.0",
                        "test_calculate_portfolio_value_4": "0.0 != 10000.0",
                        "test_calculate_portfolio_value_5": "0.0 != 10000.0"
                    }
                },
                "total_run": 5
            },
            "calculate_portfolio_value_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_portfolio_value": "1500.0 != 11500.0",
                        "test_calculate_portfolio_value_2": "3000.0 != 13000.0",
                        "test_calculate_portfolio_value_3": "0 != 10000.0",
                        "test_calculate_portfolio_value_4": "0.0 != 10000.0",
                        "test_calculate_portfolio_value_5": "0.0 != 10000.0"
                    }
                },
                "total_run": 5
            },
            "calculate_portfolio_value_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_portfolio_value": "1500.0 != 11500.0",
                        "test_calculate_portfolio_value_2": "3000.0 != 13000.0",
                        "test_calculate_portfolio_value_3": "0 != 10000.0",
                        "test_calculate_portfolio_value_4": "0.0 != 10000.0",
                        "test_calculate_portfolio_value_5": "0.0 != 10000.0"
                    }
                },
                "total_run": 5
            },
            "calculate_portfolio_value_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_portfolio_value": "1500.0 != 11500.0",
                        "test_calculate_portfolio_value_2": "3000.0 != 13000.0",
                        "test_calculate_portfolio_value_3": "0 != 10000.0",
                        "test_calculate_portfolio_value_4": "0.0 != 10000.0",
                        "test_calculate_portfolio_value_5": "0.0 != 10000.0"
                    }
                },
                "total_run": 5
            }
        },
        "get_portfolio_summary": {
            "get_portfolio_summary_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_portfolio_summary_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_portfolio_summary_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_portfolio_summary": "Tuples differ: (1500.0, [{'name': 'AAPL', 'value': 1500.0}]) != (11500.0, [{'name': 'AAPL', 'value': 1500.0}])",
                        "test_get_portfolio_summary_2": "Tuples differ: (3000.0, [{'name': 'AAPL', 'value': 1500.0[33 chars].0}]) != (13000.0, [{'name': 'AAPL', 'value': 1500.[34 chars].0}])",
                        "test_get_portfolio_summary_3": "Tuples differ: (0, []) != (10000.0, [])",
                        "test_get_portfolio_summary_4": "Tuples differ: (0.0, [{'name': 'AAPL', 'value': 0.0}]) != (10000.0, [{'name': 'AAPL', 'value': 0.0}])",
                        "test_get_portfolio_summary_5": "Tuples differ: (0.0, [{'name': 'AAPL', 'value': 0.0}]) != (10000.0, [{'name': 'AAPL', 'value': 0.0}])"
                    }
                },
                "total_run": 5
            },
            "get_portfolio_summary_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_portfolio_summary_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_stock_value": {
            "get_stock_value_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_stock_value_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_stock_value_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_stock_value_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_stock_value_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "remove_stock": {
            "remove_stock_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_stock_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_stock_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_stock_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_stock_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "sell_stock": {
            "sell_stock_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sell_stock": "False != True"
                    }
                },
                "total_run": 5
            },
            "sell_stock_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sell_stock": "False != True"
                    }
                },
                "total_run": 5
            },
            "sell_stock_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sell_stock": "False != True"
                    }
                },
                "total_run": 5
            },
            "sell_stock_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sell_stock": "False != True"
                    }
                },
                "total_run": 5
            },
            "sell_stock_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sell_stock": "False != True"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_83": {
        "create_student_table": {
            "create_student_table_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_student_table_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_student_table_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_student_table_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_student_table_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "delete_student_by_name": {
            "delete_student_by_name_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "delete_student_by_name_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "delete_student_by_name_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "delete_student_by_name_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "delete_student_by_name_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            }
        },
        "insert_student": {
            "insert_student_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_student_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_student_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_student_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_student_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "search_student_by_name": {
            "search_student_by_name_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "search_student_by_name_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "search_student_by_name_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "search_student_by_name_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "search_student_by_name_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_84": {
        "process_file": {
            "process_file_0": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_process_file_1": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_2": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_3": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_4": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_5": "[Errno 2] No such file or directory: 'test.txt'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_file_1": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_process_file_1": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_2": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_3": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_4": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_5": "[Errno 2] No such file or directory: 'test.txt'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_file_2": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_process_file_1": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_2": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_3": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_4": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_5": "[Errno 2] No such file or directory: 'test.txt'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_file_3": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_process_file_1": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_2": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_3": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_4": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_5": "[Errno 2] No such file or directory: 'test.txt'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_file_4": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_process_file_1": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_2": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_3": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_4": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_5": "[Errno 2] No such file or directory: 'test.txt'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "read_file": {
            "read_file_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_file_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_file_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_file_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_file_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "read_file_as_json": {
            "read_file_as_json_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_file_as_json_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_file_as_json_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_file_as_json_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_file_as_json_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "write_file": {
            "write_file_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_file_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_file_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_file_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_file_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_85": {
        "auto_check_conflict": {
            "auto_check_conflict_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_auto_check_conflict_1": "False is not true",
                        "test_auto_check_conflict_2": "True is not false",
                        "test_auto_check_conflict_3": "False is not true",
                        "test_auto_check_conflict_4": "True is not false"
                    }
                },
                "total_run": 5
            },
            "auto_check_conflict_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_auto_check_conflict_2": "'heat' != 'cool'",
                        "test_auto_check_conflict_4": "'cool' != 'heat'",
                        "test_auto_check_conflict_5": "True is not false"
                    }
                },
                "total_run": 5
            },
            "auto_check_conflict_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_auto_check_conflict_1": "False is not true",
                        "test_auto_check_conflict_2": "True is not false",
                        "test_auto_check_conflict_3": "False is not true",
                        "test_auto_check_conflict_4": "True is not false"
                    }
                },
                "total_run": 5
            },
            "auto_check_conflict_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_auto_check_conflict_1": "False is not true",
                        "test_auto_check_conflict_2": "True is not false",
                        "test_auto_check_conflict_3": "False is not true",
                        "test_auto_check_conflict_4": "True is not false"
                    }
                },
                "total_run": 5
            },
            "auto_check_conflict_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_auto_check_conflict_1": "False is not true",
                        "test_auto_check_conflict_2": "True is not false",
                        "test_auto_check_conflict_3": "False is not true",
                        "test_auto_check_conflict_4": "True is not false"
                    }
                },
                "total_run": 5
            }
        },
        "auto_set_mode": {
            "auto_set_mode_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "auto_set_mode_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "auto_set_mode_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "auto_set_mode_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "auto_set_mode_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_mode": {
            "get_mode_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_mode_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_mode_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_mode_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_mode_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_target_temperature": {
            "get_target_temperature_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_target_temperature_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_target_temperature_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_target_temperature_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_target_temperature_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "set_mode": {
            "set_mode_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "set_mode_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "set_mode_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "set_mode_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "set_mode_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "set_target_temperature": {
            "set_target_temperature_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "set_target_temperature_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "set_target_temperature_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "set_target_temperature_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "set_target_temperature_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "simulate_operation": {
            "simulate_operation_0": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "simulate_operation_1": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "simulate_operation_2": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "simulate_operation_3": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "simulate_operation_4": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            }
        }
    },
    "ClassEval_86": {
        "check_winner": {
            "check_winner_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_winner_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_winner_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_winner_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_winner_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "is_board_full": {
            "is_board_full_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_board_full_1": "True is not false",
                        "test_is_board_full_3": "True is not false",
                        "test_is_board_full_5": "True is not false"
                    }
                },
                "total_run": 5
            },
            "is_board_full_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_board_full_1": "True is not false",
                        "test_is_board_full_3": "True is not false",
                        "test_is_board_full_5": "True is not false"
                    }
                },
                "total_run": 5
            },
            "is_board_full_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_board_full_1": "True is not false",
                        "test_is_board_full_3": "True is not false",
                        "test_is_board_full_5": "True is not false"
                    }
                },
                "total_run": 5
            },
            "is_board_full_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_board_full_1": "True is not false",
                        "test_is_board_full_3": "True is not false",
                        "test_is_board_full_5": "True is not false"
                    }
                },
                "total_run": 5
            },
            "is_board_full_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_board_full_1": "True is not false",
                        "test_is_board_full_3": "True is not false",
                        "test_is_board_full_5": "True is not false"
                    }
                },
                "total_run": 5
            }
        },
        "make_move": {
            "make_move_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_make_move_1": "None is not true",
                        "test_make_move_2": "None is not true",
                        "test_make_move_3": "None is not true",
                        "test_make_move_4": "None is not true",
                        "test_make_move_5": "None is not true"
                    }
                },
                "total_run": 5
            },
            "make_move_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_make_move_1": "None is not true",
                        "test_make_move_2": "None is not true",
                        "test_make_move_3": "None is not true",
                        "test_make_move_4": "None is not true",
                        "test_make_move_5": "None is not true"
                    }
                },
                "total_run": 5
            },
            "make_move_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_make_move_2": "True is not false"
                    }
                },
                "total_run": 5
            },
            "make_move_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_make_move_1": "None is not true",
                        "test_make_move_2": "None is not true",
                        "test_make_move_3": "None is not true",
                        "test_make_move_4": "None is not true",
                        "test_make_move_5": "None is not true"
                    }
                },
                "total_run": 5
            },
            "make_move_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_make_move_1": "None is not true",
                        "test_make_move_2": "None is not true",
                        "test_make_move_3": "None is not true",
                        "test_make_move_4": "None is not true",
                        "test_make_move_5": "None is not true"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_87": {
        "add_seconds": {
            "add_seconds_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_seconds_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_seconds_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_seconds_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_seconds_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "datetime_to_string": {
            "datetime_to_string_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "datetime_to_string_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "datetime_to_string_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "datetime_to_string_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "datetime_to_string_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_current_date": {
            "get_current_date_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_date_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_date_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_date_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_date_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_current_time": {
            "get_current_time_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_time_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_time_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_time_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_time_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_format_time": {
            "get_format_time_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_format_time_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_format_time_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_format_time_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_format_time_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_minutes": {
            "get_minutes_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_minutes_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_minutes_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_minutes_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_minutes_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "string_to_datetime": {
            "string_to_datetime_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "string_to_datetime_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "string_to_datetime_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "string_to_datetime_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "string_to_datetime_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_88": {
        "cos": {
            "cos_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_cos_1": "name 'math' is not defined",
                        "test_cos_2": "name 'math' is not defined",
                        "test_cos_3": "name 'math' is not defined",
                        "test_cos_4": "name 'math' is not defined",
                        "test_cos_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "cos_1": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_cos_1": "local variable 'radians' referenced before assignment",
                        "test_cos_2": "local variable 'radians' referenced before assignment",
                        "test_cos_3": "local variable 'radians' referenced before assignment",
                        "test_cos_4": "local variable 'radians' referenced before assignment",
                        "test_cos_5": "local variable 'radians' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "cos_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_cos_1": "name 'math' is not defined",
                        "test_cos_2": "name 'math' is not defined",
                        "test_cos_3": "name 'math' is not defined",
                        "test_cos_4": "name 'math' is not defined",
                        "test_cos_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "cos_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_cos_1": "0.9998329794591299 != 0.5",
                        "test_cos_2": "0.9999582439930005 != 0.8660254038 within 7 places (0.13393284019300045 difference)",
                        "test_cos_4": "0.9996242168594817 != 0.0",
                        "test_cos_5": "0.9999060498015505 != 0.7071067812 within 7 places (0.2927992686015505 difference)"
                    }
                },
                "total_run": 5
            },
            "cos_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_cos_1": "0.9989562741712291 != 0.5",
                        "test_cos_2": "0.9993319736282411 != 0.8660254038 within 7 places (0.13330656982824107 difference)",
                        "test_cos_3": "0.9996242168594817 != 1.0",
                        "test_cos_4": "0.9984971498638638 != 0.0",
                        "test_cos_5": "0.999154554130315 != 0.7071067812 within 7 places (0.2920477729303149 difference)"
                    }
                },
                "total_run": 5
            }
        },
        "factorial": {
            "factorial_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "sin": {
            "sin_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_sin_1": "name 'math' is not defined",
                        "test_sin_2": "name 'math' is not defined",
                        "test_sin_3": "name 'math' is not defined",
                        "test_sin_4": "name 'math' is not defined",
                        "test_sin_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "sin_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_sin_1": "name 'math' is not defined",
                        "test_sin_2": "name 'math' is not defined",
                        "test_sin_3": "name 'math' is not defined",
                        "test_sin_4": "name 'math' is not defined",
                        "test_sin_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "sin_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_sin_1": "name 'math' is not defined",
                        "test_sin_2": "name 'math' is not defined",
                        "test_sin_3": "name 'math' is not defined",
                        "test_sin_4": "name 'math' is not defined",
                        "test_sin_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "sin_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_sin_1": "name 'radians' is not defined",
                        "test_sin_2": "name 'radians' is not defined",
                        "test_sin_3": "name 'radians' is not defined",
                        "test_sin_4": "name 'radians' is not defined",
                        "test_sin_5": "name 'radians' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "sin_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sin_1": "0.49999999999999994 != 0.5"
                    }
                },
                "total_run": 5
            }
        },
        "tan": {
            "tan_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_tan_1": "name 'radians' is not defined",
                        "test_tan_2": "name 'radians' is not defined",
                        "test_tan_3": "name 'radians' is not defined",
                        "test_tan_4": "name 'radians' is not defined",
                        "test_tan_5": "name 'radians' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "tan_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_tan_1": "name 'radians' is not defined",
                        "test_tan_2": "name 'radians' is not defined",
                        "test_tan_3": "name 'radians' is not defined",
                        "test_tan_4": "name 'radians' is not defined",
                        "test_tan_5": "name 'radians' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "tan_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_tan_1": "name 'radians' is not defined",
                        "test_tan_2": "name 'radians' is not defined",
                        "test_tan_3": "name 'radians' is not defined",
                        "test_tan_4": "name 'radians' is not defined",
                        "test_tan_5": "name 'radians' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "tan_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_tan_1": "name 'radians' is not defined",
                        "test_tan_2": "name 'radians' is not defined",
                        "test_tan_3": "name 'radians' is not defined",
                        "test_tan_4": "name 'radians' is not defined",
                        "test_tan_5": "name 'radians' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "tan_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_tan_1": "name 'radians' is not defined",
                        "test_tan_2": "name 'radians' is not defined",
                        "test_tan_3": "name 'radians' is not defined",
                        "test_tan_4": "name 'radians' is not defined",
                        "test_tan_5": "name 'radians' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "taylor": {
            "taylor_0": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "taylor_1": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "taylor_2": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "taylor_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_taylor_1": "name 'math' is not defined",
                        "test_taylor_2": "name 'math' is not defined",
                        "test_taylor_3": "name 'math' is not defined",
                        "test_taylor_4": "name 'math' is not defined",
                        "test_taylor_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "taylor_4": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            }
        }
    },
    "ClassEval_89": {
        "_generate_cards": {
            "_generate_cards_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_my_cards_1": "0 != 4",
                        "test_get_my_cards_2": "0 != 4",
                        "test_get_my_cards_3": "0 != 4",
                        "test_get_my_cards_4": "0 != 4",
                        "test_get_my_cards_5": "0 != 4"
                    }
                },
                "total_run": 5
            },
            "_generate_cards_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_my_cards_1": "0 != 4",
                        "test_get_my_cards_2": "0 != 4",
                        "test_get_my_cards_3": "0 != 4",
                        "test_get_my_cards_4": "0 != 4",
                        "test_get_my_cards_5": "0 != 4"
                    }
                },
                "total_run": 5
            },
            "_generate_cards_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_my_cards_1": "0 != 4",
                        "test_get_my_cards_2": "0 != 4",
                        "test_get_my_cards_3": "0 != 4",
                        "test_get_my_cards_4": "0 != 4",
                        "test_get_my_cards_5": "0 != 4"
                    }
                },
                "total_run": 5
            },
            "_generate_cards_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_my_cards_1": "0 != 4",
                        "test_get_my_cards_2": "0 != 4",
                        "test_get_my_cards_3": "0 != 4",
                        "test_get_my_cards_4": "0 != 4",
                        "test_get_my_cards_5": "0 != 4"
                    }
                },
                "total_run": 5
            },
            "_generate_cards_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_my_cards_1": "0 != 4",
                        "test_get_my_cards_2": "0 != 4",
                        "test_get_my_cards_3": "0 != 4",
                        "test_get_my_cards_4": "0 != 4",
                        "test_get_my_cards_5": "0 != 4"
                    }
                },
                "total_run": 5
            }
        },
        "answer": {
            "answer_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "answer_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "answer_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "answer_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "answer_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "evaluate_expression": {
            "evaluate_expression_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "evaluate_expression_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_TwentyFourPointGame": "evaluate_expression() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "evaluate_expression_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "evaluate_expression_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "evaluate_expression_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            }
        },
        "get_my_cards": {
            "get_my_cards_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "get_my_cards_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "get_my_cards_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "get_my_cards_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "get_my_cards_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            }
        }
    },
    "ClassEval_9": {
        "add": {
            "add_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'num2'",
                        "test_add_2": "add() missing 1 required positional argument: 'num2'",
                        "test_add_3": "add() missing 1 required positional argument: 'num2'",
                        "test_add_4": "add() missing 1 required positional argument: 'num2'",
                        "test_add_5": "add() missing 1 required positional argument: 'num2'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'num2'",
                        "test_add_2": "add() missing 1 required positional argument: 'num2'",
                        "test_add_3": "add() missing 1 required positional argument: 'num2'",
                        "test_add_4": "add() missing 1 required positional argument: 'num2'",
                        "test_add_5": "add() missing 1 required positional argument: 'num2'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'num2'",
                        "test_add_2": "add() missing 1 required positional argument: 'num2'",
                        "test_add_3": "add() missing 1 required positional argument: 'num2'",
                        "test_add_4": "add() missing 1 required positional argument: 'num2'",
                        "test_add_5": "add() missing 1 required positional argument: 'num2'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'num2'",
                        "test_add_2": "add() missing 1 required positional argument: 'num2'",
                        "test_add_3": "add() missing 1 required positional argument: 'num2'",
                        "test_add_4": "add() missing 1 required positional argument: 'num2'",
                        "test_add_5": "add() missing 1 required positional argument: 'num2'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "multiply": {
            "multiply_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "multiply_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "multiply_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "multiply_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "multiply_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_multiply": "multiply() missing 1 required positional argument: 'num2'",
                        "test_multiply_2": "multiply() missing 1 required positional argument: 'num2'",
                        "test_multiply_3": "multiply() missing 1 required positional argument: 'num2'",
                        "test_multiply_4": "multiply() missing 1 required positional argument: 'num2'",
                        "test_multiply_5": "multiply() missing 1 required positional argument: 'num2'",
                        "test_multiply_6": "multiply() missing 1 required positional argument: 'num2'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "subtract": {
            "subtract_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "subtract_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "subtract_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "subtract_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_subtract": "subtract() missing 1 required positional argument: 'num2'",
                        "test_subtract_2": "subtract() missing 1 required positional argument: 'num2'",
                        "test_subtract_3": "subtract() missing 1 required positional argument: 'num2'",
                        "test_subtract_4": "subtract() missing 1 required positional argument: 'num2'",
                        "test_subtract_5": "subtract() missing 1 required positional argument: 'num2'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "subtract_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_90": {
        "get_fragment": {
            "get_fragment_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_fragment_2": "'https://www.bing.com/search?pglt=41&q=hu[108 chars]h-CN' != None"
                    }
                },
                "total_run": 5
            },
            "get_fragment_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_fragment_2": "'https://www.bing.com/search?pglt=41&q=hu[108 chars]h-CN' != None"
                    }
                },
                "total_run": 5
            },
            "get_fragment_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_fragment_2": "'https://www.bing.com/search?pglt=41&q=hu[108 chars]h-CN' != None"
                    }
                },
                "total_run": 5
            },
            "get_fragment_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_fragment_2": "'https://www.bing.com/search?pglt=41&q=hu[108 chars]h-CN' != None"
                    }
                },
                "total_run": 5
            },
            "get_fragment_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_fragment_2": "'https://www.bing.com/search?pglt=41&q=hu[108 chars]h-CN' != None"
                    }
                },
                "total_run": 5
            }
        },
        "get_host": {
            "get_host_0": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_get_host_6": "list index out of range",
                        "test_get_host_7": "list index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_get_host_1": "'s?wd=aaa&rsv_spt=1#page' != 'www.baidu.com'",
                        "test_get_host_2": "'search?pglt=41&q=humaneval&cvid=4dc2da2bb[86 chars]h-CN' != 'www.bing.com'",
                        "test_get_host_3": "'openai' != 'github.com'",
                        "test_get_host_4": "'openai' != 'aaa.com'",
                        "test_get_host_5": "'openai' != 'bbb.com'",
                        "test_get_host_8": "'' != 'bbb.com'"
                    }
                },
                "total_run": 8
            },
            "get_host_1": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_get_host_6": "list index out of range",
                        "test_get_host_7": "list index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_get_host_1": "'s?wd=aaa&rsv_spt=1#page' != 'www.baidu.com'",
                        "test_get_host_2": "'search?pglt=41&q=humaneval&cvid=4dc2da2bb[86 chars]h-CN' != 'www.bing.com'",
                        "test_get_host_3": "'openai' != 'github.com'",
                        "test_get_host_4": "'openai' != 'aaa.com'",
                        "test_get_host_5": "'openai' != 'bbb.com'",
                        "test_get_host_8": "'' != 'bbb.com'"
                    }
                },
                "total_run": 8
            },
            "get_host_2": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_get_host_6": "list index out of range",
                        "test_get_host_7": "list index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_get_host_1": "'s?wd=aaa&rsv_spt=1#page' != 'www.baidu.com'",
                        "test_get_host_2": "'search?pglt=41&q=humaneval&cvid=4dc2da2bb[86 chars]h-CN' != 'www.bing.com'",
                        "test_get_host_3": "'openai' != 'github.com'",
                        "test_get_host_4": "'openai' != 'aaa.com'",
                        "test_get_host_5": "'openai' != 'bbb.com'",
                        "test_get_host_8": "'' != 'bbb.com'"
                    }
                },
                "total_run": 8
            },
            "get_host_3": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_get_host_6": "list index out of range",
                        "test_get_host_7": "list index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_get_host_1": "'s?wd=aaa&rsv_spt=1#page' != 'www.baidu.com'",
                        "test_get_host_2": "'search?pglt=41&q=humaneval&cvid=4dc2da2bb[86 chars]h-CN' != 'www.bing.com'",
                        "test_get_host_3": "'openai' != 'github.com'",
                        "test_get_host_4": "'openai' != 'aaa.com'",
                        "test_get_host_5": "'openai' != 'bbb.com'",
                        "test_get_host_8": "'' != 'bbb.com'"
                    }
                },
                "total_run": 8
            },
            "get_host_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_get_host_6": "list index out of range",
                        "test_get_host_7": "list index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_get_host_1": "'s?wd=aaa&rsv_spt=1#page' != 'www.baidu.com'",
                        "test_get_host_2": "'search?pglt=41&q=humaneval&cvid=4dc2da2bb[86 chars]h-CN' != 'www.bing.com'",
                        "test_get_host_3": "'openai' != 'github.com'",
                        "test_get_host_4": "'openai' != 'aaa.com'",
                        "test_get_host_5": "'openai' != 'bbb.com'",
                        "test_get_host_8": "'' != 'bbb.com'"
                    }
                },
                "total_run": 8
            }
        },
        "get_path": {
            "get_path_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_path_1": "'www.baidu.com' != '/s?wd=aaa&rsv_spt=1#page'",
                        "test_get_path_2": "'www.bing.com' != '/search?pglt=41&q=humaneval&cvid=4dc2da2b[87 chars]h-CN'",
                        "test_get_path_3": "'github.com' != '/openai/human-eval'",
                        "test_get_path_4": "'github.com' != '/aaa/human-eval'",
                        "test_get_path_5": "'github.com' != '/bbb/human-eval'"
                    }
                },
                "total_run": 6
            },
            "get_path_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "get_path_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "get_path_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "get_path_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "get_query_params": {
            "get_query_params_0": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_get_query_params_3": "not enough values to unpack (expected 2, got 1)",
                        "test_get_query_params_6": "not enough values to unpack (expected 2, got 1)"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_get_query_params_1": "{'wd': 'aaa', 'rsv_spt': '1#page'} != {'wd': 'aaa', 'rsv_spt': '1'}",
                        "test_get_query_params_2": "{'pgl[84 chars].0.0l7j69i61j69i60.10008j0j1', 'FORM': 'ANNTA1', 'PC': 'U531#'} != {'pgl[84 chars].0.0l7j69i61j69i60.10008j0j1', 'FORM': 'ANNTA1', 'PC': 'U531'}",
                        "test_get_query_params_4": "{'wd': 'bbb', 'rsv_spt': '1#page'} != {'wd': 'bbb', 'rsv_spt': '1'}",
                        "test_get_query_params_5": "{'wd': 'ccc', 'rsv_spt': '1#page'} != {'wd': 'ccc', 'rsv_spt': '1'}"
                    }
                },
                "total_run": 6
            },
            "get_query_params_1": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_get_query_params_3": "not enough values to unpack (expected 2, got 1)",
                        "test_get_query_params_6": "not enough values to unpack (expected 2, got 1)"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_get_query_params_1": "{'wd': 'aaa', 'rsv_spt': '1#page'} != {'wd': 'aaa', 'rsv_spt': '1'}",
                        "test_get_query_params_2": "{'pgl[84 chars].0.0l7j69i61j69i60.10008j0j1', 'FORM': 'ANNTA1', 'PC': 'U531#'} != {'pgl[84 chars].0.0l7j69i61j69i60.10008j0j1', 'FORM': 'ANNTA1', 'PC': 'U531'}",
                        "test_get_query_params_4": "{'wd': 'bbb', 'rsv_spt': '1#page'} != {'wd': 'bbb', 'rsv_spt': '1'}",
                        "test_get_query_params_5": "{'wd': 'ccc', 'rsv_spt': '1#page'} != {'wd': 'ccc', 'rsv_spt': '1'}"
                    }
                },
                "total_run": 6
            },
            "get_query_params_2": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_get_query_params_3": "not enough values to unpack (expected 2, got 1)",
                        "test_get_query_params_6": "not enough values to unpack (expected 2, got 1)"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_get_query_params_1": "{'wd': 'aaa', 'rsv_spt': '1#page'} != {'wd': 'aaa', 'rsv_spt': '1'}",
                        "test_get_query_params_2": "{'pgl[84 chars].0.0l7j69i61j69i60.10008j0j1', 'FORM': 'ANNTA1', 'PC': 'U531#'} != {'pgl[84 chars].0.0l7j69i61j69i60.10008j0j1', 'FORM': 'ANNTA1', 'PC': 'U531'}",
                        "test_get_query_params_4": "{'wd': 'bbb', 'rsv_spt': '1#page'} != {'wd': 'bbb', 'rsv_spt': '1'}",
                        "test_get_query_params_5": "{'wd': 'ccc', 'rsv_spt': '1#page'} != {'wd': 'ccc', 'rsv_spt': '1'}"
                    }
                },
                "total_run": 6
            },
            "get_query_params_3": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_get_query_params_3": "not enough values to unpack (expected 2, got 1)",
                        "test_get_query_params_6": "not enough values to unpack (expected 2, got 1)"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_get_query_params_1": "{'wd': 'aaa', 'rsv_spt': '1#page'} != {'wd': 'aaa', 'rsv_spt': '1'}",
                        "test_get_query_params_2": "{'pgl[84 chars].0.0l7j69i61j69i60.10008j0j1', 'FORM': 'ANNTA1', 'PC': 'U531#'} != {'pgl[84 chars].0.0l7j69i61j69i60.10008j0j1', 'FORM': 'ANNTA1', 'PC': 'U531'}",
                        "test_get_query_params_4": "{'wd': 'bbb', 'rsv_spt': '1#page'} != {'wd': 'bbb', 'rsv_spt': '1'}",
                        "test_get_query_params_5": "{'wd': 'ccc', 'rsv_spt': '1#page'} != {'wd': 'ccc', 'rsv_spt': '1'}"
                    }
                },
                "total_run": 6
            },
            "get_query_params_4": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_get_query_params_3": "not enough values to unpack (expected 2, got 1)",
                        "test_get_query_params_6": "not enough values to unpack (expected 2, got 1)"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_get_query_params_1": "{'wd': 'aaa', 'rsv_spt': '1#page'} != {'wd': 'aaa', 'rsv_spt': '1'}",
                        "test_get_query_params_2": "{'pgl[84 chars].0.0l7j69i61j69i60.10008j0j1', 'FORM': 'ANNTA1', 'PC': 'U531#'} != {'pgl[84 chars].0.0l7j69i61j69i60.10008j0j1', 'FORM': 'ANNTA1', 'PC': 'U531'}",
                        "test_get_query_params_4": "{'wd': 'bbb', 'rsv_spt': '1#page'} != {'wd': 'bbb', 'rsv_spt': '1'}",
                        "test_get_query_params_5": "{'wd': 'ccc', 'rsv_spt': '1#page'} != {'wd': 'ccc', 'rsv_spt': '1'}"
                    }
                },
                "total_run": 6
            }
        },
        "get_scheme": {
            "get_scheme_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_scheme_6": "'' is not None"
                    }
                },
                "total_run": 6
            },
            "get_scheme_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_scheme_6": "'' is not None"
                    }
                },
                "total_run": 6
            },
            "get_scheme_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_scheme_6": "'' is not None"
                    }
                },
                "total_run": 6
            },
            "get_scheme_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_scheme_6": "'' is not None"
                    }
                },
                "total_run": 6
            },
            "get_scheme_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_scheme_6": "'' is not None"
                    }
                },
                "total_run": 6
            }
        }
    },
    "ClassEval_91": {
        "add": {
            "add_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "fix_path": {
            "fix_path_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "fix_path_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "fix_path_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "fix_path_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "fix_path_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "parse": {
            "parse_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_1": "False != True",
                        "test_parse_3": "False != True",
                        "test_parse_7": "False != True"
                    }
                },
                "total_run": 7
            },
            "parse_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_1": "False != True",
                        "test_parse_3": "False != True",
                        "test_parse_7": "False != True"
                    }
                },
                "total_run": 7
            },
            "parse_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_1": "False != True",
                        "test_parse_3": "False != True",
                        "test_parse_7": "False != True"
                    }
                },
                "total_run": 7
            },
            "parse_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_1": "False != True",
                        "test_parse_3": "False != True",
                        "test_parse_7": "False != True"
                    }
                },
                "total_run": 7
            },
            "parse_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_1": "False != True",
                        "test_parse_3": "False != True",
                        "test_parse_6": "Lists differ: [''] != []",
                        "test_parse_7": "Lists differ: [''] != []"
                    }
                },
                "total_run": 7
            }
        }
    },
    "ClassEval_92": {
        "delete_user_by_username": {
            "delete_user_by_username_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "delete_user_by_username_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "delete_user_by_username_2": {
                "compilation": "success",
                "errors": {
                    "sqlite3.ProgrammingError": {
                        "test_delete_user_by_username_1": "Cannot operate on a closed database.",
                        "test_delete_user_by_username_2": "Cannot operate on a closed database.",
                        "test_delete_user_by_username_3": "Cannot operate on a closed database.",
                        "test_delete_user_by_username_4": "Cannot operate on a closed database.",
                        "test_delete_user_by_username_5": "Cannot operate on a closed database."
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "delete_user_by_username_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "delete_user_by_username_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "insert_user": {
            "insert_user_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_user_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_user_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_user_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_user_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "search_user_by_username": {
            "search_user_by_username_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_user_by_username_1": "('user1', 'pass1') != 'user1'",
                        "test_search_user_by_username_2": "('user2', 'pass2') != 'user2'",
                        "test_search_user_by_username_3": "('user3', 'pass3') != 'user3'",
                        "test_search_user_by_username_4": "('user4', 'pass4') != 'user4'",
                        "test_search_user_by_username_5": "('user5', 'pass5') != 'user5'"
                    }
                },
                "total_run": 5
            },
            "search_user_by_username_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_user_by_username_1": "('user1', 'pass1') != 'user1'",
                        "test_search_user_by_username_2": "('user2', 'pass2') != 'user2'",
                        "test_search_user_by_username_3": "('user3', 'pass3') != 'user3'",
                        "test_search_user_by_username_4": "('user4', 'pass4') != 'user4'",
                        "test_search_user_by_username_5": "('user5', 'pass5') != 'user5'"
                    }
                },
                "total_run": 5
            },
            "search_user_by_username_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_user_by_username_1": "('user1', 'pass1') != 'user1'",
                        "test_search_user_by_username_2": "('user2', 'pass2') != 'user2'",
                        "test_search_user_by_username_3": "('user3', 'pass3') != 'user3'",
                        "test_search_user_by_username_4": "('user4', 'pass4') != 'user4'",
                        "test_search_user_by_username_5": "('user5', 'pass5') != 'user5'"
                    }
                },
                "total_run": 5
            },
            "search_user_by_username_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_user_by_username_1": "('user1', 'pass1') != 'user1'",
                        "test_search_user_by_username_2": "('user2', 'pass2') != 'user2'",
                        "test_search_user_by_username_3": "('user3', 'pass3') != 'user3'",
                        "test_search_user_by_username_4": "('user4', 'pass4') != 'user4'",
                        "test_search_user_by_username_5": "('user5', 'pass5') != 'user5'"
                    }
                },
                "total_run": 5
            },
            "search_user_by_username_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_user_by_username_1": "('user1', 'pass1') != 'user1'",
                        "test_search_user_by_username_2": "('user2', 'pass2') != 'user2'",
                        "test_search_user_by_username_3": "('user3', 'pass3') != 'user3'",
                        "test_search_user_by_username_4": "('user4', 'pass4') != 'user4'",
                        "test_search_user_by_username_5": "('user5', 'pass5') != 'user5'"
                    }
                },
                "total_run": 5
            }
        },
        "validate_user_login": {
            "validate_user_login_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "validate_user_login_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "validate_user_login_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "validate_user_login_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "validate_user_login_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_93": {
        "compute_idf_weight_dict": {
            "compute_idf_weight_dict_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_compute_idf_weight_dict_1": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_2": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_3": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_4": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "compute_idf_weight_dict_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_compute_idf_weight_dict_1": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_2": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_3": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_4": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "compute_idf_weight_dict_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_compute_idf_weight_dict_1": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_2": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_3": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_4": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "compute_idf_weight_dict_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_compute_idf_weight_dict_1": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_2": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_3": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_4": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "compute_idf_weight_dict_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_compute_idf_weight_dict_1": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_2": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_3": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_4": "name 'math' is not defined",
                        "test_compute_idf_weight_dict_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "cosine_similarities": {
            "cosine_similarities_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "cosine_similarities_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "cosine_similarities_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "cosine_similarities_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "cosine_similarities_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "n_similarity": {
            "n_similarity_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_n_similarity_1": "module 'gensim.matutils' has no attribute 'cosine_similarity'",
                        "test_n_similarity_2": "module 'gensim.matutils' has no attribute 'cosine_similarity'",
                        "test_n_similarity_3": "module 'gensim.matutils' has no attribute 'cosine_similarity'",
                        "test_n_similarity_4": "module 'gensim.matutils' has no attribute 'cosine_similarity'",
                        "test_n_similarity_5": "module 'gensim.matutils' has no attribute 'cosine_similarity'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "n_similarity_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_n_similarity_1": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_2": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_3": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_4": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_5": "name 'cosine_similarity' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "n_similarity_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_n_similarity_1": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_2": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_3": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_4": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_5": "name 'cosine_similarity' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "n_similarity_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_n_similarity_1": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_2": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_3": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_4": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_5": "name 'cosine_similarity' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "n_similarity_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_n_similarity_1": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_2": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_3": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_4": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_5": "name 'cosine_similarity' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "similarity": {
            "similarity_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_similarity_2": "nan != 0.0 within 7 places (nan difference)",
                        "test_similarity_5": "nan != 0.0 within 7 places (nan difference)"
                    }
                },
                "total_run": 5
            },
            "similarity_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_similarity_2": "nan != 0.0 within 7 places (nan difference)",
                        "test_similarity_5": "nan != 0.0 within 7 places (nan difference)"
                    }
                },
                "total_run": 5
            },
            "similarity_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_similarity_2": "nan != 0.0 within 7 places (nan difference)",
                        "test_similarity_5": "nan != 0.0 within 7 places (nan difference)"
                    }
                },
                "total_run": 5
            },
            "similarity_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_similarity_2": "nan != 0.0 within 7 places (nan difference)",
                        "test_similarity_5": "nan != 0.0 within 7 places (nan difference)"
                    }
                },
                "total_run": 5
            },
            "similarity_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_similarity_2": "nan != 0.0 within 7 places (nan difference)",
                        "test_similarity_5": "nan != 0.0 within 7 places (nan difference)"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_94": {
        "add_item": {
            "add_item_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_item_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_item_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_item_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_item_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "display_items": {
            "display_items_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_items": "['Coke - $1.25 [10]'] != 'Coke - $1.25 [10]'",
                        "test_display_items_3": "['Coke - $1.25 [10]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [10]\\nPizza - $1.25 [10]'",
                        "test_display_items_4": "['Coke - $1.25 [0]'] != 'Coke - $1.25 [0]'",
                        "test_display_items_5": "['Coke - $1.25 [0]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [0]\\nPizza - $1.25 [10]'"
                    }
                },
                "total_run": 5
            },
            "display_items_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_items": "['Coke - $1.25 [10]'] != 'Coke - $1.25 [10]'",
                        "test_display_items_3": "['Coke - $1.25 [10]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [10]\\nPizza - $1.25 [10]'",
                        "test_display_items_4": "['Coke - $1.25 [0]'] != 'Coke - $1.25 [0]'",
                        "test_display_items_5": "['Coke - $1.25 [0]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [0]\\nPizza - $1.25 [10]'"
                    }
                },
                "total_run": 5
            },
            "display_items_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_items": "['Coke - $1.25 [10]'] != 'Coke - $1.25 [10]'",
                        "test_display_items_3": "['Coke - $1.25 [10]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [10]\\nPizza - $1.25 [10]'",
                        "test_display_items_4": "['Coke - $1.25 [0]'] != 'Coke - $1.25 [0]'",
                        "test_display_items_5": "['Coke - $1.25 [0]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [0]\\nPizza - $1.25 [10]'"
                    }
                },
                "total_run": 5
            },
            "display_items_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_items": "['Coke - $1.25 [10]'] != 'Coke - $1.25 [10]'",
                        "test_display_items_3": "['Coke - $1.25 [10]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [10]\\nPizza - $1.25 [10]'",
                        "test_display_items_4": "['Coke - $1.25 [0]'] != 'Coke - $1.25 [0]'",
                        "test_display_items_5": "['Coke - $1.25 [0]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [0]\\nPizza - $1.25 [10]'"
                    }
                },
                "total_run": 5
            },
            "display_items_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_items": "None != 'Coke - $1.25 [10]'",
                        "test_display_items_3": "None != 'Coke - $1.25 [10]\\nPizza - $1.25 [10]'",
                        "test_display_items_4": "None != 'Coke - $1.25 [0]'",
                        "test_display_items_5": "None != 'Coke - $1.25 [0]\\nPizza - $1.25 [10]'"
                    }
                },
                "total_run": 5
            }
        },
        "insert_coin": {
            "insert_coin_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_coin_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_coin_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_coin_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_coin_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "purchase_item": {
            "purchase_item_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_purchase_item_3": "-1.25 != False"
                    }
                },
                "total_run": 5
            },
            "purchase_item_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_purchase_item_3": "-1.25 != False"
                    }
                },
                "total_run": 5
            },
            "purchase_item_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_purchase_item_3": "-1.25 != False"
                    }
                },
                "total_run": 5
            },
            "purchase_item_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_purchase_item_3": "-1.25 != False"
                    }
                },
                "total_run": 5
            },
            "purchase_item_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_purchase_item_3": "-1.25 != False"
                    }
                },
                "total_run": 5
            }
        },
        "restock_item": {
            "restock_item_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "restock_item_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "restock_item_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "restock_item_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "restock_item_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_95": {
        "add_product": {
            "add_product_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_product_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_product_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_product_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "add_product_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "change_order_status": {
            "change_order_status_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "change_order_status_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "change_order_status_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "change_order_status_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "change_order_status_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "create_order": {
            "create_order_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_create_order_1": "'<' not supported between instances of 'dict' and 'int'",
                        "test_create_order_2": "'<' not supported between instances of 'dict' and 'int'",
                        "test_create_order_3": "'<' not supported between instances of 'dict' and 'int'",
                        "test_create_order_4": "'<' not supported between instances of 'dict' and 'int'",
                        "test_create_order_5": "'<' not supported between instances of 'dict' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "create_order_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_order_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_order_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_create_order_1": "'<' not supported between instances of 'dict' and 'int'",
                        "test_create_order_2": "'<' not supported between instances of 'dict' and 'int'",
                        "test_create_order_3": "'<' not supported between instances of 'dict' and 'int'",
                        "test_create_order_4": "'<' not supported between instances of 'dict' and 'int'",
                        "test_create_order_5": "'<' not supported between instances of 'dict' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "create_order_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_create_order_1": "'<' not supported between instances of 'dict' and 'int'",
                        "test_create_order_2": "'<' not supported between instances of 'dict' and 'int'",
                        "test_create_order_3": "'<' not supported between instances of 'dict' and 'int'",
                        "test_create_order_4": "'<' not supported between instances of 'dict' and 'int'",
                        "test_create_order_5": "'<' not supported between instances of 'dict' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "get_product_quantity": {
            "get_product_quantity_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_product_quantity_1": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_3": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_4": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_5": "'dict' object has no attribute 'quantity'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_product_quantity_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_product_quantity_1": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_3": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_4": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_5": "'dict' object has no attribute 'quantity'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_product_quantity_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_product_quantity_1": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_3": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_4": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_5": "'dict' object has no attribute 'quantity'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_product_quantity_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_product_quantity_1": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_3": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_4": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_5": "'dict' object has no attribute 'quantity'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_product_quantity_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_product_quantity_1": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_3": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_4": "'dict' object has no attribute 'quantity'",
                        "test_get_product_quantity_5": "'dict' object has no attribute 'quantity'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "track_order": {
            "track_order_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_track_order_1": "no such table: orders",
                        "test_track_order_3": "no such table: orders",
                        "test_track_order_4": "no such table: orders",
                        "test_track_order_5": "no such table: orders"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "track_order_1": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_track_order_1": "no such table: orders",
                        "test_track_order_2": "no such table: orders",
                        "test_track_order_3": "no such table: orders",
                        "test_track_order_4": "no such table: orders",
                        "test_track_order_5": "no such table: orders"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "track_order_2": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_track_order_1": "no such table: orders",
                        "test_track_order_2": "no such table: orders",
                        "test_track_order_3": "no such table: orders",
                        "test_track_order_4": "no such table: orders",
                        "test_track_order_5": "no such table: orders"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "track_order_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_track_order_1": "'dict' object has no attribute 'status'",
                        "test_track_order_3": "'dict' object has no attribute 'status'",
                        "test_track_order_4": "'dict' object has no attribute 'status'",
                        "test_track_order_5": "'dict' object has no attribute 'status'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "track_order_4": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_track_order_1": "no such table: orders",
                        "test_track_order_2": "no such table: orders",
                        "test_track_order_3": "no such table: orders",
                        "test_track_order_4": "no such table: orders",
                        "test_track_order_5": "no such table: orders"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "update_product_quantity": {
            "update_product_quantity_0": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_update_product_quantity_3": "local variable 'product' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "update_product_quantity_1": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_update_product_quantity_3": "local variable 'product_details' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "update_product_quantity_2": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_update_product_quantity_3": "local variable 'product' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "update_product_quantity_3": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_update_product_quantity_3": "local variable 'product' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "update_product_quantity_4": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_update_product_quantity_1": "'product_id'",
                        "test_update_product_quantity_2": "'product_id'",
                        "test_update_product_quantity_4": "'product_id'",
                        "test_update_product_quantity_5": "'product_id'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_update_product_quantity_3": "{1: {'product_id': 1, 'quantity': -5}} != {}"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_96": {
        "celsius_to_fahrenheit": {
            "celsius_to_fahrenheit_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "celsius_to_fahrenheit_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "celsius_to_fahrenheit_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "celsius_to_fahrenheit_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "celsius_to_fahrenheit_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "fahrenheit_to_celsius": {
            "fahrenheit_to_celsius_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "fahrenheit_to_celsius_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "fahrenheit_to_celsius_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "fahrenheit_to_celsius_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "fahrenheit_to_celsius_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "query": {
            "query_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_query_3": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_4": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given",
                        "test_query_5": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given",
                        "test_query_6": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_query_2": "None != False"
                    }
                },
                "total_run": 6
            },
            "query_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_query": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_3": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given",
                        "test_query_4": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_5": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_6": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_query_2": "(None, None) != False"
                    }
                },
                "total_run": 6
            },
            "query_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_query_3": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given",
                        "test_query_4": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_5": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_6": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_query_2": "None != False"
                    }
                },
                "total_run": 6
            },
            "query_3": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_query_2": "'Shanghai'"
                    },
                    "TypeError": {
                        "test_query_3": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_4": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given",
                        "test_query_5": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given",
                        "test_query_6": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "query_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_query_3": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_6": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_query_2": "(None, None) != False",
                        "test_query_4": "Tuples differ: (73.4, 'cloudy') != (23.000000000000004, 'cloudy')",
                        "test_query_5": "Tuples differ: (80.6, 'sunny') != (26.999999999999996, 'sunny')"
                    }
                },
                "total_run": 6
            }
        },
        "set_city": {
            "set_city_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "set_city_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "set_city_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "set_city_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "set_city_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_97": {
        "is_valid_input": {
            "is_valid_input_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_valid_input": "False is not true",
                        "test_is_valid_input2": "False is not true",
                        "test_is_valid_input3": "False is not true",
                        "test_is_valid_input5": "False is not true",
                        "test_is_valid_input6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "is_valid_input_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_valid_input": "False is not true",
                        "test_is_valid_input2": "False is not true",
                        "test_is_valid_input3": "False is not true",
                        "test_is_valid_input5": "False is not true",
                        "test_is_valid_input6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "is_valid_input_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_valid_input": "False is not true",
                        "test_is_valid_input2": "False is not true",
                        "test_is_valid_input3": "False is not true",
                        "test_is_valid_input5": "False is not true",
                        "test_is_valid_input6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "is_valid_input_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_valid_input": "False is not true",
                        "test_is_valid_input2": "False is not true",
                        "test_is_valid_input3": "False is not true",
                        "test_is_valid_input5": "False is not true",
                        "test_is_valid_input6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "is_valid_input_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_valid_input": "False is not true",
                        "test_is_valid_input2": "False is not true",
                        "test_is_valid_input3": "False is not true",
                        "test_is_valid_input5": "False is not true",
                        "test_is_valid_input6": "False is not true"
                    }
                },
                "total_run": 6
            }
        },
        "text2int": {
            "text2int_0": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_text2int": "'thirty-two'",
                        "test_text2int2": "'hundred'",
                        "test_text2int3": "'thousand'",
                        "test_text2int4": "'hundred'",
                        "test_text2int5": "'million'",
                        "test_text2int6": "'million'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "text2int_1": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_text2int": "'thirty-two'",
                        "test_text2int2": "'hundred'",
                        "test_text2int3": "'thousand'",
                        "test_text2int4": "'hundred'",
                        "test_text2int5": "'million'",
                        "test_text2int6": "'million'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "text2int_2": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_text2int": "'thirty-two'",
                        "test_text2int2": "'hundred'",
                        "test_text2int3": "'thousand'",
                        "test_text2int4": "'hundred'",
                        "test_text2int5": "'million'",
                        "test_text2int6": "'million'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "text2int_3": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_text2int": "'thirty-two'",
                        "test_text2int2": "'hundred'",
                        "test_text2int3": "'thousand'",
                        "test_text2int4": "'hundred'",
                        "test_text2int5": "'million'",
                        "test_text2int6": "'million'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "text2int_4": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_text2int": "'thirty-two'",
                        "test_text2int2": "'hundred'",
                        "test_text2int3": "'thousand'",
                        "test_text2int4": "'hundred'",
                        "test_text2int5": "'million'",
                        "test_text2int6": "'million'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_98": {
        "find_element": {
            "find_element_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "find_element_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "find_element_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "find_element_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "find_element_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "process_xml_data": {
            "process_xml_data_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process_xml_data_1": "'apple' != 'APPLE'",
                        "test_process_xml_data_2": "'apple' != 'APPLE'",
                        "test_process_xml_data_3": "'apple' != 'APPLE'",
                        "test_process_xml_data_4": "'apple' != 'APPLE'",
                        "test_process_xml_data_5": "'aaa' != 'AAA'"
                    }
                },
                "total_run": 5
            },
            "process_xml_data_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process_xml_data_1": "'apple' != 'APPLE'",
                        "test_process_xml_data_2": "'apple' != 'APPLE'",
                        "test_process_xml_data_3": "'apple' != 'APPLE'",
                        "test_process_xml_data_4": "'apple' != 'APPLE'",
                        "test_process_xml_data_5": "'aaa' != 'AAA'"
                    }
                },
                "total_run": 5
            },
            "process_xml_data_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process_xml_data_1": "'apple' != 'APPLE'",
                        "test_process_xml_data_2": "'apple' != 'APPLE'",
                        "test_process_xml_data_3": "'apple' != 'APPLE'",
                        "test_process_xml_data_4": "'apple' != 'APPLE'",
                        "test_process_xml_data_5": "'aaa' != 'AAA'"
                    }
                },
                "total_run": 5
            },
            "process_xml_data_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process_xml_data_1": "'apple' != 'APPLE'",
                        "test_process_xml_data_2": "'apple' != 'APPLE'",
                        "test_process_xml_data_3": "'apple' != 'APPLE'",
                        "test_process_xml_data_4": "'apple' != 'APPLE'",
                        "test_process_xml_data_5": "'aaa' != 'AAA'"
                    }
                },
                "total_run": 5
            },
            "process_xml_data_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_process_xml_data_1": "'apple' != 'APPLE'",
                        "test_process_xml_data_2": "'apple' != 'APPLE'",
                        "test_process_xml_data_3": "'apple' != 'APPLE'",
                        "test_process_xml_data_4": "'apple' != 'APPLE'",
                        "test_process_xml_data_5": "'aaa' != 'AAA'"
                    }
                },
                "total_run": 5
            }
        },
        "read_xml": {
            "read_xml_0": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_read_xml_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "read_xml_1": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_read_xml_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "read_xml_2": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_read_xml_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "read_xml_3": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_read_xml_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "read_xml_4": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_read_xml_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "write_xml": {
            "write_xml_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_write_xml_1": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_2": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_3": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_4": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_5": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_6": "'XMLProcessor' object has no attribute 'data'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_xml_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_write_xml_1": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_2": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_3": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_4": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_5": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_6": "'XMLProcessor' object has no attribute 'data'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_xml_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_write_xml_1": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_2": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_3": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_4": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_5": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_6": "'XMLProcessor' object has no attribute 'data'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_xml_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_write_xml_1": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_2": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_3": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_4": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_5": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_6": "'XMLProcessor' object has no attribute 'data'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_xml_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_write_xml_1": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_2": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_3": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_4": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_5": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_6": "'XMLProcessor' object has no attribute 'data'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_99": {
        "create_zip_file": {
            "create_zip_file_0": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_create_zip_file_1": "[Errno 2] No such file or directory: 'example.zip/new_zip_file.zip.zip'",
                        "test_create_zip_file_2": "[Errno 2] No such file or directory: 'example.zip/new_zip_file.zip.zip'",
                        "test_create_zip_file_3": "[Errno 2] No such file or directory: 'example.zip/new_zip_file.zip.zip'",
                        "test_create_zip_file_4": "[Errno 2] No such file or directory: 'example.zip/new_zip_file.zip.zip'",
                        "test_create_zip_file_5": "[Errno 2] No such file or directory: 'example.zip/new_zip_file.zip.zip'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "create_zip_file_1": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_create_zip_file_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_create_zip_file_1": "None is not true",
                        "test_create_zip_file_2": "None is not true",
                        "test_create_zip_file_3": "None is not true",
                        "test_create_zip_file_4": "None is not true",
                        "test_create_zip_file_5": "None is not true"
                    }
                },
                "total_run": 6
            },
            "create_zip_file_2": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_create_zip_file_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_create_zip_file_1": "False is not true",
                        "test_create_zip_file_2": "False is not true",
                        "test_create_zip_file_3": "False is not true",
                        "test_create_zip_file_4": "False is not true",
                        "test_create_zip_file_5": "False is not true"
                    }
                },
                "total_run": 6
            },
            "create_zip_file_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_zip_file_1": "None is not true",
                        "test_create_zip_file_2": "None is not true",
                        "test_create_zip_file_3": "None is not true",
                        "test_create_zip_file_4": "None is not true",
                        "test_create_zip_file_5": "None is not true"
                    }
                },
                "total_run": 6
            },
            "create_zip_file_4": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_create_zip_file_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_create_zip_file_1": "None is not true",
                        "test_create_zip_file_2": "None is not true",
                        "test_create_zip_file_3": "None is not true",
                        "test_create_zip_file_4": "None is not true",
                        "test_create_zip_file_5": "None is not true"
                    }
                },
                "total_run": 6
            }
        },
        "extract_all": {
            "extract_all_0": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_all_1": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: 'output_directory'",
                        "test_extract_all_2": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: 'output_directory'",
                        "test_extract_all_3": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: 'output_directory'",
                        "test_extract_all_4": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: 'output_directory'",
                        "test_extract_all_5": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: 'output_directory'",
                        "test_extract_all_6": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "extract_all_1": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_all_6": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: ''"
                    },
                    "NotADirectoryError": {
                        "test_extract_all_1": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'",
                        "test_extract_all_2": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'",
                        "test_extract_all_3": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'",
                        "test_extract_all_4": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'",
                        "test_extract_all_5": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "extract_all_2": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_all_6": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: ''"
                    },
                    "NotADirectoryError": {
                        "test_extract_all_1": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'",
                        "test_extract_all_2": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'",
                        "test_extract_all_3": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'",
                        "test_extract_all_4": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'",
                        "test_extract_all_5": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "extract_all_3": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_all_1": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: 'output_directory'",
                        "test_extract_all_2": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: 'output_directory'",
                        "test_extract_all_3": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: 'output_directory'",
                        "test_extract_all_4": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: 'output_directory'",
                        "test_extract_all_5": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: 'output_directory'",
                        "test_extract_all_6": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "extract_all_4": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_all_6": "[WinError 3] \u7cfb\u7edf\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u8def\u5f84\u3002: ''"
                    },
                    "NotADirectoryError": {
                        "test_extract_all_1": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'",
                        "test_extract_all_2": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'",
                        "test_extract_all_3": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'",
                        "test_extract_all_4": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'",
                        "test_extract_all_5": "[WinError 267] \u76ee\u5f55\u540d\u79f0\u65e0\u6548\u3002: 'example.zip'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "extract_file": {
            "extract_file_0": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_file_6": "[Errno 2] No such file or directory: ''"
                    },
                    "OSError": {
                        "test_extract_file_1": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_2": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_3": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_4": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_5": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "extract_file_1": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_file_6": "[Errno 2] No such file or directory: ''"
                    },
                    "OSError": {
                        "test_extract_file_1": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_2": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_3": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_4": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_5": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "extract_file_2": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_file_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_extract_file_1": "None is not true",
                        "test_extract_file_2": "None is not true",
                        "test_extract_file_3": "None is not true",
                        "test_extract_file_4": "None is not true",
                        "test_extract_file_5": "None is not true"
                    }
                },
                "total_run": 6
            },
            "extract_file_3": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_file_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_extract_file_1": "None is not true",
                        "test_extract_file_2": "None is not true",
                        "test_extract_file_3": "None is not true",
                        "test_extract_file_4": "None is not true",
                        "test_extract_file_5": "None is not true"
                    }
                },
                "total_run": 6
            },
            "extract_file_4": {
                "compilation": "success",
                "errors": {
                    "OSError": {
                        "test_extract_file_1": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_2": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_3": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_4": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_5": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "read_zip_file": {
            "read_zip_file_0": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_read_zip_file_1": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_2": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_3": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_4": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_5": "\"There is no item named 'file_name.txt' in the archive\""
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "read_zip_file_1": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_read_zip_file_1": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_2": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_3": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_4": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_5": "\"There is no item named 'file_name.txt' in the archive\""
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "read_zip_file_2": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_read_zip_file_1": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_2": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_3": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_4": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_5": "\"There is no item named 'file_name.txt' in the archive\""
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "read_zip_file_3": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_read_zip_file_1": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_2": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_3": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_4": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_5": "\"There is no item named 'file_name.txt' in the archive\""
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "read_zip_file_4": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_read_zip_file_1": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_2": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_3": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_4": "\"There is no item named 'file_name.txt' in the archive\"",
                        "test_read_zip_file_5": "\"There is no item named 'file_name.txt' in the archive\""
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    }
}