{
    "ClassEval_0": {
        "filter": {
            "filter_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_filter_6": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 3, 'address': 'address1'}, 'jwt': 'user12022-11-28'}}} is not false",
                        "test_filter_7": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 1, 'address': 'address1'}, 'jwt': 'user12023-11-28'}}} is not None"
                    }
                },
                "total_run": 8
            },
            "filter_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_filter_6": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 3, 'address': 'address1'}, 'jwt': 'user12022-11-28'}}} is not false",
                        "test_filter_7": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 1, 'address': 'address1'}, 'jwt': 'user12023-11-28'}}} is not None"
                    }
                },
                "total_run": 8
            },
            "filter_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_filter_6": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 3, 'address': 'address1'}, 'jwt': 'user12022-11-28'}}} is not false",
                        "test_filter_7": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 1, 'address': 'address1'}, 'jwt': 'user12023-11-28'}}} is not None"
                    }
                },
                "total_run": 8
            },
            "filter_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_filter_6": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 3, 'address': 'address1'}, 'jwt': 'user12022-11-28'}}} is not false",
                        "test_filter_7": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 1, 'address': 'address1'}, 'jwt': 'user12023-11-28'}}} is not None"
                    }
                },
                "total_run": 8
            },
            "filter_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_filter_6": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 3, 'address': 'address1'}, 'jwt': 'user12022-11-28'}}} is not false",
                        "test_filter_7": "{'path': '/abc', 'method': 'POST', 'headers': {'Authorization': {'user': {'name': 'user1', 'level': 1, 'address': 'address1'}, 'jwt': 'user12023-11-28'}}} is not None"
                    }
                },
                "total_run": 8
            }
        }
    },
    "ClassEval_1": {
        "calculate_annulus_area": {
            "calculate_annulus_area_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_annulus_area_2": "unsupported operand type(s) for -: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_annulus_area_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_annulus_area_2": "unsupported operand type(s) for -: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_annulus_area_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_annulus_area_2": "unsupported operand type(s) for -: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_annulus_area_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_annulus_area_2": "unsupported operand type(s) for -: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "calculate_annulus_area_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_calculate_annulus_area_2": "unsupported operand type(s) for -: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "calculate_sector_area": {
            "calculate_sector_area_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_sector_area": "3.53 != 0.061685027506808494 within 0.01 delta (3.468314972493191 difference)",
                        "test_calculate_sector_area_2": "3.14 != 0.05483113556160755 within 0.01 delta (3.0851688644383928 difference)",
                        "test_calculate_sector_area_4": "12.56 != 0.2193245422464302 within 0.01 delta (12.340675457753571 difference)"
                    }
                },
                "total_run": 5
            },
            "calculate_sector_area_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_sector_area": "3.53 != 0.061685027506808494 within 0.01 delta (3.468314972493191 difference)",
                        "test_calculate_sector_area_2": "3.14 != 0.05483113556160755 within 0.01 delta (3.0851688644383928 difference)",
                        "test_calculate_sector_area_4": "12.56 != 0.2193245422464302 within 0.01 delta (12.340675457753571 difference)"
                    }
                },
                "total_run": 5
            },
            "calculate_sector_area_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_sector_area": "3.53 != 0.061685027506808494 within 0.01 delta (3.468314972493191 difference)",
                        "test_calculate_sector_area_2": "3.14 != 0.05483113556160755 within 0.01 delta (3.0851688644383928 difference)",
                        "test_calculate_sector_area_4": "12.56 != 0.2193245422464302 within 0.01 delta (12.340675457753571 difference)"
                    }
                },
                "total_run": 5
            },
            "calculate_sector_area_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_sector_area": "3.53 != 0.061685027506808494 within 0.01 delta (3.468314972493191 difference)",
                        "test_calculate_sector_area_2": "3.14 != 0.05483113556160755 within 0.01 delta (3.0851688644383928 difference)",
                        "test_calculate_sector_area_4": "12.56 != 0.2193245422464302 within 0.01 delta (12.340675457753571 difference)"
                    }
                },
                "total_run": 5
            },
            "calculate_sector_area_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_sector_area": "3.53 != 0.061685027506808494 within 0.01 delta (3.468314972493191 difference)",
                        "test_calculate_sector_area_2": "3.14 != 0.05483113556160755 within 0.01 delta (3.0851688644383928 difference)",
                        "test_calculate_sector_area_4": "12.56 != 0.2193245422464302 within 0.01 delta (12.340675457753571 difference)"
                    }
                },
                "total_run": 5
            }
        },
        "calculate_sphere_area": {
            "calculate_sphere_area_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_sphere_area_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_sphere_area_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_sphere_area_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_sphere_area_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_10": {
        "clean_non_binary_chars": {
            "clean_non_binary_chars_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "clean_non_binary_chars_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "clean_non_binary_chars_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "clean_non_binary_chars_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_clean_non_binary_chars": "clean_non_binary_chars() missing 1 required positional argument: 'binary_string'",
                        "test_clean_non_binary_chars_2": "clean_non_binary_chars() missing 1 required positional argument: 'binary_string'",
                        "test_clean_non_binary_chars_3": "clean_non_binary_chars() missing 1 required positional argument: 'binary_string'",
                        "test_clean_non_binary_chars_4": "clean_non_binary_chars() missing 1 required positional argument: 'binary_string'",
                        "test_clean_non_binary_chars_5": "clean_non_binary_chars() missing 1 required positional argument: 'binary_string'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "clean_non_binary_chars_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "convert_to_utf8": {
            "convert_to_utf8_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_to_utf8": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_2": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_3": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_4": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_5": "'str' object has no attribute 'decode'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "convert_to_utf8_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_to_utf8": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_2": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_3": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_4": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_5": "'str' object has no attribute 'decode'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "convert_to_utf8_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_to_utf8": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_2": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_3": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_4": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_5": "'str' object has no attribute 'decode'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "convert_to_utf8_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_to_utf8": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_2": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_3": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_4": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_5": "'str' object has no attribute 'decode'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "convert_to_utf8_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_to_utf8": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_2": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_3": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_4": "'str' object has no attribute 'decode'",
                        "test_convert_to_utf8_5": "'str' object has no attribute 'decode'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_11": {
        "add": {
            "add_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'stat'",
                        "test_add_2": "add() missing 1 required positional argument: 'stat'",
                        "test_add_3": "add() missing 1 required positional argument: 'stat'",
                        "test_add_4": "add() missing 1 required positional argument: 'stat'",
                        "test_add_5": "add() missing 1 required positional argument: 'stat'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_5": "4 != 2"
                    }
                },
                "total_run": 5
            },
            "add_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'stat'",
                        "test_add_2": "add() missing 1 required positional argument: 'stat'",
                        "test_add_3": "add() missing 1 required positional argument: 'stat'",
                        "test_add_4": "add() missing 1 required positional argument: 'stat'",
                        "test_add_5": "add() missing 1 required positional argument: 'stat'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_5": "4 != 2"
                    }
                },
                "total_run": 5
            },
            "add_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_5": "4 != 2"
                    }
                },
                "total_run": 5
            }
        },
        "has": {
            "has_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "has_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "has_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "has_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "has_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "remove": {
            "remove_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_4": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_remove_5": "invalid literal for int() with base 2: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_remove": "1 != 4",
                        "test_remove_2": "0 != 8",
                        "test_remove_3": "None != 2",
                        "test_remove_4": "None != 8"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_12": {
        "calculate_hand_value": {
            "calculate_hand_value_0": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_calculate_hand_value_1": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_2": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_3": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_4": "invalid literal for int() with base 10: 'JS'",
                        "test_calculate_hand_value_5": "invalid literal for int() with base 10: 'JS'",
                        "test_calculate_hand_value_6": "invalid literal for int() with base 10: 'JS'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "calculate_hand_value_1": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_calculate_hand_value_6": "invalid literal for int() with base 10: 'B'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "calculate_hand_value_2": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_calculate_hand_value_1": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_2": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_3": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_4": "invalid literal for int() with base 10: 'JS'",
                        "test_calculate_hand_value_5": "invalid literal for int() with base 10: 'JS'",
                        "test_calculate_hand_value_6": "invalid literal for int() with base 10: 'JS'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "calculate_hand_value_3": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_calculate_hand_value_1": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_2": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_3": "invalid literal for int() with base 10: '2S'",
                        "test_calculate_hand_value_4": "invalid literal for int() with base 10: 'JS'",
                        "test_calculate_hand_value_5": "invalid literal for int() with base 10: 'JS'",
                        "test_calculate_hand_value_6": "invalid literal for int() with base 10: 'JS'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "calculate_hand_value_4": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_calculate_hand_value_6": "invalid literal for int() with base 10: 'B'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "check_winner": {
            "check_winner_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "'Dealer wins!' != 'Dealer wins'",
                        "test_check_winner_2": "'Player wins!' != 'Player wins'",
                        "test_check_winner_3": "\"It's a tie!\" != 'Dealer wins'",
                        "test_check_winner_4": "\"It's a tie!\" != 'Player wins'",
                        "test_check_winner_5": "'Dealer wins!' != 'Dealer wins'",
                        "test_check_winner_6": "'Player wins!' != 'Player wins'"
                    }
                },
                "total_run": 6
            },
            "check_winner_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "'Player wins!' != 'Dealer wins'",
                        "test_check_winner_2": "'Dealer wins!' != 'Player wins'",
                        "test_check_winner_3": "'Player wins!' != 'Dealer wins'",
                        "test_check_winner_4": "'Dealer wins!' != 'Player wins'",
                        "test_check_winner_5": "'Dealer wins!' != 'Dealer wins'",
                        "test_check_winner_6": "'Player wins!' != 'Player wins'"
                    }
                },
                "total_run": 6
            },
            "check_winner_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "check_winner_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "'Player wins!' != 'Dealer wins'",
                        "test_check_winner_2": "'Dealer wins!' != 'Player wins'",
                        "test_check_winner_3": "'Player wins!' != 'Dealer wins'",
                        "test_check_winner_4": "'Dealer wins!' != 'Player wins'",
                        "test_check_winner_5": "'Dealer wins!' != 'Dealer wins'",
                        "test_check_winner_6": "'Player wins!' != 'Player wins'"
                    }
                },
                "total_run": 6
            },
            "check_winner_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "'Player wins' != 'Dealer wins'",
                        "test_check_winner_2": "'Dealer wins' != 'Player wins'",
                        "test_check_winner_3": "'Player wins' != 'Dealer wins'",
                        "test_check_winner_4": "'Dealer wins' != 'Player wins'"
                    }
                },
                "total_run": 6
            }
        },
        "create_deck": {
            "create_deck_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_deck_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_deck_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_deck_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_deck_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_13": {
        "add_book": {
            "add_book_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_book_1": "'dict' object has no attribute 'append'",
                        "test_add_book_3": "'dict' object has no attribute 'append'",
                        "test_add_book_4": "'dict' object has no attribute 'append'",
                        "test_add_book_5": "'dict' object has no attribute 'append'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_book_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_book_1": "'dict' object has no attribute 'append'",
                        "test_add_book_3": "'dict' object has no attribute 'append'",
                        "test_add_book_4": "'dict' object has no attribute 'append'",
                        "test_add_book_5": "'dict' object has no attribute 'append'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_book_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_book_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_book_1": "'dict' object has no attribute 'append'",
                        "test_add_book_3": "'dict' object has no attribute 'append'",
                        "test_add_book_4": "'dict' object has no attribute 'append'",
                        "test_add_book_5": "'dict' object has no attribute 'append'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_book_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_book_1": "'dict' object has no attribute 'append'",
                        "test_add_book_3": "'dict' object has no attribute 'append'",
                        "test_add_book_4": "'dict' object has no attribute 'append'",
                        "test_add_book_5": "'dict' object has no attribute 'append'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "view_book_quantity": {
            "view_book_quantity_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_book_quantity_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_book_quantity_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_book_quantity_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_book_quantity_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "view_inventory": {
            "view_inventory_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_inventory_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_inventory_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_inventory_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_inventory_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_14": {
        "borrow_book": {
            "borrow_book_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_borrow_book": "no such column: status"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "borrow_book_1": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_borrow_book": "no such column: status"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "borrow_book_2": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_borrow_book": "no such column: status"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "borrow_book_3": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_borrow_book": "no such column: status"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "borrow_book_4": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_borrow_book": "no such column: status"
                    }
                },
                "failures": {},
                "total_run": 1
            }
        },
        "create_table": {
            "create_table_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_table_1": "unexpectedly None",
                        "test_create_table_2": "Lists differ: [] != ['id', 'title', 'author', 'available']"
                    }
                },
                "total_run": 2
            },
            "create_table_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_table_1": "unexpectedly None",
                        "test_create_table_2": "Lists differ: [] != ['id', 'title', 'author', 'available']"
                    }
                },
                "total_run": 2
            },
            "create_table_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_table_1": "unexpectedly None",
                        "test_create_table_2": "Lists differ: [] != ['id', 'title', 'author', 'available']"
                    }
                },
                "total_run": 2
            },
            "create_table_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_table_1": "unexpectedly None",
                        "test_create_table_2": "Lists differ: [] != ['id', 'title', 'author', 'available']"
                    }
                },
                "total_run": 2
            },
            "create_table_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_table_1": "unexpectedly None",
                        "test_create_table_2": "Lists differ: [] != ['id', 'title', 'author', 'available']"
                    }
                },
                "total_run": 2
            }
        },
        "return_book": {
            "return_book_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_return_book": "no such column: borrowed"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "return_book_1": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_return_book": "no such column: borrowed"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "return_book_2": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_return_book": "no such column: is_returned"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "return_book_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_return_book": "0 != 1"
                    }
                },
                "total_run": 1
            },
            "return_book_4": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_return_book": "no such table: book"
                    }
                },
                "failures": {},
                "total_run": 1
            }
        }
    },
    "ClassEval_15": {
        "mismatch_in_text": {
            "mismatch_in_text_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_mismatch_in_text": "0 != -1",
                        "test_mismatch_in_text_2": "-1 != 2",
                        "test_mismatch_in_text_3": "-1 != 2",
                        "test_mismatch_in_text_4": "0 != -1",
                        "test_mismatch_in_text_5": "-1 != 5"
                    }
                },
                "total_run": 5
            },
            "mismatch_in_text_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_mismatch_in_text_3": "1 != 2"
                    }
                },
                "total_run": 5
            },
            "mismatch_in_text_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_mismatch_in_text": "0 != -1",
                        "test_mismatch_in_text_2": "-1 != 2",
                        "test_mismatch_in_text_3": "-1 != 2",
                        "test_mismatch_in_text_4": "0 != -1",
                        "test_mismatch_in_text_5": "-1 != 5"
                    }
                },
                "total_run": 5
            },
            "mismatch_in_text_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_mismatch_in_text": "0 != -1",
                        "test_mismatch_in_text_2": "-1 != 2",
                        "test_mismatch_in_text_3": "-1 != 2",
                        "test_mismatch_in_text_4": "0 != -1",
                        "test_mismatch_in_text_5": "-1 != 5"
                    }
                },
                "total_run": 5
            },
            "mismatch_in_text_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_mismatch_in_text": "0 != -1",
                        "test_mismatch_in_text_2": "-1 != 2",
                        "test_mismatch_in_text_3": "-1 != 2",
                        "test_mismatch_in_text_4": "0 != -1",
                        "test_mismatch_in_text_5": "-1 != 5"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_16": {
        "apply_operator": {
            "apply_operator_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "apply_operator_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "apply_operator_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "apply_operator_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "apply_operator_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "calculate": {
            "calculate_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 8
            },
            "calculate_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 8
            },
            "calculate_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 8
            },
            "calculate_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 8
            },
            "calculate_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_calculate_7": "list index out of range"
                    },
                    "TypeError": {
                        "test_calculate_2": "can't multiply sequence by non-int of type 'str'",
                        "test_calculate_3": "can't multiply sequence by non-int of type 'str'",
                        "test_calculate_4": "unsupported operand type(s) for ** or pow(): 'str' and 'str'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_calculate_1": "'12' != 3",
                        "test_calculate_5": "'123' != 6",
                        "test_calculate_6": "'123' != 6",
                        "test_calculate_8": "'12' != 3"
                    }
                },
                "total_run": 8
            }
        }
    },
    "ClassEval_17": {
        "add_event": {
            "add_event_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_event_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_event_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_event_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_event_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_events": {
            "get_events_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 2
            },
            "get_events_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 2
            },
            "get_events_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 2
            },
            "get_events_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 2
            },
            "get_events_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 2
            }
        }
    },
    "ClassEval_18": {
        "__delitem__": {
            "__delitem___0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__delitem___1": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_delitem_1": "\"Key 'first_name' does not exist in the dictionary.\"",
                        "test_delitem_2": "\"Key 'first_name' does not exist in the dictionary.\"",
                        "test_delitem_3": "\"Key 'first_Name' does not exist in the dictionary.\"",
                        "test_delitem_5": "\"Key 'first_name' does not exist in the dictionary.\""
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "__delitem___2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__delitem___3": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_delitem_1": "\"Key 'first_name' does not exist in the dictionary.\"",
                        "test_delitem_2": "\"Key 'first_name' does not exist in the dictionary.\"",
                        "test_delitem_3": "\"Key 'first_Name' does not exist in the dictionary.\"",
                        "test_delitem_5": "\"Key 'first_name' does not exist in the dictionary.\""
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "__delitem___4": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_delitem_1": "\"Key 'first_name' does not exist in the dictionary.\"",
                        "test_delitem_2": "\"Key 'first_name' does not exist in the dictionary.\"",
                        "test_delitem_3": "\"Key 'first_Name' does not exist in the dictionary.\"",
                        "test_delitem_5": "\"Key 'first_name' does not exist in the dictionary.\""
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "__len__": {
            "__len___0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__len___1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__len___2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__len___3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__len___4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "__setitem__": {
            "__setitem___0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__setitem___1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__setitem___2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__setitem___3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "__setitem___4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "_convert_key": {
            "_convert_key_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_key_6": "'int' object has no attribute 'split'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "_convert_key_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_key_6": "'int' object has no attribute 'split'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "_convert_key_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_key_6": "'int' object has no attribute 'split'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "_convert_key_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_key_1": "'CamelCaseMap' object has no attribute '_convert_key'",
                        "test_convert_key_2": "'CamelCaseMap' object has no attribute '_convert_key'",
                        "test_convert_key_3": "'CamelCaseMap' object has no attribute '_convert_key'",
                        "test_convert_key_4": "'CamelCaseMap' object has no attribute '_convert_key'",
                        "test_convert_key_5": "'CamelCaseMap' object has no attribute '_convert_key'",
                        "test_convert_key_6": "'CamelCaseMap' object has no attribute '_convert_key'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "_convert_key_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_convert_key_6": "'int' object has no attribute 'split'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "_to_camel_case": {
            "_to_camel_case_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_to_camel_case_1": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_2": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_3": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_4": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_5": "_to_camel_case() missing 1 required positional argument: 'key'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "_to_camel_case_1": {
                "compilation": "unexpected unindent (ClassEval_18__to_camel_case_1.py, line 28)",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "_to_camel_case_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_to_camel_case_1": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_2": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_3": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_4": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_5": "_to_camel_case() missing 1 required positional argument: 'key'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "_to_camel_case_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_to_camel_case_1": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_2": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_3": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_4": "_to_camel_case() missing 1 required positional argument: 'key'",
                        "test_to_camel_case_5": "_to_camel_case() missing 1 required positional argument: 'key'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "_to_camel_case_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_19": {
        "generate_primes": {
            "generate_primes_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_primes_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_primes_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_primes_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_primes_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_2": {
        "add_argument": {
            "add_argument_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_argument_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_argument_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_argument_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_argument": "Items in the first set but not the second:",
                        "test_add_argument_2": "Items in the first set but not the second:",
                        "test_add_argument_3": "Items in the first set but not the second:",
                        "test_add_argument_4": "Items in the first set but not the second:",
                        "test_add_argument_5": "Items in the first set but not the second:"
                    }
                },
                "total_run": 5
            },
            "add_argument_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_argument": "Items in the first set but not the second:",
                        "test_add_argument_2": "Items in the first set but not the second:",
                        "test_add_argument_3": "Items in the first set but not the second:",
                        "test_add_argument_4": "Items in the first set but not the second:",
                        "test_add_argument_5": "Items in the first set but not the second:"
                    }
                },
                "total_run": 5
            }
        },
        "get_argument": {
            "get_argument_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_argument_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_argument_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_argument_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_argument_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_20": {},
    "ClassEval_21": {},
    "ClassEval_22": {
        "get_most_popular_class_in_major": {
            "get_most_popular_class_in_major_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_most_popular_class_in_major": "'CS301' != 'Data Structures'",
                        "test_get_most_popular_class_in_major2": "'CS301' != 'Data Structures'"
                    }
                },
                "total_run": 2
            },
            "get_most_popular_class_in_major_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_most_popular_class_in_major": "'No students registered for this major' != 'Data Structures'",
                        "test_get_most_popular_class_in_major2": "'No students registered for this major' != 'Data Structures'"
                    }
                },
                "total_run": 2
            },
            "get_most_popular_class_in_major_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_most_popular_class_in_major": "'CS301' != 'Data Structures'",
                        "test_get_most_popular_class_in_major2": "'CS301' != 'Data Structures'"
                    }
                },
                "total_run": 2
            },
            "get_most_popular_class_in_major_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_most_popular_class_in_major": "'CS301' != 'Data Structures'",
                        "test_get_most_popular_class_in_major2": "'CS301' != 'Data Structures'"
                    }
                },
                "total_run": 2
            },
            "get_most_popular_class_in_major_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_most_popular_class_in_major": "'CS301' != 'Data Structures'",
                        "test_get_most_popular_class_in_major2": "'CS301' != 'Data Structures'"
                    }
                },
                "total_run": 2
            }
        },
        "get_students_by_major": {
            "get_students_by_major_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 4
            },
            "get_students_by_major_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 4
            },
            "get_students_by_major_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 4
            },
            "get_students_by_major_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 4
            },
            "get_students_by_major_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 4
            }
        },
        "register_student": {
            "register_student_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "register_student_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "register_student_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "register_student_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            },
            "register_student_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 3
            }
        }
    },
    "ClassEval_23": {
        "_select": {
            "_select_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_select_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_select_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_select_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_select_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "select": {
            "select_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "select_all": {
            "select_all_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_all_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_all_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_all_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_select_all": "Lists differ: [[], ['A']] != [['A']]",
                        "test_select_all_2": "Lists differ: [[], ['B'], ['A'], ['A', 'B']] != [['A'], ['B'], ['A', 'B']]",
                        "test_select_all_3": "Lists differ: [[], ['C'], ['B'], ['B', 'C'], ['A'], ['A', 'C'], ['A', 'B'], ['A', 'B', 'C']] != [['A'], ['B'], ['C'], ['A', 'B'], ['A', 'C'], ['B', 'C'], ['A', 'B', 'C']]",
                        "test_select_all_4": "Lists differ: [[]] != []",
                        "test_select_all_5": "Lists differ: [[], ['B']] != [['B']]"
                    }
                },
                "total_run": 5
            },
            "select_all_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_select_all": "Lists differ: [[]] != [['A']]",
                        "test_select_all_2": "Lists differ: [[]] != [['A'], ['B'], ['A', 'B']]",
                        "test_select_all_3": "Lists differ: [[]] != [['A'], ['B'], ['C'], ['A', 'B'], ['A', 'C'], ['B', 'C'], ['A', 'B', 'C']]",
                        "test_select_all_4": "Lists differ: [[]] != []",
                        "test_select_all_5": "Lists differ: [[]] != [['B']]"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_24": {
        "add": {
            "add_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'c2'",
                        "test_add_2": "add() missing 1 required positional argument: 'c2'",
                        "test_add_3": "add() missing 1 required positional argument: 'c2'",
                        "test_add_4": "add() missing 1 required positional argument: 'c2'",
                        "test_add_5": "add() missing 1 required positional argument: 'c2'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'c2'",
                        "test_add_2": "add() missing 1 required positional argument: 'c2'",
                        "test_add_3": "add() missing 1 required positional argument: 'c2'",
                        "test_add_4": "add() missing 1 required positional argument: 'c2'",
                        "test_add_5": "add() missing 1 required positional argument: 'c2'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_add": "add() missing 1 required positional argument: 'c2'",
                        "test_add_2": "add() missing 1 required positional argument: 'c2'",
                        "test_add_3": "add() missing 1 required positional argument: 'c2'",
                        "test_add_4": "add() missing 1 required positional argument: 'c2'",
                        "test_add_5": "add() missing 1 required positional argument: 'c2'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "divide": {
            "divide_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "divide_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "divide_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "divide_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "divide_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "multiply": {
            "multiply_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "multiply_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "multiply_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "multiply_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "multiply_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_25": {},
    "ClassEval_26": {
        "read_csv": {
            "read_csv_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_csv_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_csv_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_csv_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "read_csv_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_27": {
        "convert": {
            "convert_0": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_convert_2": "'USD'"
                    },
                    "TypeError": {
                        "test_convert_3": "unsupported operand type(s) for -: 'str' and 'float'",
                        "test_convert_5": "unsupported operand type(s) for -: 'str' and 'float'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_convert_1": "'Invalid currency type' != 10.0",
                        "test_convert_4": "46.72 != 46.08 within 7 places (0.6400000000000006 difference)",
                        "test_convert_6": "'Invalid currency type' is not false"
                    }
                },
                "total_run": 6
            },
            "convert_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_convert_3": "unsupported operand type(s) for -: 'NoneType' and 'float'",
                        "test_convert_4": "unsupported operand type(s) for -: 'NoneType' and 'float'",
                        "test_convert_5": "unsupported operand type(s) for -: 'NoneType' and 'float'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_convert_1": "None != 10.0",
                        "test_convert_2": "None != 64",
                        "test_convert_6": "'Invalid currency type' is not false"
                    }
                },
                "total_run": 6
            },
            "convert_2": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_convert_2": "'USD'"
                    },
                    "TypeError": {
                        "test_convert_3": "unsupported operand type(s) for -: 'str' and 'float'",
                        "test_convert_5": "unsupported operand type(s) for -: 'str' and 'float'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_convert_1": "'Invalid currency type' != 10.0",
                        "test_convert_4": "46.72 != 46.08 within 7 places (0.6400000000000006 difference)",
                        "test_convert_6": "'Invalid currency type' is not false"
                    }
                },
                "total_run": 6
            },
            "convert_3": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_convert_1": "'CNY'",
                        "test_convert_2": "'USD'",
                        "test_convert_3": "'CNY'",
                        "test_convert_5": "'CAD'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_convert_4": "46.72 != 46.08 within 7 places (0.6400000000000006 difference)",
                        "test_convert_6": "'Invalid currency type' is not false"
                    }
                },
                "total_run": 6
            },
            "convert_4": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_convert_1": "'CNY'",
                        "test_convert_2": "'USD'",
                        "test_convert_3": "'CNY'",
                        "test_convert_5": "'CAD'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_convert_4": "46.72 != 46.08 within 7 places (0.6400000000000006 difference)",
                        "test_convert_6": "'Invalid currency type' is not false"
                    }
                },
                "total_run": 6
            }
        },
        "get_supported_currencies": {
            "get_supported_currencies_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_supported_currencies_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_supported_currencies_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_supported_currencies_1": "None != ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']",
                        "test_get_supported_currencies_2": "None != ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']",
                        "test_get_supported_currencies_3": "None != ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']",
                        "test_get_supported_currencies_4": "None != ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']",
                        "test_get_supported_currencies_5": "None != ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD', 'CNY']"
                    }
                },
                "total_run": 5
            },
            "get_supported_currencies_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_supported_currencies_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "update_currency_rate": {
            "update_currency_rate_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "update_currency_rate_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "update_currency_rate_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "update_currency_rate_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "update_currency_rate_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_28": {
        "create_table": {
            "create_table_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_table_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_table_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_table_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_table_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "insert_into_database": {
            "insert_into_database_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_into_database_1": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_2": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_3": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_4": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_5": "table test_table has 3 columns but 2 values were supplied"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "insert_into_database_1": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_into_database_1": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_2": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_3": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_4": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_5": "table test_table has 3 columns but 2 values were supplied"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "insert_into_database_2": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_into_database_1": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_2": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_3": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_4": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_5": "table test_table has 3 columns but 2 values were supplied"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "insert_into_database_3": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_into_database_1": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_2": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_3": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_4": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_5": "table test_table has 3 columns but 2 values were supplied"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "insert_into_database_4": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_into_database_1": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_2": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_3": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_4": "table test_table has 3 columns but 2 values were supplied",
                        "test_insert_into_database_5": "table test_table has 3 columns but 2 values were supplied"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "search_database": {
            "search_database_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_database_3": "[] is not None",
                        "test_search_database_4": "[] is not None",
                        "test_search_database_5": "[] is not None"
                    }
                },
                "total_run": 5
            },
            "search_database_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_database_3": "[] is not None",
                        "test_search_database_4": "[] is not None",
                        "test_search_database_5": "[] is not None"
                    }
                },
                "total_run": 5
            },
            "search_database_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "search_database_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_database_3": "[] is not None",
                        "test_search_database_4": "[] is not None",
                        "test_search_database_5": "[] is not None"
                    }
                },
                "total_run": 5
            },
            "search_database_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_database_3": "[] is not None",
                        "test_search_database_4": "[] is not None",
                        "test_search_database_5": "[] is not None"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_29": {},
    "ClassEval_3": {
        "count": {
            "count_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "count_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "count_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_count_1": "name 'math' is not defined",
                        "test_count_2": "name 'math' is not defined",
                        "test_count_3": "name 'math' is not defined",
                        "test_count_4": "name 'math' is not defined",
                        "test_count_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "count_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_count_1": "name 'math' is not defined",
                        "test_count_2": "name 'math' is not defined",
                        "test_count_3": "name 'math' is not defined",
                        "test_count_4": "name 'math' is not defined",
                        "test_count_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "count_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_count_1": "'int' object has no attribute 'factorial'",
                        "test_count_2": "'int' object has no attribute 'factorial'",
                        "test_count_3": "'int' object has no attribute 'factorial'",
                        "test_count_4": "'int' object has no attribute 'factorial'",
                        "test_count_5": "'int' object has no attribute 'factorial'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "count_all": {
            "count_all_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_count_all_1": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_2": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_3": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_4": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_5": "type object 'ArrangementCalculator' has no attribute 'nCr'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "count_all_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_count_all_1": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_2": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_3": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_4": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_5": "type object 'ArrangementCalculator' has no attribute 'nCr'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "count_all_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_count_all_1": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_2": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_3": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_4": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_5": "type object 'ArrangementCalculator' has no attribute 'nCr'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "count_all_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_count_all_1": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_2": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_3": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_4": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_5": "type object 'ArrangementCalculator' has no attribute 'nCr'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "count_all_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_count_all_1": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_2": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_3": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_4": "type object 'ArrangementCalculator' has no attribute 'nCr'",
                        "test_count_all_5": "type object 'ArrangementCalculator' has no attribute 'nCr'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "factorial": {
            "factorial_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_factorial_1": "name 'factorial' is not defined",
                        "test_factorial_2": "name 'factorial' is not defined",
                        "test_factorial_3": "name 'factorial' is not defined",
                        "test_factorial_4": "name 'factorial' is not defined",
                        "test_factorial_5": "name 'factorial' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "factorial_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "select": {
            "select_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_select_1": "name 'select_items' is not defined",
                        "test_select_2": "name 'select_items' is not defined",
                        "test_select_3": "name 'select_items' is not defined",
                        "test_select_4": "name 'select_items' is not defined",
                        "test_select_5": "name 'select_items' is not defined",
                        "test_select_6": "name 'select_items' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "select_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_select_1": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_2": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_3": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_4": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_5": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_6": "'ArrangementCalculator' object has no attribute 'select_items'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "select_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_select_1": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_2": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_3": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_4": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_5": "'ArrangementCalculator' object has no attribute 'select_items'",
                        "test_select_6": "'ArrangementCalculator' object has no attribute 'select_items'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "select_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_select_1": "name 'select_items' is not defined",
                        "test_select_2": "name 'select_items' is not defined",
                        "test_select_3": "name 'select_items' is not defined",
                        "test_select_4": "name 'select_items' is not defined",
                        "test_select_5": "name 'select_items' is not defined",
                        "test_select_6": "name 'select_items' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "select_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_select_1": "name 'select_items' is not defined",
                        "test_select_2": "name 'select_items' is not defined",
                        "test_select_3": "name 'select_items' is not defined",
                        "test_select_4": "name 'select_items' is not defined",
                        "test_select_5": "name 'select_items' is not defined",
                        "test_select_6": "name 'select_items' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "select_all": {
            "select_all_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_all_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_all_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_select_all_1": "Lists differ: [[1],[15 chars]2], [2, 3], [1, 2, 3]] != [[1],[15 chars]2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1[58 chars], 1]]",
                        "test_select_all_2": "Lists differ: [[1],[15 chars]2], [2, 4], [1, 2, 4]] != [[1],[15 chars]2], [1, 4], [2, 1], [2, 4], [4, 1], [4, 2], [1[58 chars], 1]]",
                        "test_select_all_3": "Lists differ: [[1], [2], [1, 2]] != [[1], [2], [1, 2], [2, 1]]",
                        "test_select_all_4": "Lists differ: [[1], [3], [1, 3]] != [[1], [3], [1, 3], [3, 1]]"
                    }
                },
                "total_run": 5
            },
            "select_all_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_select_all_1": "Lists differ: [[1],[15 chars]2], [2, 3], [1, 2, 3]] != [[1],[15 chars]2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1[58 chars], 1]]",
                        "test_select_all_2": "Lists differ: [[1],[15 chars]2], [2, 4], [1, 2, 4]] != [[1],[15 chars]2], [1, 4], [2, 1], [2, 4], [4, 1], [4, 2], [1[58 chars], 1]]",
                        "test_select_all_3": "Lists differ: [[1], [2], [1, 2]] != [[1], [2], [1, 2], [2, 1]]",
                        "test_select_all_4": "Lists differ: [[1], [3], [1, 3]] != [[1], [3], [1, 3], [3, 1]]"
                    }
                },
                "total_run": 5
            },
            "select_all_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_select_all_1": "Lists differ: [[1],[15 chars]2], [2, 3], [1, 2, 3]] != [[1],[15 chars]2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2], [1[58 chars], 1]]",
                        "test_select_all_2": "Lists differ: [[1],[15 chars]2], [2, 4], [1, 2, 4]] != [[1],[15 chars]2], [1, 4], [2, 1], [2, 4], [4, 1], [4, 2], [1[58 chars], 1]]",
                        "test_select_all_3": "Lists differ: [[1], [2], [1, 2]] != [[1], [2], [1, 2], [2, 1]]",
                        "test_select_all_4": "Lists differ: [[1], [3], [1, 3]] != [[1], [3], [1, 3], [3, 1]]"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_30": {
        "get_correlation": {
            "get_correlation_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_correlation_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_correlation_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_correlation_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_correlation_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_max": {
            "get_max_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_max_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_max_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_max_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_max_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_min": {
            "get_min_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_min_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_min_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_min_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_min_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_std_deviation": {
            "get_std_deviation_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_std_deviation_1": "name 'math' is not defined",
                        "test_get_std_deviation_2": "name 'math' is not defined",
                        "test_get_std_deviation_3": "name 'math' is not defined",
                        "test_get_std_deviation_4": "name 'math' is not defined",
                        "test_get_std_deviation_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_std_deviation_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_std_deviation_1": "name 'math' is not defined",
                        "test_get_std_deviation_2": "name 'math' is not defined",
                        "test_get_std_deviation_3": "name 'math' is not defined",
                        "test_get_std_deviation_4": "name 'math' is not defined",
                        "test_get_std_deviation_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_std_deviation_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_std_deviation_1": "name 'math' is not defined",
                        "test_get_std_deviation_2": "name 'math' is not defined",
                        "test_get_std_deviation_3": "name 'math' is not defined",
                        "test_get_std_deviation_4": "name 'math' is not defined",
                        "test_get_std_deviation_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_std_deviation_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_std_deviation_1": "name 'math' is not defined",
                        "test_get_std_deviation_2": "name 'math' is not defined",
                        "test_get_std_deviation_3": "name 'math' is not defined",
                        "test_get_std_deviation_4": "name 'math' is not defined",
                        "test_get_std_deviation_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_std_deviation_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_get_std_deviation_1": "name 'math' is not defined",
                        "test_get_std_deviation_2": "name 'math' is not defined",
                        "test_get_std_deviation_3": "name 'math' is not defined",
                        "test_get_std_deviation_4": "name 'math' is not defined",
                        "test_get_std_deviation_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_31": {
        "correlation_coefficient": {
            "correlation_coefficient_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_coefficient": "name 'np' is not defined",
                        "test_correlation_coefficient_2": "name 'np' is not defined",
                        "test_correlation_coefficient_3": "name 'np' is not defined",
                        "test_correlation_coefficient_4": "name 'np' is not defined",
                        "test_correlation_coefficient_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_coefficient_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_coefficient": "name 'np' is not defined",
                        "test_correlation_coefficient_2": "name 'np' is not defined",
                        "test_correlation_coefficient_3": "name 'np' is not defined",
                        "test_correlation_coefficient_4": "name 'np' is not defined",
                        "test_correlation_coefficient_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_coefficient_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_coefficient": "name 'np' is not defined",
                        "test_correlation_coefficient_2": "name 'np' is not defined",
                        "test_correlation_coefficient_3": "name 'np' is not defined",
                        "test_correlation_coefficient_4": "name 'np' is not defined",
                        "test_correlation_coefficient_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_coefficient_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_correlation_coefficient": "name 'np' is not defined",
                        "test_correlation_coefficient_2": "name 'np' is not defined",
                        "test_correlation_coefficient_3": "name 'np' is not defined",
                        "test_correlation_coefficient_4": "name 'np' is not defined",
                        "test_correlation_coefficient_5": "name 'np' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_coefficient_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_correlation_coefficient": "correlation_coefficient() missing 1 required positional argument: 'data2'",
                        "test_correlation_coefficient_2": "correlation_coefficient() missing 1 required positional argument: 'data2'",
                        "test_correlation_coefficient_3": "correlation_coefficient() missing 1 required positional argument: 'data2'",
                        "test_correlation_coefficient_4": "correlation_coefficient() missing 1 required positional argument: 'data2'",
                        "test_correlation_coefficient_5": "correlation_coefficient() missing 1 required positional argument: 'data2'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_32": {
        "caesar_decipher": {
            "caesar_decipher_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "caesar_decipher_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "caesar_decipher_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "caesar_decipher_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            },
            "caesar_decipher_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            }
        }
    },
    "ClassEval_33": {
        "FidelityPromo": {
            "FidelityPromo_0": {
                "compilation": "success",
                "errors": {
                    "RecursionError": {
                        "test_fidelity_promo_1": "maximum recursion depth exceeded",
                        "test_fidelity_promo_2": "maximum recursion depth exceeded",
                        "test_fidelity_promo_3": "maximum recursion depth exceeded",
                        "test_fidelity_promo_4": "maximum recursion depth exceeded",
                        "test_fidelity_promo_5": "maximum recursion depth exceeded"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "FidelityPromo_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_fidelity_promo_1": "0 != 12.5"
                    }
                },
                "total_run": 5
            },
            "FidelityPromo_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_fidelity_promo_1": "0 != 12.5"
                    }
                },
                "total_run": 5
            },
            "FidelityPromo_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_fidelity_promo_1": "0 != 12.5"
                    }
                },
                "total_run": 5
            },
            "FidelityPromo_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_fidelity_promo_1": "0 != 12.5"
                    }
                },
                "total_run": 5
            }
        },
        "LargeOrderPromo": {
            "LargeOrderPromo_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_large_order_promo_1": "unhashable type: 'dict'",
                        "test_large_order_promo_2": "unhashable type: 'dict'",
                        "test_large_order_promo_3": "unhashable type: 'dict'",
                        "test_large_order_promo_4": "unhashable type: 'dict'",
                        "test_large_order_promo_5": "unhashable type: 'dict'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "LargeOrderPromo_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_large_order_promo_1": "0.07 != 7.0 within 7 places (6.93 difference)",
                        "test_large_order_promo_3": "0.07 != 70.0 within 7 places (69.93 difference)",
                        "test_large_order_promo_4": "0.07 != 700.0 within 7 places (699.93 difference)"
                    }
                },
                "total_run": 5
            },
            "LargeOrderPromo_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_large_order_promo_1": "unhashable type: 'dict'",
                        "test_large_order_promo_2": "unhashable type: 'dict'",
                        "test_large_order_promo_3": "unhashable type: 'dict'",
                        "test_large_order_promo_4": "unhashable type: 'dict'",
                        "test_large_order_promo_5": "unhashable type: 'dict'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "LargeOrderPromo_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_large_order_promo_1": "0.07 != 7.0 within 7 places (6.93 difference)",
                        "test_large_order_promo_3": "0.07 != 70.0 within 7 places (69.93 difference)",
                        "test_large_order_promo_4": "0.07 != 700.0 within 7 places (699.93 difference)"
                    }
                },
                "total_run": 5
            },
            "LargeOrderPromo_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_large_order_promo_1": "unhashable type: 'dict'",
                        "test_large_order_promo_2": "unhashable type: 'dict'",
                        "test_large_order_promo_3": "unhashable type: 'dict'",
                        "test_large_order_promo_4": "unhashable type: 'dict'",
                        "test_large_order_promo_5": "unhashable type: 'dict'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "due": {
            "due_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_due_2": "'float' object has no attribute 'customer'",
                        "test_due_3": "'float' object has no attribute 'cart'",
                        "test_due_4": "'float' object has no attribute 'cart'",
                        "test_due_5": "'float' object has no attribute 'customer'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "due_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_due_2": "'list' object has no attribute 'customer'",
                        "test_due_3": "'list' object has no attribute 'cart'",
                        "test_due_4": "'list' object has no attribute 'cart'",
                        "test_due_5": "'list' object has no attribute 'customer'"
                    },
                    "TypeError": {
                        "test_due_1": "'NoneType' object is not callable"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "due_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_due_2": "'list' object has no attribute 'customer'",
                        "test_due_3": "'list' object has no attribute 'cart'",
                        "test_due_4": "'list' object has no attribute 'cart'",
                        "test_due_5": "'list' object has no attribute 'customer'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "due_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_due_1": "'NoneType' object is not callable"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_due_2": "-2875.0 != 237.5",
                        "test_due_3": "-17550.0 != 410.0",
                        "test_due_4": "-1425.0000000000002 != 139.5"
                    }
                },
                "total_run": 5
            },
            "due_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_due_2": "'float' object has no attribute 'customer'",
                        "test_due_3": "'float' object has no attribute 'cart'",
                        "test_due_4": "'float' object has no attribute 'cart'",
                        "test_due_5": "'float' object has no attribute 'customer'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_34": {
        "_get_alignment_value": {
            "_get_alignment_value_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "_get_alignment_value_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "_get_alignment_value_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "_get_alignment_value_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "_get_alignment_value_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            }
        },
        "add_heading": {
            "add_heading_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_heading_1": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_2": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_3": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_4": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_5": "'DocFileHandler' object has no attribute 'document'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_heading_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_heading_1": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_2": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_3": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_4": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_5": "'DocFileHandler' object has no attribute 'document'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_heading_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_heading_1": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_2": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_3": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_4": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_5": "'DocFileHandler' object has no attribute 'document'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_heading_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_heading_1": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_2": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_3": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_4": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_5": "'DocFileHandler' object has no attribute 'document'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "add_heading_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_add_heading_1": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_2": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_3": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_4": "'DocFileHandler' object has no attribute 'document'",
                        "test_add_heading_5": "'DocFileHandler' object has no attribute 'document'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "add_table": {
            "add_table_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_table_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_table_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_table_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_table_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_35": {
        "find_blank": {
            "find_blank_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "find_blank_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "find_blank_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "find_blank_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "find_blank_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "solve": {
            "solve_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_solve_1": "name 'deque' is not defined",
                        "test_solve_2": "name 'deque' is not defined",
                        "test_solve_3": "name 'deque' is not defined",
                        "test_solve_4": "name 'deque' is not defined",
                        "test_solve_5": "name 'deque' is not defined",
                        "test_solve_6": "name 'deque' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "solve_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_solve_1": "name 'deque' is not defined",
                        "test_solve_2": "name 'deque' is not defined",
                        "test_solve_3": "name 'deque' is not defined",
                        "test_solve_4": "name 'deque' is not defined",
                        "test_solve_5": "name 'deque' is not defined",
                        "test_solve_6": "name 'deque' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "solve_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_solve_1": "name 'deque' is not defined",
                        "test_solve_2": "name 'deque' is not defined",
                        "test_solve_3": "name 'deque' is not defined",
                        "test_solve_4": "name 'deque' is not defined",
                        "test_solve_5": "name 'deque' is not defined",
                        "test_solve_6": "name 'deque' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "solve_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_solve_1": "name 'deque' is not defined",
                        "test_solve_2": "name 'deque' is not defined",
                        "test_solve_3": "name 'deque' is not defined",
                        "test_solve_4": "name 'deque' is not defined",
                        "test_solve_5": "name 'deque' is not defined",
                        "test_solve_6": "name 'deque' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "solve_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_solve_1": "name 'deque' is not defined",
                        "test_solve_2": "name 'deque' is not defined",
                        "test_solve_3": "name 'deque' is not defined",
                        "test_solve_4": "name 'deque' is not defined",
                        "test_solve_5": "name 'deque' is not defined",
                        "test_solve_6": "name 'deque' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_36": {
        "clear_inbox": {
            "clear_inbox_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_clear_inbox": "Lists differ: [{'size': 20}] != [{'size': 15}]",
                        "test_clear_inbox_2": "Lists differ: [{'size': 20}] != [{'size': 10}, {'size': 20}, {'size': 15}]",
                        "test_clear_inbox_4": "Lists differ: [{'size': 10}, {'size': 20}, {'size': 15}] != []",
                        "test_clear_inbox_5": "Lists differ: [] != [{'size': 20}, {'size': 15}]"
                    }
                },
                "total_run": 5
            },
            "clear_inbox_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_clear_inbox": "Lists differ: [{'size': 20}] != [{'size': 15}]",
                        "test_clear_inbox_2": "Lists differ: [{'size': 20}] != [{'size': 10}, {'size': 20}, {'size': 15}]",
                        "test_clear_inbox_4": "Lists differ: [{'size': 10}, {'size': 20}, {'size': 15}] != []",
                        "test_clear_inbox_5": "Lists differ: [] != [{'size': 20}, {'size': 15}]"
                    }
                },
                "total_run": 5
            },
            "clear_inbox_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_clear_inbox": "Lists differ: [{'size': 20}] != [{'size': 15}]",
                        "test_clear_inbox_2": "Lists differ: [{'size': 20}] != [{'size': 10}, {'size': 20}, {'size': 15}]",
                        "test_clear_inbox_4": "Lists differ: [{'size': 10}, {'size': 20}, {'size': 15}] != []",
                        "test_clear_inbox_5": "Lists differ: [] != [{'size': 20}, {'size': 15}]"
                    }
                },
                "total_run": 5
            },
            "clear_inbox_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_clear_inbox": "Lists differ: [{'size': 20}] != [{'size': 15}]",
                        "test_clear_inbox_2": "Lists differ: [{'size': 20}] != [{'size': 10}, {'size': 20}, {'size': 15}]",
                        "test_clear_inbox_4": "Lists differ: [{'size': 10}, {'size': 20}, {'size': 15}] != []",
                        "test_clear_inbox_5": "Lists differ: [] != [{'size': 20}, {'size': 15}]"
                    }
                },
                "total_run": 5
            },
            "clear_inbox_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_clear_inbox": "Lists differ: [{'size': 20}] != [{'size': 15}]",
                        "test_clear_inbox_2": "Lists differ: [{'size': 20}] != [{'size': 10}, {'size': 20}, {'size': 15}]",
                        "test_clear_inbox_4": "Lists differ: [{'size': 10}, {'size': 20}, {'size': 15}] != []",
                        "test_clear_inbox_5": "Lists differ: [] != [{'size': 20}, {'size': 15}]"
                    }
                },
                "total_run": 5
            }
        },
        "get_occupied_size": {
            "get_occupied_size_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_occupied_size_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_occupied_size_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_occupied_size_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_occupied_size_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "is_full_with_one_more_email": {
            "is_full_with_one_more_email_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_full_with_one_more_email_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_full_with_one_more_email_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_full_with_one_more_email_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_full_with_one_more_email_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "send_to": {
            "send_to_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_send_to": "name 'MIMEText' is not defined",
                        "test_send_to_2": "name 'MIMEText' is not defined",
                        "test_send_to_3": "name 'MIMEText' is not defined",
                        "test_send_to_4": "name 'MIMEText' is not defined",
                        "test_send_to_5": "name 'MIMEText' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "send_to_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_send_to": "name 'MIMEText' is not defined",
                        "test_send_to_2": "name 'MIMEText' is not defined",
                        "test_send_to_3": "name 'MIMEText' is not defined",
                        "test_send_to_4": "name 'MIMEText' is not defined",
                        "test_send_to_5": "name 'MIMEText' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "send_to_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_send_to": "name 'MIMEText' is not defined",
                        "test_send_to_2": "name 'MIMEText' is not defined",
                        "test_send_to_3": "name 'MIMEText' is not defined",
                        "test_send_to_4": "name 'MIMEText' is not defined",
                        "test_send_to_5": "name 'MIMEText' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "send_to_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_send_to": "name 'MIMEText' is not defined",
                        "test_send_to_2": "name 'MIMEText' is not defined",
                        "test_send_to_3": "name 'MIMEText' is not defined",
                        "test_send_to_4": "name 'MIMEText' is not defined",
                        "test_send_to_5": "name 'MIMEText' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "send_to_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_send_to": "name 'MIMEText' is not defined",
                        "test_send_to_2": "name 'MIMEText' is not defined",
                        "test_send_to_3": "name 'MIMEText' is not defined",
                        "test_send_to_4": "name 'MIMEText' is not defined",
                        "test_send_to_5": "name 'MIMEText' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_37": {
        "rail_fence_cipher": {
            "rail_fence_cipher_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_rail_fence_cipher": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_2": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_3": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_4": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_6": "unsupported operand type(s) for -: 'list' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "rail_fence_cipher_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_rail_fence_cipher": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_2": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_3": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_4": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_6": "unsupported operand type(s) for -: 'list' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "rail_fence_cipher_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "rail_fence_cipher_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "rail_fence_cipher_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_rail_fence_cipher": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_2": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_3": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_4": "unsupported operand type(s) for -: 'list' and 'int'",
                        "test_rail_fence_cipher_6": "unsupported operand type(s) for -: 'list' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_38": {
        "process_excel_data": {
            "process_excel_data_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process_excel_data_1": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_2": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_3": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_4": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_5": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_6": "'list' object has no attribute 'columns'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "process_excel_data_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process_excel_data_1": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_2": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_3": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_4": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_5": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_6": "'list' object has no attribute 'columns'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "process_excel_data_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process_excel_data_1": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_2": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_3": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_4": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_5": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_6": "'list' object has no attribute 'columns'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "process_excel_data_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process_excel_data_1": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_2": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_3": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_4": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_5": "'list' object has no attribute 'columns'",
                        "test_process_excel_data_6": "'list' object has no attribute 'columns'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "process_excel_data_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_process_excel_data_1": "name 'pd' is not defined",
                        "test_process_excel_data_2": "name 'pd' is not defined",
                        "test_process_excel_data_3": "name 'pd' is not defined",
                        "test_process_excel_data_4": "name 'pd' is not defined",
                        "test_process_excel_data_5": "name 'pd' is not defined",
                        "test_process_excel_data_6": "name 'pd' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        },
        "write_excel": {
            "write_excel_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_write_excel_1": "name 'pd' is not defined",
                        "test_write_excel_2": "name 'pd' is not defined",
                        "test_write_excel_3": "name 'pd' is not defined",
                        "test_write_excel_4": "name 'pd' is not defined",
                        "test_write_excel_5": "name 'pd' is not defined",
                        "test_write_excel_6": "name 'pd' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_excel_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_write_excel_1": "name 'pd' is not defined",
                        "test_write_excel_2": "name 'pd' is not defined",
                        "test_write_excel_3": "name 'pd' is not defined",
                        "test_write_excel_4": "name 'pd' is not defined",
                        "test_write_excel_5": "name 'pd' is not defined",
                        "test_write_excel_6": "name 'pd' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_excel_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_write_excel_1": "name 'pd' is not defined",
                        "test_write_excel_2": "name 'pd' is not defined",
                        "test_write_excel_3": "name 'pd' is not defined",
                        "test_write_excel_4": "name 'pd' is not defined",
                        "test_write_excel_5": "name 'pd' is not defined",
                        "test_write_excel_6": "name 'pd' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_excel_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_write_excel_1": "name 'pd' is not defined",
                        "test_write_excel_2": "name 'pd' is not defined",
                        "test_write_excel_3": "name 'pd' is not defined",
                        "test_write_excel_4": "name 'pd' is not defined",
                        "test_write_excel_5": "name 'pd' is not defined",
                        "test_write_excel_6": "name 'pd' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_excel_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_write_excel_1": "name 'pd' is not defined",
                        "test_write_excel_2": "name 'pd' is not defined",
                        "test_write_excel_3": "name 'pd' is not defined",
                        "test_write_excel_4": "name 'pd' is not defined",
                        "test_write_excel_5": "name 'pd' is not defined",
                        "test_write_excel_6": "name 'pd' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_39": {
        "is_operator": {
            "is_operator_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_is_operator_1": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_2": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_3": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_4": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_5": "is_operator() missing 1 required positional argument: 'c'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "is_operator_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_is_operator_1": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_2": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_3": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_4": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_5": "is_operator() missing 1 required positional argument: 'c'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "is_operator_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_is_operator_1": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_2": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_3": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_4": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_5": "is_operator() missing 1 required positional argument: 'c'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "is_operator_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_is_operator_1": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_2": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_3": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_4": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_5": "is_operator() missing 1 required positional argument: 'c'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "is_operator_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_is_operator_1": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_2": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_3": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_4": "is_operator() missing 1 required positional argument: 'c'",
                        "test_is_operator_5": "is_operator() missing 1 required positional argument: 'c'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "transform": {
            "transform_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_transform_1": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_2": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_3": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_4": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_5": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_6": "transform() missing 1 required positional argument: 'expression'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "transform_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_transform_1": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_2": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_3": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_4": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_5": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_6": "transform() missing 1 required positional argument: 'expression'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "transform_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_transform_1": "'234*+' != '2+3*4'",
                        "test_transform_2": "'234/+' != '2+3/4'",
                        "test_transform_3": "'234*-' != '2-3*4'",
                        "test_transform_4": "'134*+' != '1+3*4'",
                        "test_transform_5": "'2-3-4*+' != '~2+(~3)*4'",
                        "test_transform_6": "'11+' != '0-(1+1)'"
                    }
                },
                "total_run": 6
            },
            "transform_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_transform_1": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_2": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_3": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_4": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_5": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_6": "transform() missing 1 required positional argument: 'expression'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "transform_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_transform_1": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_2": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_3": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_4": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_5": "transform() missing 1 required positional argument: 'expression'",
                        "test_transform_6": "transform() missing 1 required positional argument: 'expression'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_4": {
        "add_course_score": {
            "add_course_score_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_course_score_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_course_score_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_course_score_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_course_score_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "add_student": {
            "add_student_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_student_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_student_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_student_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_student_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_gpa": {
            "get_gpa_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_gpa_1": "unsupported operand type(s) for +: 'int' and 'str'",
                        "test_get_gpa_3": "unsupported operand type(s) for +: 'int' and 'str'",
                        "test_get_gpa_5": "unsupported operand type(s) for +: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_gpa_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_gpa_2": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_get_gpa_1": "'grades'",
                        "test_get_gpa_3": "'grades'",
                        "test_get_gpa_5": "'grades'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_gpa_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_gpa_1": "unsupported operand type(s) for +: 'int' and 'str'",
                        "test_get_gpa_3": "unsupported operand type(s) for +: 'int' and 'str'",
                        "test_get_gpa_5": "unsupported operand type(s) for +: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_gpa_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_gpa_1": "unsupported operand type(s) for +: 'int' and 'str'",
                        "test_get_gpa_3": "unsupported operand type(s) for +: 'int' and 'str'",
                        "test_get_gpa_5": "unsupported operand type(s) for +: 'int' and 'str'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "get_top_student": {
            "get_top_student_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_top_student_2": "'>' not supported between instances of 'NoneType' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_top_student_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_top_student": "'dict' object has no attribute 'name'",
                        "test_get_top_student_2": "'dict' object has no attribute 'name'",
                        "test_get_top_student_4": "'dict' object has no attribute 'name'",
                        "test_get_top_student_5": "'dict' object has no attribute 'name'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_top_student_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_get_top_student": "'dict' object has no attribute 'name'",
                        "test_get_top_student_2": "'dict' object has no attribute 'name'",
                        "test_get_top_student_4": "'dict' object has no attribute 'name'",
                        "test_get_top_student_5": "'dict' object has no attribute 'name'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_top_student_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_top_student_2": "'>' not supported between instances of 'NoneType' and 'int'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "get_top_student_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_get_top_student": "unhashable type: 'dict'",
                        "test_get_top_student_2": "unhashable type: 'dict'",
                        "test_get_top_student_4": "unhashable type: 'dict'",
                        "test_get_top_student_5": "unhashable type: 'dict'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_40": {
        "condition_judge": {
            "condition_judge_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "condition_judge_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "condition_judge_2": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_condition_judge": "'female'",
                        "test_condition_judge_2": "'female'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "condition_judge_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "condition_judge_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_BMI": {
            "get_BMI_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_BMI_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_BMI_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_BMI_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_BMI_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_41": {
        "check_winner": {
            "check_winner_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "None != ' '",
                        "test_check_winner_2": "'X' != ' '"
                    }
                },
                "total_run": 5
            },
            "check_winner_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "None != 'X'",
                        "test_check_winner_2": "'X' != 'O'",
                        "test_check_winner_3": "'O' != 'X'",
                        "test_check_winner_4": "'X' != 'O'"
                    }
                },
                "total_run": 5
            },
            "check_winner_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "None != 'X'",
                        "test_check_winner_2": "'X' != 'O'",
                        "test_check_winner_3": "'O' != 'X'",
                        "test_check_winner_4": "'X' != 'O'"
                    }
                },
                "total_run": 5
            },
            "check_winner_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "None != 'X'",
                        "test_check_winner_2": "'X' != 'O'",
                        "test_check_winner_3": "'O' != 'X'",
                        "test_check_winner_4": "'X' != 'O'"
                    }
                },
                "total_run": 5
            },
            "check_winner_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_check_winner_1": "None != 'X'",
                        "test_check_winner_2": "'X' != 'O'",
                        "test_check_winner_3": "'O' != 'X'",
                        "test_check_winner_4": "'X' != 'O'"
                    }
                },
                "total_run": 5
            }
        },
        "make_move": {
            "make_move_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "make_move_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "make_move_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "make_move_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "make_move_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_42": {
        "check_in": {
            "check_in_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "check_in_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "check_in_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "check_in_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "check_in_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "check_out": {
            "check_out_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_out_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_out_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_out_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_out_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_available_rooms": {
            "get_available_rooms_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_available_rooms_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_available_rooms_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_available_rooms_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_available_rooms_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_43": {
        "add_employee": {
            "add_employee_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_employee_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_employee_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_employee_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_employee_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "remove_employee": {
            "remove_employee_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_employee_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_employee_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_employee_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "remove_employee_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_44": {
        "extract_code_from_html_text": {
            "extract_code_from_html_text_0": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "extract_code_from_html_text_1": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "extract_code_from_html_text_2": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "extract_code_from_html_text_3": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "extract_code_from_html_text_4": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            }
        },
        "format_line_html_text": {
            "format_line_html_text_0": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "format_line_html_text_1": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "format_line_html_text_2": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "format_line_html_text_3": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "format_line_html_text_4": {
                "compilation": "No module named 'benchmark_code'",
                "errors": {},
                "failures": {},
                "total_run": 0
            }
        }
    },
    "ClassEval_45": {
        "resize_image": {
            "resize_image_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_resize_image": "Tuples differ: (100, 100) != (30, 15)",
                        "test_resize_image_3": "'PNG' != None",
                        "test_resize_image_5": "'PNG' != None"
                    }
                },
                "total_run": 5
            },
            "resize_image_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_resize_image": "Tuples differ: (100, 100) != (30, 15)",
                        "test_resize_image_3": "'PNG' != None",
                        "test_resize_image_5": "'PNG' != None"
                    }
                },
                "total_run": 5
            },
            "resize_image_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "resize_image_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_resize_image": "can't set attribute",
                        "test_resize_image_2": "can't set attribute",
                        "test_resize_image_3": "can't set attribute",
                        "test_resize_image_4": "can't set attribute",
                        "test_resize_image_5": "can't set attribute"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "resize_image_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "rotate_image": {
            "rotate_image_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "rotate_image_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "rotate_image_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "rotate_image_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "rotate_image_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "save_image": {
            "save_image_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "save_image_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "save_image_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "save_image_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "save_image_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_46": {},
    "ClassEval_47": {
        "get_binary": {
            "get_binary_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_binary_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_binary_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_binary_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_binary_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "is_valid": {
            "is_valid_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_48": {
        "is_valid_ipv4": {
            "is_valid_ipv4_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_ipv4_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_ipv4_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_ipv4_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_valid_ipv4_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_49": {
        "search_jobs": {
            "search_jobs_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_jobs": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_2": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_3": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]4']}]"
                    }
                },
                "total_run": 5
            },
            "search_jobs_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_jobs": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_2": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_3": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]4']}]"
                    }
                },
                "total_run": 5
            },
            "search_jobs_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_jobs": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_2": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_3": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]4']}]"
                    }
                },
                "total_run": 5
            },
            "search_jobs_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_jobs": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_2": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_3": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]4']}]"
                    }
                },
                "total_run": 5
            },
            "search_jobs_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_search_jobs": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_2": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]2']}]",
                        "test_search_jobs_3": "Lists differ: [] != [{'job_title': 'Software Engineer', 'compa[53 chars]4']}]"
                    }
                },
                "total_run": 5
            }
        },
        "withdraw_resume": {
            "withdraw_resume_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_resume_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_resume_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_resume_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_resume_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_5": {
        "display": {
            "display_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_1": "None != 'Normal Guitar Playing -- Chord: C, Play Tune: 53231323'",
                        "test_display_2": "None != 'Normal Guitar Playing -- Chord: Em, Play Tune: 43231323'",
                        "test_display_3": "None != 'Normal Guitar Playing -- Chord: F, Play Tune: 43231323'",
                        "test_display_4": "None != 'Normal Guitar Playing -- Chord: G, Play Tune: 63231323'",
                        "test_display_5": "None != 'Normal Guitar Playing -- Chord: , Play Tune: '"
                    }
                },
                "total_run": 5
            },
            "display_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_1": "None != 'Normal Guitar Playing -- Chord: C, Play Tune: 53231323'",
                        "test_display_2": "None != 'Normal Guitar Playing -- Chord: Em, Play Tune: 43231323'",
                        "test_display_3": "None != 'Normal Guitar Playing -- Chord: F, Play Tune: 43231323'",
                        "test_display_4": "None != 'Normal Guitar Playing -- Chord: G, Play Tune: 63231323'",
                        "test_display_5": "None != 'Normal Guitar Playing -- Chord: , Play Tune: '"
                    }
                },
                "total_run": 5
            },
            "display_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_1": "None != 'Normal Guitar Playing -- Chord: C, Play Tune: 53231323'",
                        "test_display_2": "None != 'Normal Guitar Playing -- Chord: Em, Play Tune: 43231323'",
                        "test_display_3": "None != 'Normal Guitar Playing -- Chord: F, Play Tune: 43231323'",
                        "test_display_4": "None != 'Normal Guitar Playing -- Chord: G, Play Tune: 63231323'",
                        "test_display_5": "None != 'Normal Guitar Playing -- Chord: , Play Tune: '"
                    }
                },
                "total_run": 5
            },
            "display_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_1": "None != 'Normal Guitar Playing -- Chord: C, Play Tune: 53231323'",
                        "test_display_2": "None != 'Normal Guitar Playing -- Chord: Em, Play Tune: 43231323'",
                        "test_display_3": "None != 'Normal Guitar Playing -- Chord: F, Play Tune: 43231323'",
                        "test_display_4": "None != 'Normal Guitar Playing -- Chord: G, Play Tune: 63231323'",
                        "test_display_5": "None != 'Normal Guitar Playing -- Chord: , Play Tune: '"
                    }
                },
                "total_run": 5
            },
            "display_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_1": "None != 'Normal Guitar Playing -- Chord: C, Play Tune: 53231323'",
                        "test_display_2": "None != 'Normal Guitar Playing -- Chord: Em, Play Tune: 43231323'",
                        "test_display_3": "None != 'Normal Guitar Playing -- Chord: F, Play Tune: 43231323'",
                        "test_display_4": "None != 'Normal Guitar Playing -- Chord: G, Play Tune: 63231323'",
                        "test_display_5": "None != 'Normal Guitar Playing -- Chord: , Play Tune: '"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_50": {
        "process_json": {
            "process_json_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_process_json_3": "argument of type 'int' is not iterable"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_json_1": {
                "compilation": "success",
                "errors": {
                    "json.decoder.JSONDecodeError": {
                        "test_process_json_3": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_json_2": {
                "compilation": "success",
                "errors": {
                    "json.decoder.JSONDecodeError": {
                        "test_process_json_3": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_json_3": {
                "compilation": "success",
                "errors": {
                    "json.decoder.JSONDecodeError": {
                        "test_process_json_3": "Expecting value: line 1 column 1 (char 0)"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_json_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_process_json_3": "argument of type 'int' is not iterable"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "write_json": {
            "write_json_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_json_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_json_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_json_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_json_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_51": {},
    "ClassEval_52": {
        "lemmatize_sentence": {
            "lemmatize_sentence_0": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "lemmatize_sentence_1": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "lemmatize_sentence_2": {
                "compilation": "[WinError 32] \u53e6\u4e00\u4e2a\u7a0b\u5e8f\u6b63\u5728\u4f7f\u7528\u6b64\u6587\u4ef6\uff0c\u8fdb\u7a0b\u65e0\u6cd5\u8bbf\u95ee\u3002: 'C:\\\\Users\\\\24426\\\\anaconda3\\\\envs\\\\classeval\\\\nltk_data\\\\taggers\\\\averaged_perceptron_tagger.zip'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "lemmatize_sentence_3": {
                "compilation": "[WinError 32] \u53e6\u4e00\u4e2a\u7a0b\u5e8f\u6b63\u5728\u4f7f\u7528\u6b64\u6587\u4ef6\uff0c\u8fdb\u7a0b\u65e0\u6cd5\u8bbf\u95ee\u3002: 'C:\\\\Users\\\\24426\\\\anaconda3\\\\envs\\\\classeval\\\\nltk_data\\\\taggers\\\\averaged_perceptron_tagger.zip'",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "lemmatize_sentence_4": {
                "compilation": "[WinError 32] \u53e6\u4e00\u4e2a\u7a0b\u5e8f\u6b63\u5728\u4f7f\u7528\u6b64\u6587\u4ef6\uff0c\u8fdb\u7a0b\u65e0\u6cd5\u8bbf\u95ee\u3002: 'C:\\\\Users\\\\24426\\\\anaconda3\\\\envs\\\\classeval\\\\nltk_data\\\\taggers\\\\averaged_perceptron_tagger.zip'",
                "errors": {},
                "failures": {},
                "total_run": 0
            }
        }
    },
    "ClassEval_53": {
        "add_word": {
            "add_word_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_word_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_word_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_word_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_word_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_54": {
        "is_game_over": {
            "is_game_over_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_game_over_1": "False != True"
                    }
                },
                "total_run": 5
            },
            "is_game_over_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_game_over_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_game_over_1": "False != True"
                    }
                },
                "total_run": 5
            },
            "is_game_over_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_game_over_1": "False != True"
                    }
                },
                "total_run": 5
            },
            "is_game_over_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_game_over_1": "False != True"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_55": {
        "palindromic_length": {
            "palindromic_length_0": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_length_4": "string index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_palindromic_length": "0 != 2",
                        "test_palindromic_length_2": "0 != 2",
                        "test_palindromic_length_5": "0 != 4"
                    }
                },
                "total_run": 5
            },
            "palindromic_length_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_palindromic_length": "palindromic_length() takes 3 positional arguments but 4 were given",
                        "test_palindromic_length_2": "palindromic_length() takes 3 positional arguments but 4 were given",
                        "test_palindromic_length_3": "palindromic_length() takes 3 positional arguments but 4 were given",
                        "test_palindromic_length_4": "palindromic_length() takes 3 positional arguments but 4 were given",
                        "test_palindromic_length_5": "palindromic_length() takes 3 positional arguments but 4 were given"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "palindromic_length_2": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_length_4": "string index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_palindromic_length": "0 != 2",
                        "test_palindromic_length_2": "0 != 2",
                        "test_palindromic_length_5": "0 != 4"
                    }
                },
                "total_run": 5
            },
            "palindromic_length_3": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_length_4": "string index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_palindromic_length": "0 != 2",
                        "test_palindromic_length_2": "0 != 2",
                        "test_palindromic_length_5": "0 != 4"
                    }
                },
                "total_run": 5
            },
            "palindromic_length_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_length_4": "string index out of range"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_palindromic_length": "0 != 2",
                        "test_palindromic_length_2": "0 != 2",
                        "test_palindromic_length_5": "0 != 4"
                    }
                },
                "total_run": 5
            }
        },
        "palindromic_string": {
            "palindromic_string_0": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_string": "string index out of range",
                        "test_palindromic_string_2": "string index out of range",
                        "test_palindromic_string_3": "string index out of range",
                        "test_palindromic_string_4": "string index out of range",
                        "test_palindromic_string_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "palindromic_string_1": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_string": "string index out of range",
                        "test_palindromic_string_2": "string index out of range",
                        "test_palindromic_string_3": "string index out of range",
                        "test_palindromic_string_4": "string index out of range",
                        "test_palindromic_string_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "palindromic_string_2": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_string": "string index out of range",
                        "test_palindromic_string_2": "string index out of range",
                        "test_palindromic_string_3": "string index out of range",
                        "test_palindromic_string_4": "string index out of range",
                        "test_palindromic_string_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "palindromic_string_3": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_string": "string index out of range",
                        "test_palindromic_string_2": "string index out of range",
                        "test_palindromic_string_3": "string index out of range",
                        "test_palindromic_string_4": "string index out of range",
                        "test_palindromic_string_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "palindromic_string_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_palindromic_string": "string index out of range",
                        "test_palindromic_string_2": "string index out of range",
                        "test_palindromic_string_3": "string index out of range",
                        "test_palindromic_string_4": "string index out of range",
                        "test_palindromic_string_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_56": {
        "recall": {
            "recall_0": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_recall_6": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "recall_1": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_recall_6": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "recall_2": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_recall_6": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "recall_3": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_recall_6": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "recall_4": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_recall_6": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_57": {
        "map": {
            "map_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_map_1": "name 'compute_precision' is not defined",
                        "test_map_2": "name 'compute_precision' is not defined",
                        "test_map_3": "name 'compute_precision' is not defined",
                        "test_map_4": "name 'compute_precision' is not defined",
                        "test_map_5": "name 'compute_precision' is not defined",
                        "test_map_8": "name 'compute_precision' is not defined"
                    },
                    "TypeError": {
                        "test_map_7": "cannot unpack non-iterable numpy.float64 object"
                    }
                },
                "failures": {},
                "total_run": 8
            },
            "map_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_map_1": "cannot unpack non-iterable float object",
                        "test_map_2": "cannot unpack non-iterable float object"
                    },
                    "ZeroDivisionError": {
                        "test_map_7": "division by zero",
                        "test_map_8": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_map_3": "0.25 != 0.3333333333333333",
                        "test_map_4": "0.3125 != 0.40625",
                        "test_map_5": "0.3125 != 0.3645833333333333"
                    }
                },
                "total_run": 8
            },
            "map_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_map_1": "type object 'MetricsCalculator2' has no attribute 'compute_precision'",
                        "test_map_2": "type object 'MetricsCalculator2' has no attribute 'compute_precision'",
                        "test_map_3": "type object 'MetricsCalculator2' has no attribute 'compute_precision'",
                        "test_map_4": "type object 'MetricsCalculator2' has no attribute 'compute_precision'",
                        "test_map_5": "type object 'MetricsCalculator2' has no attribute 'compute_precision'",
                        "test_map_8": "type object 'MetricsCalculator2' has no attribute 'compute_precision'"
                    },
                    "ZeroDivisionError": {
                        "test_map_7": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 8
            },
            "map_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_map_1": "unsupported operand type(s) for *: 'NoneType' and 'NoneType'",
                        "test_map_2": "unsupported operand type(s) for *: 'NoneType' and 'NoneType'",
                        "test_map_3": "unsupported operand type(s) for *: 'NoneType' and 'NoneType'",
                        "test_map_4": "unsupported operand type(s) for *: 'NoneType' and 'NoneType'",
                        "test_map_5": "unsupported operand type(s) for *: 'NoneType' and 'NoneType'",
                        "test_map_8": "unsupported operand type(s) for *: 'NoneType' and 'NoneType'"
                    },
                    "ZeroDivisionError": {
                        "test_map_7": "division by zero"
                    }
                },
                "failures": {},
                "total_run": 8
            },
            "map_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_map_1": "cannot unpack non-iterable float object",
                        "test_map_2": "cannot unpack non-iterable float object"
                    },
                    "ZeroDivisionError": {
                        "test_map_8": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_map_3": "0.25 != 0.3333333333333333",
                        "test_map_4": "0.3125 != 0.40625",
                        "test_map_5": "0.3125 != 0.3645833333333333",
                        "test_map_7": "nan != 0.0"
                    }
                },
                "total_run": 8
            }
        }
    },
    "ClassEval_58": {
        "sweep": {
            "sweep_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_sweep_4": "'MinesweeperGame' object has no attribute 'explore'"
                    },
                    "TypeError": {
                        "test_sweep": "check_won() missing 1 required positional argument: 'map'",
                        "test_sweep_3": "check_won() missing 1 required positional argument: 'map'",
                        "test_sweep_5": "check_won() missing 1 required positional argument: 'map'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "sweep_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sweep": "0 != 1",
                        "test_sweep_2": "True != False",
                        "test_sweep_3": "[['-', 1, '0'], ['1', '1', '0'], ['0', '0', '0']] != True",
                        "test_sweep_4": "0 != 1",
                        "test_sweep_5": "0 != 1"
                    }
                },
                "total_run": 5
            },
            "sweep_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_sweep": "'MinesweeperGame' object has no attribute 'calculate_mine_count'",
                        "test_sweep_3": "'MinesweeperGame' object has no attribute 'calculate_mine_count'",
                        "test_sweep_4": "'MinesweeperGame' object has no attribute 'calculate_mine_count'",
                        "test_sweep_5": "'MinesweeperGame' object has no attribute 'calculate_mine_count'"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_sweep_2": "[['X', '-', '-'], ['-', '-', '-'], ['-', '-', '-']] != False"
                    }
                },
                "total_run": 5
            },
            "sweep_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sweep": "0 != 1",
                        "test_sweep_2": "[['X', '-', '-'], ['-', '-', '-'], ['-', '-', '-']] != False",
                        "test_sweep_3": "[['-', 1, '0'], ['1', '1', '0'], ['0', '0', '0']] != True",
                        "test_sweep_4": "0 != 1",
                        "test_sweep_5": "0 != 1"
                    }
                },
                "total_run": 5
            },
            "sweep_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sweep": "0 != 1",
                        "test_sweep_2": "True != False",
                        "test_sweep_3": "[['-', 1, '0'], ['1', '1', '0'], ['0', '0', '0']] != True",
                        "test_sweep_4": "0 != 1",
                        "test_sweep_5": "0 != 1"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_59": {
        "add_movie": {
            "add_movie_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_movie_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_movie_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_movie_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_movie_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "available_movies": {
            "available_movies_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_available_movies_1": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_2": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_3": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_4": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_5": "'<=' not supported between instances of 'str' and 'datetime.datetime'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "available_movies_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_available_movies_1": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_2": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_3": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_4": "'<=' not supported between instances of 'str' and 'datetime.datetime'",
                        "test_available_movies_5": "'<=' not supported between instances of 'str' and 'datetime.datetime'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "available_movies_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_available_movies_3": "Lists differ: ['Batman', 'Spiderman'] != ['Batman']"
                    }
                },
                "total_run": 5
            },
            "available_movies_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_available_movies_3": "Lists differ: ['Batman', 'Spiderman'] != ['Batman']"
                    }
                },
                "total_run": 5
            },
            "available_movies_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_available_movies_3": "Lists differ: ['Batman', 'Spiderman'] != ['Batman']"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_6": {},
    "ClassEval_60": {
        "create_table": {
            "create_table_0": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_ticket_1": "table tickets has no column named theater_name",
                        "test_insert_ticket_2": "table tickets has no column named theater_name",
                        "test_insert_ticket_3": "table tickets has no column named theater_name",
                        "test_insert_ticket_4": "table tickets has no column named theater_name",
                        "test_insert_ticket_5": "table tickets has no column named theater_name"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "create_table_1": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_ticket_1": "table tickets has no column named theater_name",
                        "test_insert_ticket_2": "table tickets has no column named theater_name",
                        "test_insert_ticket_3": "table tickets has no column named theater_name",
                        "test_insert_ticket_4": "table tickets has no column named theater_name",
                        "test_insert_ticket_5": "table tickets has no column named theater_name"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "create_table_2": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_ticket_1": "table tickets has no column named theater_name",
                        "test_insert_ticket_2": "table tickets has no column named theater_name",
                        "test_insert_ticket_3": "table tickets has no column named theater_name",
                        "test_insert_ticket_4": "table tickets has no column named theater_name",
                        "test_insert_ticket_5": "table tickets has no column named theater_name"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "create_table_3": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_ticket_1": "table tickets has no column named theater_name",
                        "test_insert_ticket_2": "table tickets has no column named theater_name",
                        "test_insert_ticket_3": "table tickets has no column named theater_name",
                        "test_insert_ticket_4": "table tickets has no column named theater_name",
                        "test_insert_ticket_5": "table tickets has no column named theater_name"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "create_table_4": {
                "compilation": "success",
                "errors": {
                    "sqlite3.OperationalError": {
                        "test_insert_ticket_1": "table tickets has no column named theater_name",
                        "test_insert_ticket_2": "table tickets has no column named theater_name",
                        "test_insert_ticket_3": "table tickets has no column named theater_name",
                        "test_insert_ticket_4": "table tickets has no column named theater_name",
                        "test_insert_ticket_5": "table tickets has no column named theater_name"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_61": {
        "previous_song": {
            "previous_song_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_previous_song2": "True != False"
                    }
                },
                "total_run": 5
            },
            "previous_song_1": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_previous_song4": "None is not in list",
                        "test_previous_song5": "None is not in list"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_previous_song2": "True != False"
                    }
                },
                "total_run": 5
            },
            "previous_song_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_previous_song2": "True != False"
                    }
                },
                "total_run": 5
            },
            "previous_song_3": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_previous_song4": "None is not in list",
                        "test_previous_song5": "None is not in list"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_previous_song2": "True != False"
                    }
                },
                "total_run": 5
            },
            "previous_song_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_previous_song2": "True != False"
                    }
                },
                "total_run": 5
            }
        },
        "shuffle": {
            "shuffle_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_shuffle": "name 'random' is not defined",
                        "test_shuffle_3": "name 'random' is not defined",
                        "test_shuffle_4": "name 'random' is not defined",
                        "test_shuffle_5": "name 'random' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "shuffle_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_shuffle": "name 'random' is not defined",
                        "test_shuffle_3": "name 'random' is not defined",
                        "test_shuffle_4": "name 'random' is not defined",
                        "test_shuffle_5": "name 'random' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "shuffle_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_shuffle": "name 'random' is not defined",
                        "test_shuffle_3": "name 'random' is not defined",
                        "test_shuffle_4": "name 'random' is not defined",
                        "test_shuffle_5": "name 'random' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "shuffle_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_shuffle": "name 'random' is not defined",
                        "test_shuffle_3": "name 'random' is not defined",
                        "test_shuffle_4": "name 'random' is not defined",
                        "test_shuffle_5": "name 'random' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "shuffle_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_shuffle": "name 'random' is not defined",
                        "test_shuffle_3": "name 'random' is not defined",
                        "test_shuffle_4": "name 'random' is not defined",
                        "test_shuffle_5": "name 'random' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_62": {
        "process": {
            "process_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_empty_string_list": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_single_word_sentences": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_stop_words_only": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_stop_words_only_2": "'NLPDataProcessor' object has no attribute 'process'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_empty_string_list": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_single_word_sentences": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_stop_words_only": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_stop_words_only_2": "'NLPDataProcessor' object has no attribute 'process'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_process": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_empty_string_list": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_single_word_sentences": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_stop_words_only": "'NLPDataProcessor' object has no attribute 'process'",
                        "test_process_with_stop_words_only_2": "'NLPDataProcessor' object has no attribute 'process'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "process_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "remove_stop_words": {
            "remove_stop_words_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_remove_stop_words": "'NLPDataProcessor' object has no attribute 'remove_stop_words'",
                        "test_remove_stop_words_2": "'NLPDataProcessor' object has no attribute 'remove_stop_words'",
                        "test_remove_stop_words_3": "'NLPDataProcessor' object has no attribute 'remove_stop_words'",
                        "test_remove_stop_words_4": "'NLPDataProcessor' object has no attribute 'remove_stop_words'",
                        "test_remove_stop_words_5": "'NLPDataProcessor' object has no attribute 'remove_stop_words'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "remove_stop_words_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_stop_words_5": "Lists differ: [['This', 'test'], ['This', 'apple'], ['This', 'dog']] != [['is', 'test'], ['is', 'apple'], ['is', 'dog']]"
                    }
                },
                "total_run": 5
            },
            "remove_stop_words_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_stop_words": "Lists differ: ['This is test', 'This is apple', 'This is dog'] != [['This', 'is', 'test'], ['This', 'is', 'apple'], ['This', 'is', 'dog']]",
                        "test_remove_stop_words_2": "Lists differ: ['', '', ''] != [[], [], []]",
                        "test_remove_stop_words_4": "Lists differ: ['This is a test', 'This is an apple', 'This is the dog'] != [['This', 'is', 'a', 'test'], ['This', 'is[43 chars]og']]",
                        "test_remove_stop_words_5": "Lists differ: ['This test', 'This apple', 'This dog'] != [['is', 'test'], ['is', 'apple'], ['is', 'dog']]"
                    }
                },
                "total_run": 5
            },
            "remove_stop_words_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_stop_words_5": "Lists differ: [['This', 'test'], ['This', 'apple'], ['This', 'dog']] != [['is', 'test'], ['is', 'apple'], ['is', 'dog']]"
                    }
                },
                "total_run": 5
            },
            "remove_stop_words_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_remove_stop_words_5": "Lists differ: [['This', 'test'], ['This', 'apple'], ['This', 'dog']] != [['is', 'test'], ['is', 'apple'], ['is', 'dog']]"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_63": {
        "calculate_word_frequency": {
            "calculate_word_frequency_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_word_frequency_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_word_frequency_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_word_frequency": "{'hello': 4, 'world': 3, 'this': 2, 'is': 2, 'test': 2, 'a': 1, 'another': 1} != {'hello': 4, 'world': 3, 'this': 2, 'is': 2, 'test': 2}",
                        "test_calculate_word_frequency2": "{'world': 6, 'hello': 4, 'this': 2, 'is': 2, 'test': 2, 'a': 1, 'another': 1} != {'world': 6, 'hello': 4, 'this': 2, 'is': 2, 'test': 2}",
                        "test_calculate_word_frequency4": "{'%%%': 6, 'hello': 5, 'world': 4, 'this': 2, 'is': 2, 'a': 2, 'another': 1} != {'%%%': 6, 'hello': 5, 'world': 4, 'is': 2, 'this': 2}",
                        "test_calculate_word_frequency5": "{'%%%': 12, 'hello': 10, 'world': 8, 'this': 4, 'is': 4, 'a': 4, 'another': 2} != {'%%%': 12, 'hello': 10, 'world': 8, 'is': 4, 'this': 4}"
                    }
                },
                "total_run": 5
            },
            "calculate_word_frequency_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_word_frequency_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "process_data": {
            "process_data_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "process_data_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_process_data": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data2": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data3": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data4": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data5": "process_data() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_data_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "process_data_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "process_data_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_process_data": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data2": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data3": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data4": "process_data() takes 1 positional argument but 2 were given",
                        "test_process_data5": "process_data() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_64": {
        "binary_to_decimal": {
            "binary_to_decimal_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "binary_to_decimal_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "binary_to_decimal_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_binary_to_decimal": "not all arguments converted during string formatting",
                        "test_binary_to_decimal_2": "not all arguments converted during string formatting",
                        "test_binary_to_decimal_3": "not all arguments converted during string formatting",
                        "test_binary_to_decimal_4": "not all arguments converted during string formatting",
                        "test_binary_to_decimal_5": "not all arguments converted during string formatting"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "binary_to_decimal_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "binary_to_decimal_4": {
                "compilation": "success",
                "errors": {
                    "IndexError": {
                        "test_binary_to_decimal": "string index out of range",
                        "test_binary_to_decimal_2": "string index out of range",
                        "test_binary_to_decimal_3": "string index out of range",
                        "test_binary_to_decimal_4": "string index out of range",
                        "test_binary_to_decimal_5": "string index out of range"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "decimal_to_binary": {
            "decimal_to_binary_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_binary_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_binary_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_binary_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_binary_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "decimal_to_hex": {
            "decimal_to_hex_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_hex_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_hex_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_decimal_to_hex": "'a5b7' != '0xa5b7'",
                        "test_decimal_to_hex_2": "'5317' != '0x5317'",
                        "test_decimal_to_hex_3": "'14bab' != '0x14bab'",
                        "test_decimal_to_hex_4": "'29757' != '0x29757'",
                        "test_decimal_to_hex_5": "'52eb7' != '0x52eb7'"
                    }
                },
                "total_run": 5
            },
            "decimal_to_hex_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_hex_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "decimal_to_octal": {
            "decimal_to_octal_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_octal_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_octal_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_octal_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "decimal_to_octal_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "hex_to_decimal": {
            "hex_to_decimal_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "hex_to_decimal_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "hex_to_decimal_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "hex_to_decimal_3": {
                "compilation": "unexpected unindent (ClassEval_64_hex_to_decimal_3.py, line 30)",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "hex_to_decimal_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_65": {
        "parse_more": {
            "parse_more_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_more_2": "'thousand' != 'THOUSAND'",
                        "test_parse_more_3": "'million' != 'MILLION'",
                        "test_parse_more_4": "'billion' != 'BILLION'"
                    }
                },
                "total_run": 4
            },
            "parse_more_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 4
            },
            "parse_more_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_more_2": "'thousand' != 'THOUSAND'",
                        "test_parse_more_3": "'million' != 'MILLION'",
                        "test_parse_more_4": "'billion' != 'BILLION'"
                    }
                },
                "total_run": 4
            },
            "parse_more_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_more_2": "'thousand' != 'THOUSAND'",
                        "test_parse_more_3": "'million' != 'MILLION'",
                        "test_parse_more_4": "'billion' != 'BILLION'"
                    }
                },
                "total_run": 4
            },
            "parse_more_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_more_2": "'thousand' != 'THOUSAND'",
                        "test_parse_more_3": "'million' != 'MILLION'",
                        "test_parse_more_4": "'billion' != 'BILLION'"
                    }
                },
                "total_run": 4
            }
        }
    },
    "ClassEval_66": {
        "is_hex_char": {
            "is_hex_char_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_hex_char_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_hex_char_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_hex_char_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_is_hex_char_1": "is_hex_char() missing 1 required positional argument: 'char'",
                        "test_is_hex_char_2": "is_hex_char() missing 1 required positional argument: 'char'",
                        "test_is_hex_char_3": "is_hex_char() missing 1 required positional argument: 'char'",
                        "test_is_hex_char_4": "is_hex_char() missing 1 required positional argument: 'char'",
                        "test_is_hex_char_5": "is_hex_char() missing 1 required positional argument: 'char'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "is_hex_char_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_67": {
        "add_dish": {
            "add_dish_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_dish_6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "add_dish_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_dish_1": "False is not true",
                        "test_add_dish_3": "False is not true",
                        "test_add_dish_4": "False is not true",
                        "test_add_dish_5": "False is not true",
                        "test_add_dish_6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "add_dish_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_dish_6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "add_dish_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_dish_6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "add_dish_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_dish_1": "False is not true",
                        "test_add_dish_3": "False is not true",
                        "test_add_dish_4": "False is not true",
                        "test_add_dish_5": "False is not true",
                        "test_add_dish_6": "False is not true"
                    }
                },
                "total_run": 6
            }
        },
        "calculate_total": {
            "calculate_total_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_total_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_total_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_total_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "calculate_total_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_68": {
        "get_page_info": {
            "get_page_info_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_page_info_5": "{'current_page': 5, 'per_page': 3, 'total_[77 chars]: []} != {}"
                    }
                },
                "total_run": 5
            },
            "get_page_info_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_page_info_5": "{'current_page': 5, 'per_page': 3, 'total_[77 chars]: []} != {}"
                    }
                },
                "total_run": 5
            },
            "get_page_info_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_page_info_5": "{'current_page': 5, 'per_page': 3, 'total_[77 chars]: []} != {}"
                    }
                },
                "total_run": 5
            },
            "get_page_info_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_page_info_5": "{'current_page': 5, 'per_page': 3, 'total_[77 chars]: []} != {}"
                    }
                },
                "total_run": 5
            },
            "get_page_info_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_page_info_5": "{'current_page': 5, 'per_page': 3, 'total_[77 chars]: []} != {}"
                    }
                },
                "total_run": 5
            }
        },
        "search": {
            "search_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_search_1": "argument of type 'int' is not iterable",
                        "test_search_2": "argument of type 'int' is not iterable",
                        "test_search_3": "argument of type 'int' is not iterable",
                        "test_search_4": "argument of type 'int' is not iterable",
                        "test_search_5": "argument of type 'int' is not iterable"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "search_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_search_1": "argument of type 'int' is not iterable",
                        "test_search_2": "argument of type 'int' is not iterable",
                        "test_search_3": "argument of type 'int' is not iterable",
                        "test_search_4": "argument of type 'int' is not iterable",
                        "test_search_5": "argument of type 'int' is not iterable"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "search_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "search_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_search_1": "argument of type 'int' is not iterable",
                        "test_search_2": "argument of type 'int' is not iterable",
                        "test_search_3": "argument of type 'int' is not iterable",
                        "test_search_4": "argument of type 'int' is not iterable",
                        "test_search_5": "argument of type 'int' is not iterable"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "search_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_search_1": "argument of type 'int' is not iterable",
                        "test_search_2": "argument of type 'int' is not iterable",
                        "test_search_3": "argument of type 'int' is not iterable",
                        "test_search_4": "argument of type 'int' is not iterable",
                        "test_search_5": "argument of type 'int' is not iterable"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_69": {
        "extract_text_from_pdfs": {
            "extract_text_from_pdfs_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_merge_pdfs": "name 'TestPDFHandler' is not defined"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "extract_text_from_pdfs_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_merge_pdfs": "name 'TestPDFHandler' is not defined"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "extract_text_from_pdfs_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_merge_pdfs": "name 'TestPDFHandler' is not defined"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "extract_text_from_pdfs_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_merge_pdfs": "name 'TestPDFHandler' is not defined"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "extract_text_from_pdfs_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_merge_pdfs": "name 'TestPDFHandler' is not defined"
                    }
                },
                "failures": {},
                "total_run": 1
            }
        },
        "merge_pdfs": {
            "merge_pdfs_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "merge_pdfs_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "merge_pdfs_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "merge_pdfs_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "merge_pdfs_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 0
            }
        }
    },
    "ClassEval_7": {},
    "ClassEval_70": {
        "_validate_name": {
            "_validate_name_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_name_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_name_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_name_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "_validate_name_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_71": {
        "init_game": {
            "init_game_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_init_game_7": "0 != 1"
                    }
                },
                "total_run": 7
            },
            "init_game_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_init_game_7": "0 != 1"
                    }
                },
                "total_run": 7
            },
            "init_game_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_init_game_7": "0 != 1"
                    }
                },
                "total_run": 7
            },
            "init_game_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_init_game_3": "0 != 1",
                        "test_init_game_4": "0 != 1",
                        "test_init_game_7": "0 != 1"
                    }
                },
                "total_run": 7
            },
            "init_game_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 7
            }
        }
    },
    "ClassEval_72": {
        "findall": {
            "findall_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "findall_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "findall_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "findall_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "findall_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "generate_email_pattern": {
            "generate_email_pattern_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_email_pattern_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_email_pattern_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_email_pattern_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_email_pattern_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "generate_phone_number_pattern": {
            "generate_phone_number_pattern_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_phone_number_pattern_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_phone_number_pattern_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_phone_number_pattern_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_phone_number_pattern_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "generate_split_sentences_pattern": {
            "generate_split_sentences_pattern_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_generate_split_sentences_pattern_1": "False != True",
                        "test_generate_split_sentences_pattern_2": "False != True"
                    }
                },
                "total_run": 5
            },
            "generate_split_sentences_pattern_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "generate_split_sentences_pattern_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_generate_split_sentences_pattern_1": "False != True",
                        "test_generate_split_sentences_pattern_2": "False != True"
                    }
                },
                "total_run": 5
            },
            "generate_split_sentences_pattern_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_generate_split_sentences_pattern_1": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_2": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_3": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_4": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_5": "name 'sentence1' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "generate_split_sentences_pattern_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_generate_split_sentences_pattern_1": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_2": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_3": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_4": "name 'sentence1' is not defined",
                        "test_generate_split_sentences_pattern_5": "name 'sentence1' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "match": {
            "match_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "match_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "match_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "match_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "match_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "split_sentences": {
            "split_sentences_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_1": "Lists differ: ['Aaa.', 'Bbbb?', 'Ccc!'] != ['Aaa', 'Bbbb', 'Ccc!']",
                        "test_split_sentences_2": "Lists differ: ['Aaa.Bbbb?', 'Ccc!'] != ['Aaa.Bbbb', 'Ccc!']",
                        "test_split_sentences_3": "Lists differ: ['Aaa.', 'bbbb?', 'Ccc!'] != ['Aaa. bbbb', 'Ccc!']",
                        "test_split_sentences_4": "Lists differ: ['Aaa.', 'bbbb, Ccc!'] != ['Aaa. bbbb, Ccc!']",
                        "test_split_sentences_5": "Lists differ: ['Aaa, Bbbb?', 'Ccc!'] != ['Aaa, Bbbb', 'Ccc!']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_1": "Lists differ: ['Aaa.', 'Bbbb?', 'Ccc!'] != ['Aaa', 'Bbbb', 'Ccc!']",
                        "test_split_sentences_2": "Lists differ: ['Aaa.Bbbb?', 'Ccc!'] != ['Aaa.Bbbb', 'Ccc!']",
                        "test_split_sentences_3": "Lists differ: ['Aaa.', 'bbbb?', 'Ccc!'] != ['Aaa. bbbb', 'Ccc!']",
                        "test_split_sentences_4": "Lists differ: ['Aaa.', 'bbbb, Ccc!'] != ['Aaa. bbbb, Ccc!']",
                        "test_split_sentences_5": "Lists differ: ['Aaa, Bbbb?', 'Ccc!'] != ['Aaa, Bbbb', 'Ccc!']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_1": "Lists differ: ['Aaa.', 'Bbbb?', 'Ccc!'] != ['Aaa', 'Bbbb', 'Ccc!']",
                        "test_split_sentences_2": "Lists differ: ['Aaa.Bbbb?', 'Ccc!'] != ['Aaa.Bbbb', 'Ccc!']",
                        "test_split_sentences_3": "Lists differ: ['Aaa.', 'bbbb?', 'Ccc!'] != ['Aaa. bbbb', 'Ccc!']",
                        "test_split_sentences_4": "Lists differ: ['Aaa.', 'bbbb, Ccc!'] != ['Aaa. bbbb, Ccc!']",
                        "test_split_sentences_5": "Lists differ: ['Aaa, Bbbb?', 'Ccc!'] != ['Aaa, Bbbb', 'Ccc!']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_1": "Lists differ: ['Aaa.', 'Bbbb?', 'Ccc!'] != ['Aaa', 'Bbbb', 'Ccc!']",
                        "test_split_sentences_2": "Lists differ: ['Aaa.Bbbb?', 'Ccc!'] != ['Aaa.Bbbb', 'Ccc!']",
                        "test_split_sentences_3": "Lists differ: ['Aaa.', 'bbbb?', 'Ccc!'] != ['Aaa. bbbb', 'Ccc!']",
                        "test_split_sentences_4": "Lists differ: ['Aaa.', 'bbbb, Ccc!'] != ['Aaa. bbbb, Ccc!']",
                        "test_split_sentences_5": "Lists differ: ['Aaa, Bbbb?', 'Ccc!'] != ['Aaa, Bbbb', 'Ccc!']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_1": "Lists differ: ['Aaa.', 'Bbbb?', 'Ccc!'] != ['Aaa', 'Bbbb', 'Ccc!']",
                        "test_split_sentences_2": "Lists differ: ['Aaa.Bbbb?', 'Ccc!'] != ['Aaa.Bbbb', 'Ccc!']",
                        "test_split_sentences_3": "Lists differ: ['Aaa.', 'bbbb?', 'Ccc!'] != ['Aaa. bbbb', 'Ccc!']",
                        "test_split_sentences_4": "Lists differ: ['Aaa.', 'bbbb, Ccc!'] != ['Aaa. bbbb, Ccc!']",
                        "test_split_sentences_5": "Lists differ: ['Aaa, Bbbb?', 'Ccc!'] != ['Aaa, Bbbb', 'Ccc!']"
                    }
                },
                "total_run": 5
            }
        },
        "sub": {
            "sub_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sub_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sub_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sub_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sub_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_73": {
        "heal": {
            "heal_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "heal_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "heal_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "heal_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "heal_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "is_alive": {
            "is_alive_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_alive_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_alive_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_alive_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "is_alive_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_74": {
        "add_white_list": {
            "add_white_list_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_white_list_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_white_list_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_white_list_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_white_list_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "show": {
            "show_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "show_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "show_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "show_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "show_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_75": {
        "remove_item": {
            "remove_item_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_item_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_item_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_item_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            },
            "remove_item_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 6
            }
        },
        "total_price": {
            "total_price_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "total_price_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "total_price_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "total_price_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "total_price_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "view_items": {
            "view_items_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_items_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_items_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_items_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_items_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_76": {
        "add_user": {
            "add_user_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_user_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_user_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_user_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_user_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "all_not_signed_in": {
            "all_not_signed_in_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "all_not_signed_in_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "all_not_signed_in_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "all_not_signed_in_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "all_not_signed_in_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "sign_in": {
            "sign_in_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sign_in_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sign_in_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sign_in_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "sign_in_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_77": {
        "move": {
            "move_0": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_move_1": "local variable 'new_head' referenced before assignment",
                        "test_move_2": "local variable 'new_head' referenced before assignment",
                        "test_move_3": "local variable 'new_head' referenced before assignment",
                        "test_move_4": "local variable 'new_head' referenced before assignment",
                        "test_move_5": "local variable 'new_head' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "move_1": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_move_1": "local variable 'new_head' referenced before assignment",
                        "test_move_2": "local variable 'new_head' referenced before assignment",
                        "test_move_3": "local variable 'new_head' referenced before assignment",
                        "test_move_4": "local variable 'new_head' referenced before assignment",
                        "test_move_5": "local variable 'new_head' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "move_2": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_move_1": "local variable 'new_head' referenced before assignment",
                        "test_move_2": "local variable 'new_head' referenced before assignment",
                        "test_move_3": "local variable 'new_head' referenced before assignment",
                        "test_move_4": "local variable 'new_head' referenced before assignment",
                        "test_move_5": "local variable 'new_head' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "move_3": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_move_1": "local variable 'new_head' referenced before assignment",
                        "test_move_2": "local variable 'new_head' referenced before assignment",
                        "test_move_3": "local variable 'new_head' referenced before assignment",
                        "test_move_4": "local variable 'new_head' referenced before assignment",
                        "test_move_5": "local variable 'new_head' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "move_4": {
                "compilation": "success",
                "errors": {
                    "UnboundLocalError": {
                        "test_move_1": "local variable 'new_head' referenced before assignment",
                        "test_move_2": "local variable 'new_head' referenced before assignment",
                        "test_move_3": "local variable 'new_head' referenced before assignment",
                        "test_move_4": "local variable 'new_head' referenced before assignment",
                        "test_move_5": "local variable 'new_head' referenced before assignment"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "random_food_position": {
            "random_food_position_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "random_food_position_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "random_food_position_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "random_food_position_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "random_food_position_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_78": {
        "split_sentences": {
            "split_sentences_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_3": "Lists differ: ['Who is A.', 'B.', 'C.', '?', 'He is a teacher.'] != ['Who is A.B.C.?', 'He is a teacher.']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_3": "Lists differ: ['Who is A.', 'B.', 'C.', '?', 'He is a teacher.'] != ['Who is A.B.C.?', 'He is a teacher.']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_3": "Lists differ: ['Who is A.', 'B.', 'C.', '?', 'He is a teacher.'] != ['Who is A.B.C.?', 'He is a teacher.']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_3": "Lists differ: ['Who is A.', 'B.', 'C.', '?', 'He is a teacher.'] != ['Who is A.B.C.?', 'He is a teacher.']"
                    }
                },
                "total_run": 5
            },
            "split_sentences_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_split_sentences_3": "Lists differ: ['Who is A.', 'B.', 'C.', '?', 'He is a teacher.'] != ['Who is A.B.C.?', 'He is a teacher.']"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_79": {
        "insert": {
            "insert_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "select_by_age_range": {
            "select_by_age_range_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_by_age_range_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_by_age_range_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_by_age_range_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_by_age_range_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "select_female_under_age": {
            "select_female_under_age_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_female_under_age_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_female_under_age_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_female_under_age_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "select_female_under_age_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "update": {
            "update_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "update_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "update_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "update_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "update_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_8": {
        "view_balance": {
            "view_balance_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_balance_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_balance_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_balance_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "view_balance_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "withdraw": {
            "withdraw_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "withdraw_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_80": {
        "update": {
            "update_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_update_1": "\"UPDATE users SET age='35' WHERE name='Tom';\" != \"UPDATE users SET age='35' WHERE name='Tom'\"",
                        "test_update_2": "\"UPDATE students SET age='18' WHERE name='Tom';\" != \"UPDATE students SET age='18' WHERE name='Tom'\"",
                        "test_update_3": "\"UPDATE items SET price='1.0' WHERE name='apple';\" != \"UPDATE items SET price='1.0' WHERE name='apple'\"",
                        "test_update_4": "\"UPDATE items SET price='1.0' WHERE name='aaa';\" != \"UPDATE items SET price='1.0' WHERE name='aaa'\"",
                        "test_update_5": "\"UPDATE items SET price='1.0' WHERE name='bbb';\" != \"UPDATE items SET price='1.0' WHERE name='bbb'\"",
                        "test_update_6": "\"UPDATE items SET price='1.0' ;\" != \"UPDATE items SET price='1.0'\""
                    }
                },
                "total_run": 6
            },
            "update_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_update_1": "\"UPDATE users SET age = '35' WHERE name = 'Tom';\" != \"UPDATE users SET age='35' WHERE name='Tom'\"",
                        "test_update_2": "\"UPDATE students SET age = '18' WHERE name = 'Tom';\" != \"UPDATE students SET age='18' WHERE name='Tom'\"",
                        "test_update_3": "\"UPDATE items SET price = '1.0' WHERE name = 'apple';\" != \"UPDATE items SET price='1.0' WHERE name='apple'\"",
                        "test_update_4": "\"UPDATE items SET price = '1.0' WHERE name = 'aaa';\" != \"UPDATE items SET price='1.0' WHERE name='aaa'\"",
                        "test_update_5": "\"UPDATE items SET price = '1.0' WHERE name = 'bbb';\" != \"UPDATE items SET price='1.0' WHERE name='bbb'\"",
                        "test_update_6": "\"UPDATE items SET price = '1.0' ;\" != \"UPDATE items SET price='1.0'\""
                    }
                },
                "total_run": 6
            },
            "update_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_update_1": "\"UPDATE users SET age = '35' WHERE name = 'Tom';\" != \"UPDATE users SET age='35' WHERE name='Tom'\"",
                        "test_update_2": "\"UPDATE students SET age = '18' WHERE name = 'Tom';\" != \"UPDATE students SET age='18' WHERE name='Tom'\"",
                        "test_update_3": "\"UPDATE items SET price = '1.0' WHERE name = 'apple';\" != \"UPDATE items SET price='1.0' WHERE name='apple'\"",
                        "test_update_4": "\"UPDATE items SET price = '1.0' WHERE name = 'aaa';\" != \"UPDATE items SET price='1.0' WHERE name='aaa'\"",
                        "test_update_5": "\"UPDATE items SET price = '1.0' WHERE name = 'bbb';\" != \"UPDATE items SET price='1.0' WHERE name='bbb'\"",
                        "test_update_6": "\"UPDATE items SET price = '1.0' ;\" != \"UPDATE items SET price='1.0'\""
                    }
                },
                "total_run": 6
            },
            "update_3": {
                "compilation": "invalid syntax (ClassEval_80_update_3.py, line 28)",
                "errors": {},
                "failures": {},
                "total_run": 0
            },
            "update_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_update_1": "\"UPDATE users SET age = '35' WHERE name = 'Tom';\" != \"UPDATE users SET age='35' WHERE name='Tom'\"",
                        "test_update_2": "\"UPDATE students SET age = '18' WHERE name = 'Tom';\" != \"UPDATE students SET age='18' WHERE name='Tom'\"",
                        "test_update_3": "\"UPDATE items SET price = '1.0' WHERE name = 'apple';\" != \"UPDATE items SET price='1.0' WHERE name='apple'\"",
                        "test_update_4": "\"UPDATE items SET price = '1.0' WHERE name = 'aaa';\" != \"UPDATE items SET price='1.0' WHERE name='aaa'\"",
                        "test_update_5": "\"UPDATE items SET price = '1.0' WHERE name = 'bbb';\" != \"UPDATE items SET price='1.0' WHERE name='bbb'\"",
                        "test_update_6": "\"UPDATE items SET price = '1.0' ;\" != \"UPDATE items SET price='1.0'\""
                    }
                },
                "total_run": 6
            }
        }
    },
    "ClassEval_81": {
        "correlation": {
            "correlation_0": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_correlation_5": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_correlation": "0.0015779092702169625 != 1.0",
                        "test_correlation_2": "0.0005067339309040134 != 1.0",
                        "test_correlation_3": "0.16666666666666666 != 1.0",
                        "test_correlation_4": "0.012345679012345678 != None"
                    }
                },
                "total_run": 5
            },
            "correlation_1": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_correlation_5": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_correlation": "0.0015779092702169625 != 1.0",
                        "test_correlation_2": "0.0005067339309040134 != 1.0",
                        "test_correlation_3": "0.16666666666666666 != 1.0",
                        "test_correlation_4": "0.012345679012345678 != None"
                    }
                },
                "total_run": 5
            },
            "correlation_2": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_correlation_5": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_correlation": "0.0015779092702169625 != 1.0",
                        "test_correlation_2": "0.0005067339309040134 != 1.0",
                        "test_correlation_3": "0.16666666666666666 != 1.0",
                        "test_correlation_4": "0.012345679012345678 != None"
                    }
                },
                "total_run": 5
            },
            "correlation_3": {
                "compilation": "success",
                "errors": {
                    "ValueError": {
                        "test_correlation": "math domain error",
                        "test_correlation_2": "math domain error",
                        "test_correlation_3": "math domain error"
                    },
                    "ZeroDivisionError": {
                        "test_correlation_4": "float division by zero",
                        "test_correlation_5": "float division by zero"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "correlation_4": {
                "compilation": "success",
                "errors": {
                    "ZeroDivisionError": {
                        "test_correlation_5": "division by zero"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_correlation": "0.0015779092702169625 != 1.0",
                        "test_correlation_2": "0.0005067339309040134 != 1.0",
                        "test_correlation_3": "0.16666666666666666 != 1.0",
                        "test_correlation_4": "0.012345679012345678 != None"
                    }
                },
                "total_run": 5
            }
        },
        "mode": {
            "mode_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_mode": "mode() missing 1 required positional argument: 'data'",
                        "test_mode_2": "mode() missing 1 required positional argument: 'data'",
                        "test_mode_3": "mode() missing 1 required positional argument: 'data'",
                        "test_mode_4": "mode() missing 1 required positional argument: 'data'",
                        "test_mode_5": "mode() missing 1 required positional argument: 'data'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "mode_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mode_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mode_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "mode_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "z_score": {
            "z_score_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_z_score_3": "unsupported operand type(s) for /: 'float' and 'NoneType'"
                    },
                    "ZeroDivisionError": {
                        "test_z_score_2": "float division by zero",
                        "test_z_score_5": "float division by zero"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "z_score_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_z_score_3": "unsupported operand type(s) for /: 'float' and 'NoneType'"
                    },
                    "ZeroDivisionError": {
                        "test_z_score_2": "float division by zero",
                        "test_z_score_5": "float division by zero"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "z_score_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_z_score": "name 'statistics' is not defined",
                        "test_z_score_2": "name 'statistics' is not defined",
                        "test_z_score_3": "name 'statistics' is not defined",
                        "test_z_score_4": "name 'statistics' is not defined",
                        "test_z_score_5": "name 'statistics' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "z_score_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_z_score_3": "unsupported operand type(s) for /: 'float' and 'NoneType'"
                    },
                    "ZeroDivisionError": {
                        "test_z_score_2": "float division by zero",
                        "test_z_score_5": "float division by zero"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "z_score_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_z_score": "name 'statistics' is not defined",
                        "test_z_score_2": "name 'statistics' is not defined",
                        "test_z_score_3": "name 'statistics' is not defined",
                        "test_z_score_4": "name 'statistics' is not defined",
                        "test_z_score_5": "name 'statistics' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_82": {
        "add_stock": {
            "add_stock_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_stock_2": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_add_stock_4": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]",
                        "test_add_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[108 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 20}]"
                    }
                },
                "total_run": 5
            },
            "add_stock_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_stock_2": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_add_stock_4": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]",
                        "test_add_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[108 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 20}]"
                    }
                },
                "total_run": 5
            },
            "add_stock_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_stock_2": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_add_stock_4": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]",
                        "test_add_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[108 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 20}]"
                    }
                },
                "total_run": 5
            },
            "add_stock_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_stock_2": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_add_stock_4": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]",
                        "test_add_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[108 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 20}]"
                    }
                },
                "total_run": 5
            },
            "add_stock_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_add_stock_2": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_add_stock_4": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]",
                        "test_add_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[108 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 20}]"
                    }
                },
                "total_run": 5
            }
        },
        "buy_stock": {
            "buy_stock_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_buy_stock_3": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_buy_stock_4": "Lists differ: [{'na[82 chars]antity': 10}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}] != [{'na[82 chars]antity': 20}]",
                        "test_buy_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]"
                    }
                },
                "total_run": 5
            },
            "buy_stock_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_buy_stock_3": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_buy_stock_4": "Lists differ: [{'na[82 chars]antity': 10}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}] != [{'na[82 chars]antity': 20}]",
                        "test_buy_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]"
                    }
                },
                "total_run": 5
            },
            "buy_stock_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_buy_stock_3": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_buy_stock_4": "Lists differ: [{'na[82 chars]antity': 10}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}] != [{'na[82 chars]antity': 20}]",
                        "test_buy_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]"
                    }
                },
                "total_run": 5
            },
            "buy_stock_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_buy_stock_3": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_buy_stock_4": "Lists differ: [{'na[82 chars]antity': 10}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}] != [{'na[82 chars]antity': 20}]",
                        "test_buy_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]"
                    }
                },
                "total_run": 5
            },
            "buy_stock_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_buy_stock_3": "Lists differ: [{'na[32 chars]antity': 10}, {'name': 'AAPL', 'price': 150.0, 'quantity': 10}] != [{'na[32 chars]antity': 20}]",
                        "test_buy_stock_4": "Lists differ: [{'na[82 chars]antity': 10}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}] != [{'na[82 chars]antity': 20}]",
                        "test_buy_stock_5": "Lists differ: [{'na[36 chars]ty': 10}, {'name': 'AAPL', 'price': 150.0, 'qu[58 chars] 10}] != [{'na[36 chars]ty': 20}, {'name': 'MSFT', 'price': 150.0, 'quantity': 10}]"
                    }
                },
                "total_run": 5
            }
        },
        "calculate_portfolio_value": {
            "calculate_portfolio_value_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_portfolio_value": "1500.0 != 11500.0",
                        "test_calculate_portfolio_value_2": "3000.0 != 13000.0",
                        "test_calculate_portfolio_value_3": "0 != 10000.0",
                        "test_calculate_portfolio_value_4": "0.0 != 10000.0",
                        "test_calculate_portfolio_value_5": "0.0 != 10000.0"
                    }
                },
                "total_run": 5
            },
            "calculate_portfolio_value_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_portfolio_value": "1500.0 != 11500.0",
                        "test_calculate_portfolio_value_2": "3000.0 != 13000.0",
                        "test_calculate_portfolio_value_3": "0 != 10000.0",
                        "test_calculate_portfolio_value_4": "0.0 != 10000.0",
                        "test_calculate_portfolio_value_5": "0.0 != 10000.0"
                    }
                },
                "total_run": 5
            },
            "calculate_portfolio_value_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_portfolio_value": "1500.0 != 11500.0",
                        "test_calculate_portfolio_value_2": "3000.0 != 13000.0",
                        "test_calculate_portfolio_value_3": "0 != 10000.0",
                        "test_calculate_portfolio_value_4": "0.0 != 10000.0",
                        "test_calculate_portfolio_value_5": "0.0 != 10000.0"
                    }
                },
                "total_run": 5
            },
            "calculate_portfolio_value_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_portfolio_value": "1500.0 != 11500.0",
                        "test_calculate_portfolio_value_2": "3000.0 != 13000.0",
                        "test_calculate_portfolio_value_3": "0 != 10000.0",
                        "test_calculate_portfolio_value_4": "0.0 != 10000.0",
                        "test_calculate_portfolio_value_5": "0.0 != 10000.0"
                    }
                },
                "total_run": 5
            },
            "calculate_portfolio_value_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_calculate_portfolio_value": "1500.0 != 11500.0",
                        "test_calculate_portfolio_value_2": "3000.0 != 13000.0",
                        "test_calculate_portfolio_value_3": "0 != 10000.0",
                        "test_calculate_portfolio_value_4": "0.0 != 10000.0",
                        "test_calculate_portfolio_value_5": "0.0 != 10000.0"
                    }
                },
                "total_run": 5
            }
        },
        "get_portfolio_summary": {
            "get_portfolio_summary_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_portfolio_summary_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_portfolio_summary_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_portfolio_summary": "Tuples differ: (1500.0, [{'name': 'AAPL', 'value': 1500.0}]) != (11500.0, [{'name': 'AAPL', 'value': 1500.0}])",
                        "test_get_portfolio_summary_2": "Tuples differ: (3000.0, [{'name': 'AAPL', 'value': 1500.0[33 chars].0}]) != (13000.0, [{'name': 'AAPL', 'value': 1500.[34 chars].0}])",
                        "test_get_portfolio_summary_3": "Tuples differ: (0, []) != (10000.0, [])",
                        "test_get_portfolio_summary_4": "Tuples differ: (0.0, [{'name': 'AAPL', 'value': 0.0}]) != (10000.0, [{'name': 'AAPL', 'value': 0.0}])",
                        "test_get_portfolio_summary_5": "Tuples differ: (0.0, [{'name': 'AAPL', 'value': 0.0}]) != (10000.0, [{'name': 'AAPL', 'value': 0.0}])"
                    }
                },
                "total_run": 5
            },
            "get_portfolio_summary_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_portfolio_summary_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "sell_stock": {
            "sell_stock_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sell_stock": "False != True"
                    }
                },
                "total_run": 5
            },
            "sell_stock_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sell_stock": "False != True"
                    }
                },
                "total_run": 5
            },
            "sell_stock_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sell_stock": "False != True"
                    }
                },
                "total_run": 5
            },
            "sell_stock_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sell_stock": "False != True"
                    }
                },
                "total_run": 5
            },
            "sell_stock_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sell_stock": "False != True"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_83": {
        "create_student_table": {
            "create_student_table_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_student_table_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_student_table_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_student_table_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "create_student_table_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_84": {
        "process_file": {
            "process_file_0": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_process_file_1": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_2": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_3": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_4": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_5": "[Errno 2] No such file or directory: 'test.txt'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_file_1": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_process_file_1": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_2": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_3": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_4": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_5": "[Errno 2] No such file or directory: 'test.txt'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_file_2": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_process_file_1": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_2": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_3": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_4": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_5": "[Errno 2] No such file or directory: 'test.txt'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_file_3": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_process_file_1": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_2": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_3": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_4": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_5": "[Errno 2] No such file or directory: 'test.txt'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "process_file_4": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_process_file_1": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_2": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_3": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_4": "[Errno 2] No such file or directory: 'test.txt'",
                        "test_process_file_5": "[Errno 2] No such file or directory: 'test.txt'"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "write_file": {
            "write_file_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_file_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_file_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_file_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "write_file_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_85": {
        "simulate_operation": {
            "simulate_operation_0": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "simulate_operation_1": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "simulate_operation_2": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "simulate_operation_3": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "simulate_operation_4": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            }
        }
    },
    "ClassEval_86": {
        "check_winner": {
            "check_winner_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_winner_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_winner_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_winner_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "check_winner_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "is_board_full": {
            "is_board_full_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_board_full_1": "True is not false",
                        "test_is_board_full_3": "True is not false",
                        "test_is_board_full_5": "True is not false"
                    }
                },
                "total_run": 5
            },
            "is_board_full_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_board_full_1": "True is not false",
                        "test_is_board_full_3": "True is not false",
                        "test_is_board_full_5": "True is not false"
                    }
                },
                "total_run": 5
            },
            "is_board_full_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_board_full_1": "True is not false",
                        "test_is_board_full_3": "True is not false",
                        "test_is_board_full_5": "True is not false"
                    }
                },
                "total_run": 5
            },
            "is_board_full_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_board_full_1": "True is not false",
                        "test_is_board_full_3": "True is not false",
                        "test_is_board_full_5": "True is not false"
                    }
                },
                "total_run": 5
            },
            "is_board_full_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_board_full_1": "True is not false",
                        "test_is_board_full_3": "True is not false",
                        "test_is_board_full_5": "True is not false"
                    }
                },
                "total_run": 5
            }
        },
        "make_move": {
            "make_move_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_make_move_1": "None is not true",
                        "test_make_move_2": "None is not true",
                        "test_make_move_3": "None is not true",
                        "test_make_move_4": "None is not true",
                        "test_make_move_5": "None is not true"
                    }
                },
                "total_run": 5
            },
            "make_move_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_make_move_1": "None is not true",
                        "test_make_move_2": "None is not true",
                        "test_make_move_3": "None is not true",
                        "test_make_move_4": "None is not true",
                        "test_make_move_5": "None is not true"
                    }
                },
                "total_run": 5
            },
            "make_move_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_make_move_2": "True is not false"
                    }
                },
                "total_run": 5
            },
            "make_move_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_make_move_1": "None is not true",
                        "test_make_move_2": "None is not true",
                        "test_make_move_3": "None is not true",
                        "test_make_move_4": "None is not true",
                        "test_make_move_5": "None is not true"
                    }
                },
                "total_run": 5
            },
            "make_move_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_make_move_1": "None is not true",
                        "test_make_move_2": "None is not true",
                        "test_make_move_3": "None is not true",
                        "test_make_move_4": "None is not true",
                        "test_make_move_5": "None is not true"
                    }
                },
                "total_run": 5
            }
        }
    },
    "ClassEval_87": {
        "get_current_date": {
            "get_current_date_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_date_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_date_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_date_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_date_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_current_time": {
            "get_current_time_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_time_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_time_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_time_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_current_time_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "get_minutes": {
            "get_minutes_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_minutes_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_minutes_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_minutes_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "get_minutes_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_88": {
        "factorial": {
            "factorial_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "factorial_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "sin": {
            "sin_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_sin_1": "name 'math' is not defined",
                        "test_sin_2": "name 'math' is not defined",
                        "test_sin_3": "name 'math' is not defined",
                        "test_sin_4": "name 'math' is not defined",
                        "test_sin_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "sin_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_sin_1": "name 'math' is not defined",
                        "test_sin_2": "name 'math' is not defined",
                        "test_sin_3": "name 'math' is not defined",
                        "test_sin_4": "name 'math' is not defined",
                        "test_sin_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "sin_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_sin_1": "name 'math' is not defined",
                        "test_sin_2": "name 'math' is not defined",
                        "test_sin_3": "name 'math' is not defined",
                        "test_sin_4": "name 'math' is not defined",
                        "test_sin_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "sin_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_sin_1": "name 'radians' is not defined",
                        "test_sin_2": "name 'radians' is not defined",
                        "test_sin_3": "name 'radians' is not defined",
                        "test_sin_4": "name 'radians' is not defined",
                        "test_sin_5": "name 'radians' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "sin_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_sin_1": "0.49999999999999994 != 0.5"
                    }
                },
                "total_run": 5
            }
        },
        "tan": {
            "tan_0": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_tan_1": "name 'radians' is not defined",
                        "test_tan_2": "name 'radians' is not defined",
                        "test_tan_3": "name 'radians' is not defined",
                        "test_tan_4": "name 'radians' is not defined",
                        "test_tan_5": "name 'radians' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "tan_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_tan_1": "name 'radians' is not defined",
                        "test_tan_2": "name 'radians' is not defined",
                        "test_tan_3": "name 'radians' is not defined",
                        "test_tan_4": "name 'radians' is not defined",
                        "test_tan_5": "name 'radians' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "tan_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_tan_1": "name 'radians' is not defined",
                        "test_tan_2": "name 'radians' is not defined",
                        "test_tan_3": "name 'radians' is not defined",
                        "test_tan_4": "name 'radians' is not defined",
                        "test_tan_5": "name 'radians' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "tan_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_tan_1": "name 'radians' is not defined",
                        "test_tan_2": "name 'radians' is not defined",
                        "test_tan_3": "name 'radians' is not defined",
                        "test_tan_4": "name 'radians' is not defined",
                        "test_tan_5": "name 'radians' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "tan_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_tan_1": "name 'radians' is not defined",
                        "test_tan_2": "name 'radians' is not defined",
                        "test_tan_3": "name 'radians' is not defined",
                        "test_tan_4": "name 'radians' is not defined",
                        "test_tan_5": "name 'radians' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            }
        },
        "taylor": {
            "taylor_0": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "taylor_1": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "taylor_2": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            },
            "taylor_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_taylor_1": "name 'math' is not defined",
                        "test_taylor_2": "name 'math' is not defined",
                        "test_taylor_3": "name 'math' is not defined",
                        "test_taylor_4": "name 'math' is not defined",
                        "test_taylor_5": "name 'math' is not defined"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "taylor_4": {
                "compilation": "success",
                "errors": {
                    "TimeoutError": {}
                },
                "failures": {},
                "total_run": 0
            }
        }
    },
    "ClassEval_89": {
        "evaluate_expression": {
            "evaluate_expression_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "evaluate_expression_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_TwentyFourPointGame": "evaluate_expression() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {},
                "total_run": 1
            },
            "evaluate_expression_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "evaluate_expression_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            },
            "evaluate_expression_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 1
            }
        }
    },
    "ClassEval_9": {
        "subtract": {
            "subtract_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "subtract_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "subtract_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "subtract_3": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_subtract": "subtract() missing 1 required positional argument: 'num2'",
                        "test_subtract_2": "subtract() missing 1 required positional argument: 'num2'",
                        "test_subtract_3": "subtract() missing 1 required positional argument: 'num2'",
                        "test_subtract_4": "subtract() missing 1 required positional argument: 'num2'",
                        "test_subtract_5": "subtract() missing 1 required positional argument: 'num2'"
                    }
                },
                "failures": {},
                "total_run": 5
            },
            "subtract_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_90": {
        "get_fragment": {
            "get_fragment_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_fragment_2": "'https://www.bing.com/search?pglt=41&q=hu[108 chars]h-CN' != None"
                    }
                },
                "total_run": 5
            },
            "get_fragment_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_fragment_2": "'https://www.bing.com/search?pglt=41&q=hu[108 chars]h-CN' != None"
                    }
                },
                "total_run": 5
            },
            "get_fragment_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_fragment_2": "'https://www.bing.com/search?pglt=41&q=hu[108 chars]h-CN' != None"
                    }
                },
                "total_run": 5
            },
            "get_fragment_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_fragment_2": "'https://www.bing.com/search?pglt=41&q=hu[108 chars]h-CN' != None"
                    }
                },
                "total_run": 5
            },
            "get_fragment_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_fragment_2": "'https://www.bing.com/search?pglt=41&q=hu[108 chars]h-CN' != None"
                    }
                },
                "total_run": 5
            }
        },
        "get_scheme": {
            "get_scheme_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_scheme_6": "'' is not None"
                    }
                },
                "total_run": 6
            },
            "get_scheme_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_scheme_6": "'' is not None"
                    }
                },
                "total_run": 6
            },
            "get_scheme_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_scheme_6": "'' is not None"
                    }
                },
                "total_run": 6
            },
            "get_scheme_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_scheme_6": "'' is not None"
                    }
                },
                "total_run": 6
            },
            "get_scheme_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_get_scheme_6": "'' is not None"
                    }
                },
                "total_run": 6
            }
        }
    },
    "ClassEval_91": {
        "parse": {
            "parse_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_1": "False != True",
                        "test_parse_3": "False != True",
                        "test_parse_7": "False != True"
                    }
                },
                "total_run": 7
            },
            "parse_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_1": "False != True",
                        "test_parse_3": "False != True",
                        "test_parse_7": "False != True"
                    }
                },
                "total_run": 7
            },
            "parse_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_1": "False != True",
                        "test_parse_3": "False != True",
                        "test_parse_7": "False != True"
                    }
                },
                "total_run": 7
            },
            "parse_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_1": "False != True",
                        "test_parse_3": "False != True",
                        "test_parse_7": "False != True"
                    }
                },
                "total_run": 7
            },
            "parse_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_parse_1": "False != True",
                        "test_parse_3": "False != True",
                        "test_parse_6": "Lists differ: [''] != []",
                        "test_parse_7": "Lists differ: [''] != []"
                    }
                },
                "total_run": 7
            }
        }
    },
    "ClassEval_92": {
        "validate_user_login": {
            "validate_user_login_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "validate_user_login_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "validate_user_login_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "validate_user_login_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "validate_user_login_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_93": {
        "n_similarity": {
            "n_similarity_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_n_similarity_1": "module 'gensim.matutils' has no attribute 'cosine_similarity'",
                        "test_n_similarity_2": "module 'gensim.matutils' has no attribute 'cosine_similarity'",
                        "test_n_similarity_3": "module 'gensim.matutils' has no attribute 'cosine_similarity'",
                        "test_n_similarity_4": "module 'gensim.matutils' has no attribute 'cosine_similarity'",
                        "test_n_similarity_5": "module 'gensim.matutils' has no attribute 'cosine_similarity'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "n_similarity_1": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_n_similarity_1": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_2": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_3": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_4": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_5": "name 'cosine_similarity' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "n_similarity_2": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_n_similarity_1": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_2": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_3": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_4": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_5": "name 'cosine_similarity' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "n_similarity_3": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_n_similarity_1": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_2": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_3": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_4": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_5": "name 'cosine_similarity' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "n_similarity_4": {
                "compilation": "success",
                "errors": {
                    "NameError": {
                        "test_n_similarity_1": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_2": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_3": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_4": "name 'cosine_similarity' is not defined",
                        "test_n_similarity_5": "name 'cosine_similarity' is not defined"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_94": {
        "add_item": {
            "add_item_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_item_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_item_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_item_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "add_item_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "display_items": {
            "display_items_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_items": "['Coke - $1.25 [10]'] != 'Coke - $1.25 [10]'",
                        "test_display_items_3": "['Coke - $1.25 [10]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [10]\\nPizza - $1.25 [10]'",
                        "test_display_items_4": "['Coke - $1.25 [0]'] != 'Coke - $1.25 [0]'",
                        "test_display_items_5": "['Coke - $1.25 [0]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [0]\\nPizza - $1.25 [10]'"
                    }
                },
                "total_run": 5
            },
            "display_items_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_items": "['Coke - $1.25 [10]'] != 'Coke - $1.25 [10]'",
                        "test_display_items_3": "['Coke - $1.25 [10]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [10]\\nPizza - $1.25 [10]'",
                        "test_display_items_4": "['Coke - $1.25 [0]'] != 'Coke - $1.25 [0]'",
                        "test_display_items_5": "['Coke - $1.25 [0]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [0]\\nPizza - $1.25 [10]'"
                    }
                },
                "total_run": 5
            },
            "display_items_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_items": "['Coke - $1.25 [10]'] != 'Coke - $1.25 [10]'",
                        "test_display_items_3": "['Coke - $1.25 [10]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [10]\\nPizza - $1.25 [10]'",
                        "test_display_items_4": "['Coke - $1.25 [0]'] != 'Coke - $1.25 [0]'",
                        "test_display_items_5": "['Coke - $1.25 [0]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [0]\\nPizza - $1.25 [10]'"
                    }
                },
                "total_run": 5
            },
            "display_items_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_items": "['Coke - $1.25 [10]'] != 'Coke - $1.25 [10]'",
                        "test_display_items_3": "['Coke - $1.25 [10]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [10]\\nPizza - $1.25 [10]'",
                        "test_display_items_4": "['Coke - $1.25 [0]'] != 'Coke - $1.25 [0]'",
                        "test_display_items_5": "['Coke - $1.25 [0]', 'Pizza - $1.25 [10]'] != 'Coke - $1.25 [0]\\nPizza - $1.25 [10]'"
                    }
                },
                "total_run": 5
            },
            "display_items_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_display_items": "None != 'Coke - $1.25 [10]'",
                        "test_display_items_3": "None != 'Coke - $1.25 [10]\\nPizza - $1.25 [10]'",
                        "test_display_items_4": "None != 'Coke - $1.25 [0]'",
                        "test_display_items_5": "None != 'Coke - $1.25 [0]\\nPizza - $1.25 [10]'"
                    }
                },
                "total_run": 5
            }
        },
        "insert_coin": {
            "insert_coin_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_coin_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_coin_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_coin_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "insert_coin_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "restock_item": {
            "restock_item_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "restock_item_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "restock_item_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "restock_item_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "restock_item_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_95": {
        "change_order_status": {
            "change_order_status_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "change_order_status_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "change_order_status_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "change_order_status_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "change_order_status_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        }
    },
    "ClassEval_96": {
        "fahrenheit_to_celsius": {
            "fahrenheit_to_celsius_0": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "fahrenheit_to_celsius_1": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "fahrenheit_to_celsius_2": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "fahrenheit_to_celsius_3": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            },
            "fahrenheit_to_celsius_4": {
                "compilation": "success",
                "errors": {},
                "failures": {},
                "total_run": 5
            }
        },
        "query": {
            "query_0": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_query_3": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_4": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given",
                        "test_query_5": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given",
                        "test_query_6": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_query_2": "None != False"
                    }
                },
                "total_run": 6
            },
            "query_1": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_query": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_3": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given",
                        "test_query_4": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_5": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_6": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_query_2": "(None, None) != False"
                    }
                },
                "total_run": 6
            },
            "query_2": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_query_3": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given",
                        "test_query_4": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_5": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_6": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_query_2": "None != False"
                    }
                },
                "total_run": 6
            },
            "query_3": {
                "compilation": "success",
                "errors": {
                    "KeyError": {
                        "test_query_2": "'Shanghai'"
                    },
                    "TypeError": {
                        "test_query_3": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_4": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given",
                        "test_query_5": "fahrenheit_to_celsius() takes 1 positional argument but 2 were given",
                        "test_query_6": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "query_4": {
                "compilation": "success",
                "errors": {
                    "TypeError": {
                        "test_query_3": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given",
                        "test_query_6": "celsius_to_fahrenheit() takes 1 positional argument but 2 were given"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_query_2": "(None, None) != False",
                        "test_query_4": "Tuples differ: (73.4, 'cloudy') != (23.000000000000004, 'cloudy')",
                        "test_query_5": "Tuples differ: (80.6, 'sunny') != (26.999999999999996, 'sunny')"
                    }
                },
                "total_run": 6
            }
        }
    },
    "ClassEval_97": {
        "is_valid_input": {
            "is_valid_input_0": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_valid_input": "False is not true",
                        "test_is_valid_input2": "False is not true",
                        "test_is_valid_input3": "False is not true",
                        "test_is_valid_input5": "False is not true",
                        "test_is_valid_input6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "is_valid_input_1": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_valid_input": "False is not true",
                        "test_is_valid_input2": "False is not true",
                        "test_is_valid_input3": "False is not true",
                        "test_is_valid_input5": "False is not true",
                        "test_is_valid_input6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "is_valid_input_2": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_valid_input": "False is not true",
                        "test_is_valid_input2": "False is not true",
                        "test_is_valid_input3": "False is not true",
                        "test_is_valid_input5": "False is not true",
                        "test_is_valid_input6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "is_valid_input_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_valid_input": "False is not true",
                        "test_is_valid_input2": "False is not true",
                        "test_is_valid_input3": "False is not true",
                        "test_is_valid_input5": "False is not true",
                        "test_is_valid_input6": "False is not true"
                    }
                },
                "total_run": 6
            },
            "is_valid_input_4": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_is_valid_input": "False is not true",
                        "test_is_valid_input2": "False is not true",
                        "test_is_valid_input3": "False is not true",
                        "test_is_valid_input5": "False is not true",
                        "test_is_valid_input6": "False is not true"
                    }
                },
                "total_run": 6
            }
        }
    },
    "ClassEval_98": {
        "write_xml": {
            "write_xml_0": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_write_xml_1": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_2": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_3": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_4": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_5": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_6": "'XMLProcessor' object has no attribute 'data'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_xml_1": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_write_xml_1": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_2": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_3": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_4": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_5": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_6": "'XMLProcessor' object has no attribute 'data'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_xml_2": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_write_xml_1": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_2": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_3": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_4": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_5": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_6": "'XMLProcessor' object has no attribute 'data'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_xml_3": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_write_xml_1": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_2": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_3": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_4": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_5": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_6": "'XMLProcessor' object has no attribute 'data'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "write_xml_4": {
                "compilation": "success",
                "errors": {
                    "AttributeError": {
                        "test_write_xml_1": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_2": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_3": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_4": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_5": "'XMLProcessor' object has no attribute 'data'",
                        "test_write_xml_6": "'XMLProcessor' object has no attribute 'data'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    },
    "ClassEval_99": {
        "create_zip_file": {
            "create_zip_file_0": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_create_zip_file_1": "[Errno 2] No such file or directory: 'example.zip/new_zip_file.zip.zip'",
                        "test_create_zip_file_2": "[Errno 2] No such file or directory: 'example.zip/new_zip_file.zip.zip'",
                        "test_create_zip_file_3": "[Errno 2] No such file or directory: 'example.zip/new_zip_file.zip.zip'",
                        "test_create_zip_file_4": "[Errno 2] No such file or directory: 'example.zip/new_zip_file.zip.zip'",
                        "test_create_zip_file_5": "[Errno 2] No such file or directory: 'example.zip/new_zip_file.zip.zip'"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "create_zip_file_1": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_create_zip_file_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_create_zip_file_1": "None is not true",
                        "test_create_zip_file_2": "None is not true",
                        "test_create_zip_file_3": "None is not true",
                        "test_create_zip_file_4": "None is not true",
                        "test_create_zip_file_5": "None is not true"
                    }
                },
                "total_run": 6
            },
            "create_zip_file_2": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_create_zip_file_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_create_zip_file_1": "False is not true",
                        "test_create_zip_file_2": "False is not true",
                        "test_create_zip_file_3": "False is not true",
                        "test_create_zip_file_4": "False is not true",
                        "test_create_zip_file_5": "False is not true"
                    }
                },
                "total_run": 6
            },
            "create_zip_file_3": {
                "compilation": "success",
                "errors": {},
                "failures": {
                    "AssertionError": {
                        "test_create_zip_file_1": "None is not true",
                        "test_create_zip_file_2": "None is not true",
                        "test_create_zip_file_3": "None is not true",
                        "test_create_zip_file_4": "None is not true",
                        "test_create_zip_file_5": "None is not true"
                    }
                },
                "total_run": 6
            },
            "create_zip_file_4": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_create_zip_file_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_create_zip_file_1": "None is not true",
                        "test_create_zip_file_2": "None is not true",
                        "test_create_zip_file_3": "None is not true",
                        "test_create_zip_file_4": "None is not true",
                        "test_create_zip_file_5": "None is not true"
                    }
                },
                "total_run": 6
            }
        },
        "extract_file": {
            "extract_file_0": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_file_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "extract_file_1": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_file_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {},
                "total_run": 6
            },
            "extract_file_2": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_file_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_extract_file_1": "None is not true",
                        "test_extract_file_2": "None is not true",
                        "test_extract_file_3": "None is not true",
                        "test_extract_file_4": "None is not true",
                        "test_extract_file_5": "None is not true"
                    }
                },
                "total_run": 6
            },
            "extract_file_3": {
                "compilation": "success",
                "errors": {
                    "FileNotFoundError": {
                        "test_extract_file_6": "[Errno 2] No such file or directory: ''"
                    }
                },
                "failures": {
                    "AssertionError": {
                        "test_extract_file_1": "None is not true",
                        "test_extract_file_2": "None is not true",
                        "test_extract_file_3": "None is not true",
                        "test_extract_file_4": "None is not true",
                        "test_extract_file_5": "None is not true"
                    }
                },
                "total_run": 6
            },
            "extract_file_4": {
                "compilation": "success",
                "errors": {
                    "OSError": {
                        "test_extract_file_1": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_2": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_3": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'",
                        "test_extract_file_4": "[WinError 145] \u76ee\u5f55\u4e0d\u662f\u7a7a\u7684\u3002: 'test_folder'"
                    }
                },
                "failures": {},
                "total_run": 6
            }
        }
    }
}